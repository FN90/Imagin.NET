<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Controls.Common"
    xmlns:Common.Data.Converters="clr-namespace:Imagin.Common.Data.Converters;assembly=Imagin.Common"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <Common.Data.Converters:InverseBooleanConverter x:Key="InverseBoolConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <DataTemplate x:Key="DefaultWatermarkTemplate">
        <ContentControl Content="{Binding}" Foreground="Gray" Focusable="False" Margin="0,0,3,0" />
    </DataTemplate>

    <Style TargetType="{x:Type local:TimePicker}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TimePicker}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                        <Grid x:Name="root">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <local:ButtonSpinner 
                                x:Name="PART_Spinner"
                                IsTabStop="False"
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
                                AllowSpin="{TemplateBinding AllowSpin}"
                                ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
                                <local:WatermarkTextBox 
                                    x:Name="PART_TextBox"
                                    BorderThickness="0"
                                    Background="Transparent"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    FontSize="{TemplateBinding FontSize}"
                                    FontStretch="{TemplateBinding FontStretch}"
                                    FontStyle="{TemplateBinding FontStyle}"
                                    FontWeight="{TemplateBinding FontWeight}"
                                    Foreground="{TemplateBinding Foreground}"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                    IsTabStop="{TemplateBinding IsTabStop}"
                                    MinWidth="20"
                                    AcceptsReturn="False"
                                    TextAlignment="{TemplateBinding TextAlignment}"
                                    TextWrapping="NoWrap"
                                    Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                    TabIndex="{TemplateBinding TabIndex}"
                                    Watermark="{TemplateBinding Watermark}"
                                    WatermarkTemplate="{TemplateBinding WatermarkTemplate}" />
                            </local:ButtonSpinner>
                        
                            <local:MaskedToggleButton 
                                x:Name="_timePickerToggleButton"
                                Grid.Column="1"
                                Focusable="False"
                                IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                Padding="5,0,0,0"
                                Source="pack://application:,,,/Imagin.Controls.Common;component/Images/ArrowDownSmall.png"
                                Visibility="{TemplateBinding ShowDropDownButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
                            <Popup
                                x:Name="PART_Popup"
                                IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}"
                                AllowsTransparency="True"
                                StaysOpen="False"
                                ToolTip="{x:Static sys:String.Empty}">
                                <Popup.Resources>
                                    <Style TargetType="ToolTip">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border 
                                    Background="{DynamicResource Brush.Popup.Background}"
                                    BorderBrush="{DynamicResource Brush.Popup.BorderBrush}"
                                    BorderThickness="1" 
                                    MinWidth="{Binding ActualWidth, ElementName=root}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Grid>
                                        <ListBox 
                                            x:Name="PART_TimeListItems"
                                            BorderThickness="0"
                                            DisplayMemberPath="Display"
                                            ItemContainerStyle="{Binding TimeItemStyle, RelativeSource={RelativeSource AncestorType={x:Type local:TimePicker}}}"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
