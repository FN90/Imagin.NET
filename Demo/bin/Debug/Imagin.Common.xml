<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Imagin.Common</name>
    </assembly>
    <members>
        <member name="T:Imagin.Common.AbstractObject">
            <summary>
            A base for abstract objects (implements INotifyPropertyChanged).
            </summary>
        </member>
        <member name="E:Imagin.Common.AbstractObject.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.AbstractObject.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Imagin.Common.AbstractObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.CheckableObject`1">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Imagin.Common.CheckableObject`1.value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckableObject`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.CheckableObject`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject`1.#ctor(`0,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="isChecked"></param>
        </member>
        <member name="M:Imagin.Common.CheckableObject`1.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isChecked"></param>
        </member>
        <member name="T:Imagin.Common.IChangeable">
            <summary>
            Specifies an object that can observe changes to itself.
            </summary>
        </member>
        <member name="E:Imagin.Common.IChangeable.Changed">
            <summary>
            Occurs when the object is changed in any way.
            </summary>
        </member>
        <member name="T:Imagin.Common.IContainer`1">
            <summary>
            
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="P:Imagin.Common.IContainer`1.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IEntry">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.IEntry.Date">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IValidate`1">
            <summary>
            Specifies a handler that validates a series of arguments and produces a <see cref="T:System.Boolean"/> result.
            </summary>
        </member>
        <member name="M:Imagin.Common.IValidate`1.Validate(`0[])">
            <summary>
            
            </summary>
            <param name="Arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Attributes.ConstraintAttribute">
            <summary>
            Specifies a constraint for a property with both a minimum and maximum value.
            </summary>
            <remarks>
            Constraint values are stored as object type because generic types cannot inherit from Attribute.
            </remarks>
        </member>
        <member name="T:Imagin.Common.Attributes.Int64KindAttribute">
            <summary>
            Specifies how an Int64 field should be displayed.
            </summary>
        </member>
        <member name="P:Imagin.Common.Attributes.Int64KindAttribute.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Attributes.Int64KindAttribute.#ctor(Imagin.Common.Primitives.Int64Kind)">
            <summary>
            
            </summary>
            <param name="kind"></param>
        </member>
        <member name="T:Imagin.Common.Attributes.StringFormatAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Attributes.StringFormatAttribute.Format">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Attributes.StringFormatAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Format"></param>
        </member>
        <member name="T:Imagin.Common.Attributes.StringKindAttribute">
            <summary>
            Specifies how a string field should be displayed.
            </summary>
        </member>
        <member name="P:Imagin.Common.Attributes.StringKindAttribute.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Attributes.StringKindAttribute.#ctor(Imagin.Common.Primitives.StringKind)">
            <summary>
            
            </summary>
            <param name="kind"></param>
        </member>
        <member name="T:Imagin.Common.Attributes.AbbreviationAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Attributes.AbbreviationAttribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Attributes.AbbreviationAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Imagin.Common.Collections.ITrackableCollection">
            <summary>
            Specifies a collection capable of tracking items.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemAdded">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemsAdded">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemInserted">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemsRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.ITrackableCollection.IsEmpty">
            <summary>
            Gets whether or not the collection is empty.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Add(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Remove(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.RemoveAt(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Indices"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.ITrackableCollection`1">
            <summary>
            Specifies a collection capable of tracking generic items.
            </summary>
            <typeparam name="T">The type of the objects in the collection.</typeparam>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemAdded">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemsAdded">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemInserted">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemsRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Generic.ITrackableCollection`1.IsEmpty">
            <summary>
            Gets whether or not the collection is empty.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.RemoveAt(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Indices"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.TrackableList`1">
            <summary>
            Provides a collection that can be tracked; inherits <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemAdded">
            <summary>
            Occurs when a single item is added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemsAdded">
            <summary>
            Occurs when any number of items are added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemsChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemsCleared">
            <summary>
            Occurs when the collection is cleared.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemInserted">
            <summary>
            Occurs when a single item is inserted.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemRemoved">
            <summary>
            Occurs when a single item is removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemsRemoved">
            <summary>
            Occurs when any number of items are removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Generic.TrackableList`1.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.RemoveAt(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Indices"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemAdded(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemsAdded(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemInserted(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <param name="Index"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemRemoved(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemsRemoved(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="OldItems"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.IStackable`1">
            <summary>
            Defines methods to manipulate stackable collections.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.IStackable`1.Push(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.IStackable`1.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.IStackable`1.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.ObservableStack`1">
            <summary>
            Defines methods relative to stack data strcuture; inherits <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ObservableStack`1.Push(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ObservableStack`1.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ObservableStack`1.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ObservableStack`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.TrackableCollection`1">
            <summary>
            Provides a collection that can be tracked; inherits <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemAdded">
            <summary>
            Occurs when a single item is added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemsAdded">
            <summary>
            Occurs when any number of items are added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemsChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemsCleared">
            <summary>
            Occurs when the collection is cleared.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemInserted">
            <summary>
            Occurs when a single item is inserted.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemRemoved">
            <summary>
            Occurs when a single item is removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemsRemoved">
            <summary>
            Occurs when any number of items are removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Generic.TrackableCollection`1.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.RemoveAt(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Indices"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemAdded(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemsAdded(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemInserted(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <param name="Index"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemRemoved(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemsRemoved(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="OldItems"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1">
            <summary>
            This class provides the base for concurrent collections that 
            can be bound to user interface elements
            </summary>
            <notes>
            Could do with a more performant enumerable implementation
            but this is what I have so far. I create a snapshot of the collection
            and use the enumerable from that. When the collection is updated
            I set a flag indicating that a new snapshot is required.
            </notes>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.IsDispatcherThread">
            <summary>
            Gets if the calling thread is the same as the dispatcher thread
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.ReadWriteLock">
            <summary>
            The lock that controls read/write access to the base collection
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.BaseCollection">
            <summary>
            The underlying base enumerable that is used to store the items,
            used for creating an immutable collection from which an enumerator
            can be obtained.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.NewSnapshotRequired">
            <summary>
            Flag indicating that a write has occured, so anything that depends on
            taking a snapshot of the collection needs to be updated.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.SnapshotLock">
            <summary>
            The enumerable lock to prevent threading conflicts on allocating
            the enumerable of the fixed collection
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.BaseSnapshot">
            <summary>
            The collection used for generating an enumerable that iterates
            over a snapshot of the base collection
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Subscribers">
            <summary>
            A list of observers
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.SubscriberKey">
            <summary>
            The key for new observers, incremented with each new observer
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.IsDisposed">
            <summary>
            Flag indicating this collection is disposed
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Snapshot">
            <summary>
            Gets an immutable snapshot of the collection
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.ReadCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.viewModel">
            <summary>
            The view model that is used to allow this collection to be bound to the UI.
            Relevant methods determine if they are being called on the UI thread, and if
            so then the view model is used.
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.ViewModel">
            <summary>
            Access this directly if getting the error "An ItemsControl is inconsistent with its items source".
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.WriteCollection">
            <summary>
            Gets the base collection that holds the values
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor that takes an eumerable
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Disposing"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.OnNext(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.OnError(System.Exception)">
            <summary>
            
            </summary>
            <param name="Exception"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.OnCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Subscribe(System.IObserver{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            
            </summary>
            <param name="Observer"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DisposeDelegate">
            <summary>
            Result returned from <see cref="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Subscribe(System.IObserver{System.Collections.Specialized.NotifyCollectionChangedEventArgs})"/> method.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.GetEnumerator">
            <summary>
            Gets the enumerator for a snapshot of the collection
            </summary>
            <remarks>
            Note that the Enumerator should really only be used on the Dispatcher thread,
            if not then should enumerate over the Snapshot instead.
            
            </remarks>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for a snapshot of the collection
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.UpdateSnapshot">
            <summary>
            Updates the snapshot that is used to generate an Enumerator
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseClear(System.Action)">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <remarks>
            Don't use BaseCollection.Clear(), it causes problems because it
            sends a reset event, and then the collection needs to be read out through
            an enumerator. Use RemoveAt instead until the collection is empty.
            Using remove from end after testing with this speed test:
            </remarks>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.HandleBaseCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles when the base collection changes. Pipes the event through IObservable.OnNext
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            As this is a concurrent collection we don't want a change event to result in the listener
            later coming back to enumerate over the whole collection again, possible before the listener
            gets other changed events, but after the collection has been added to.
            </remarks>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseRead(System.Action)">
            <summary>
            Handles read access from the base collection
            </summary>
            <param name="readFunc"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseRead``1(System.Func{``0})">
            <summary>
            Handles read access from the base collection when a return value is required
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ReadAction"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseReadWrite``1(System.Func{System.Boolean},System.Func{``0},System.Func{``0})">
            <summary>
            Calls the read function passed in, and if it returns true,
            then calls the next read function, else calls the write
            function.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseReadWrite``1(System.Func{System.Boolean},System.Func{``0},System.Action,System.Func{``0})">
            <summary>
            Calls the read function passed in, and if it returns true,
            then calls the next read function, else unlocks the collection,
            calls the pre-write function, then chains to DoBaseReadWrite
            calls the write
            function.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseWrite(System.Action)">
            <summary>
            Handles write access to the base collection
            </summary>
            <param name="WriteAction"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseWrite``1(System.Func{``0})">
            <summary>
            Handles write access to the base collection when a return value is required
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="WriteFunc"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1">
            <summary>
            Provides a collection that can be modified safely on other threads. The notify event is thrown using the dispatcher from the event listener(s).
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemAdded">
            <summary>
            Occurs when a single item is added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemsAdded">
            <summary>
            Occurs when any number of items are added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemsChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemsCleared">
            <summary>
            Occurs when the collection is cleared.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemInserted">
            <summary>
            Occurs when a single item is inserted.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemRemoved">
            <summary>
            Occurs when a single item is removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemsRemoved">
            <summary>
            Occurs when any number of items are removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.PropertyChanged">
            <summary>
            Occurs when a property changes.
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(`0[])">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Imagin#Common#Collections#Generic#ITrackableCollection{T}#Remove(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.RemoveAt(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Indices"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.BeginClear">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemAdded(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemsAdded(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemInserted(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <param name="Index"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemRemoved(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemsRemoved(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="OldItems"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor">
            <summary>
            Executes a stream on actions on the dispatcher thread.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor._instance">
            <summary>
            This class is a singleton class. Below is the instance.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.ActionQueue">
            <summary>
            A queue of actions to be called on the dispatcher thread
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.SubscriberQueue">
            <summary>
            A list of pending subscribers, processed once the Dispather is created.
            Using a ConcurrentDictionary because this is the only framework collection
            that has a remove method.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.Dispatcher">
            <summary>
            The Application Dispatcher
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.ActionWaiting">
            <summary>
            The current action that is awaiting processing on the Dispatcher thread
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.ActionWaitingSemaphore">
            <summary>
            Semaphore used to prevent a race condition on ActionWaiting 
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.Instance">
            <summary>
            Gets the instance of the singleton class
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.IsDispatcherThread">
            <summary>
            Tests if the calling thread is the same as the dispatcher thread
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.#ctor">
            <summary>
            Private constructor for this singleton class. Use the Instance property to
            get an instance of this class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.CheckIfDispatcherCreated">
            <summary>
            Checks if the dispatcher has been created yet
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.StartQueueProcessing">
            <summary>
            Starts the thread that processes the queue of actions that are to be
            executed on the dispatcher thread.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.Add(System.Action)">
             <summary>
             Adds an action to the processing queue
             </summary>
             <remarks>
             If we are running on the dispatcher thread, we could call the
             action directly, but then we've got the problem with queue
             jumping. It's desirable to immediately update the view model,
             as if we don't the code that added the item won't see it
             if an iteration is done over the collection, which would confuse
             the person using this collection.
            
             So, we need to add it to the queue and then process the queue
             so the view is consistent with the Add action.
             </remarks>
             <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.QueueSubscribe(System.Action)">
            <summary>
            Adds a subscribe action to the subscriber queue
            </summary>
            <remarks>
            Subscriber queue is set to null after the 
            Dispatcher has been created. So subscriptions 
            can be handled directly once the dispatcher 
            queue is being processed.
            </remarks>
            <param name="SubscribeAction"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.DisposeDelegate">
            <summary>
            Result returned by "QueueSubscribe" method.
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ImmutableCollection`1">
            <summary>
            Provides a collection that is immutable or cannot be changed.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ImmutableCollection`1.Source">
            <summary>
            The base collection that is wrapped by this class to restrict access
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ImmutableCollection`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ImmutableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ImmutableCollection`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ImmutableCollection`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ImmutableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="Array"></param>
            <param name="ArrayIndex"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ImmutableCollection`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ImmutableCollectionBase`1">
            <summary>
            Provides a base collection that is immutable or cannot be changed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Imagin.Common.Collections.Concurrent.ImmutableCollectionBase`1.Count" -->
        <member name="P:Imagin.Common.Collections.Concurrent.ImmutableCollectionBase`1.IsReadOnly">
            <summary>
            Gets a value indicating that the collection is read-only.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Imagin.Common.Collections.Concurrent.ImmutableCollectionBase`1.Contains(`0)" -->
        <member name="M:Imagin.Common.Collections.Concurrent.ImmutableCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
             Copies the elements of the collection to an array, starting at a particular index.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ImmutableCollectionBase`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Imagin.Common.Collections.Concurrent.ImmutableCollectionBase`1.Add(`0)" -->
        <!-- Badly formed XML comment ignored for member "M:Imagin.Common.Collections.Concurrent.ImmutableCollectionBase`1.Clear" -->
        <!-- Badly formed XML comment ignored for member "M:Imagin.Common.Collections.Concurrent.ImmutableCollectionBase`1.Remove(`0)" -->
        <member name="M:Imagin.Common.Collections.Concurrent.ImmutableCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1">
            <summary>
            The view model for <see cref="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1"/>; this is exposed by <see cref="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1"/> when it is used on the dispatcher thread.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.UnsubscribeToken">
            <summary>
            Token that comes back when subscribing to the <see cref="T:System.IObserver`1"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.SubscriptionActionToken">
            <summary>
            Token for removing the subscription action from the queue
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.ProcessCommand(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Processes a NotifyCollectionChangedEventArgs event argument
            </summary>
            <param name="Command"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.Dispose(System.Boolean)">
            <summary>
            Disposes of this object, and supresses the finalizer
            </summary>
            <param name="IsDisposing"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.#ctor(System.IObservable{System.Collections.Specialized.NotifyCollectionChangedEventArgs})" -->
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.Finalize">
            <summary>
            Finalizer, disposes of the object
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.Dispose">
            <summary>
            Disposes of the current object
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.OnCompleted" -->
        <!-- Badly formed XML comment ignored for member "M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.OnError(System.Exception)" -->
        <!-- Badly formed XML comment ignored for member "M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.OnNext(System.Collections.Specialized.NotifyCollectionChangedEventArgs)" -->
        <member name="T:Imagin.Common.Collections.FrameworkElementCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.FrameworkElementCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Config.IAppStarter">
            <summary>
            Specifies a control responsible for starting up an application.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IAppStarter.Progress">
            <summary>
            A value indicating the current progress.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IAppStarter.Status">
            <summary>
            A message indicating the current status.
            </summary>
        </member>
        <member name="M:Imagin.Common.Config.IAppStarter.Set(System.Double,System.String)">
            <summary>
            
            </summary>
            <param name="Progress"></param>
            <param name="Status"></param>
        </member>
        <member name="T:Imagin.Common.Config.IMainModule">
            <summary>
            Specifies the main graphical interface of an application (<see cref="T:System.Windows.Window"/>, if WPF).
            </summary>
        </member>
        <member name="T:Imagin.Common.Config.AppInitializerDelegate">
            <summary>
            
            </summary>
            <param name="Source"></param>
        </member>
        <member name="T:Imagin.Common.Config.IApp">
            <summary>
            Specifies an application.
            </summary>
        </member>
        <member name="E:Imagin.Common.Config.IApp.Ran">
            <summary>
            Occurs just after <see cref="M:System.Windows.Application.Run"/> is called.
            </summary>
        </member>
        <member name="E:Imagin.Common.Config.IApp.Started">
            <summary>
            Occurs when the application has finished all startup tasks and is ready to display the main module.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IApp.Arguments">
            <summary>
            Gets or sets command line arguments passed to the current application instance.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IApp.Initializer">
            <summary>
            Gets or sets delegate for assisting with initialization.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IApp.Log">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IApp.MainModule">
            <summary>
            Gets or sets the main module (<see cref="T:System.Windows.Window"/>, if WPF).
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IApp.Resources">
            <summary>
            Gets or sets the resources of the application.
            </summary>
        </member>
        <member name="T:Imagin.Common.Config.IPlugin">
            <summary>
            An independent library used to extend functionality of an application.
            </summary>
        </member>
        <member name="E:Imagin.Common.Config.IPlugin.Enabled">
            <summary>
            Occurs when the plugin is enabled.
            </summary>
        </member>
        <member name="E:Imagin.Common.Config.IPlugin.Disabled">
            <summary>
            Occurs when the plugin is disabled.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IPlugin.Author">
            <summary>
            Gets the name of the individual who, or organization that, developed the plugin.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IPlugin.Description">
            <summary>
            Gets short description explaining what the plugin does.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IPlugin.Icon">
            <summary>
            Gets <see cref="T:System.Uri"/> that points to an icon resource.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IPlugin.IsEnabled">
            <summary>
            Gets or sets whether or not the plugin is enabled.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IPlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IPlugin.Resources">
            <summary>
            Gets resources used just for the plugin.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IPlugin.Uri">
            <summary>
            Gets a web address where the plugin might be published.
            </summary>
        </member>
        <member name="P:Imagin.Common.Config.IPlugin.Version">
            <summary>
            Gets the version of the plugin.
            </summary>
        </member>
        <member name="M:Imagin.Common.Config.IPlugin.OnEnabled">
            <summary>
            Occurs when the plugin is enabled.
            </summary>
        </member>
        <member name="M:Imagin.Common.Config.IPlugin.OnDisabled">
            <summary>
            Occurs when the plugin is disabled.
            </summary>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ArrayToStringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ArrayToStringConverter.GetSeparator(System.Object)">
            <summary>
            
            </summary>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ArrayToStringConverter.ToString(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ArrayToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ArrayToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.Int32ArrayToStringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.Int32ArrayToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.EnumHasFlagConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.EnumHasFlagConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.EnumHasFlagConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.EnumFlagsToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.EnumFlagsToVisibilityConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.EnumFlagsToVisibilityConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.NullConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <remarks>
            According to https://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter.convertback(v=vs.110).aspx#Anchor_1,
            
            If you do not support a conversion back, 
            you should return Binding.DoNothing or
            DependencyProperty.UnsetValue.
            </remarks>
        </member>
        <member name="T:Imagin.Common.Data.Converters.AbbreviationAttributeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.AbbreviationAttributeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.AbbreviationAttributeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ParentFolderConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ParentFolderConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ParentFolderConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.BrushToColorConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.BrushToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.BrushToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ColorToHexConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ColorToHexConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ColorToHexConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.FileSpeedConverter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Data.MathBinding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Data.MathBinding.Type">
            <summary>
            The type of math operation to perform (note, the operation is unknown unless otherwise specified).
            </summary>
        </member>
        <member name="P:Imagin.Common.Data.MathBinding.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.MathBinding.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Path"></param>
        </member>
        <member name="T:Imagin.Common.Data.BindingProxy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.BindingProxy.DataProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Data.BindingProxy.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.BindingProxy.CreateInstanceCore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Debug.Result`1">
            <summary>
            Represents a result with data.
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.Result`1.Data">
            <summary>
            Abitrary data to store a reference to based on the result.
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Result`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Debug.Result"/> class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Result`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Debug.Result"/> class.
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Result`1.op_Implicit(Imagin.Common.Debug.Result{`0})~System.Boolean">
            <summary>
            If result is success, true; else, false.
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:Imagin.Common.Debug.Error">
            <summary>
            Represents a failed result; optionally, encapsulates an exception.
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.Error.Exception">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Error.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Debug.Error.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Error.#ctor(System.Exception,System.Object)">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="data"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Error.#ctor(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="data"></param>
        </member>
        <member name="T:Imagin.Common.Debug.Result">
            <summary>
            Represents a result.
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Result.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Result.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="T:Imagin.Common.Debug.Success">
            <summary>
            Represents a successful result.
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Success.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Success.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="T:Imagin.Common.Drawing.AngularUnit">
            <summary>
            Specifies an angular unit.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.AngularUnit.Degree">
            <summary>
            Specifies a degree as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.AngularUnit.Radian">
            <summary>
            Specifies a radian as the unit of measure.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Cmyk">
            <summary>
            Structure to define CMYK.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Cmyk.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Cmyk.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Cmyk.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Cmyk.C">
            <summary>
            Gets or sets the cyan component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Cmyk.M">
            <summary>
            Gets or sets the magenta component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Cmyk.Y">
            <summary>
            Gets or sets the yellow component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Cmyk.K">
            <summary>
            Gets or sets the black component (0 to 1).
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.op_Equality(Imagin.Common.Drawing.Cmyk,Imagin.Common.Drawing.Cmyk)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.op_Inequality(Imagin.Common.Drawing.Cmyk,Imagin.Common.Drawing.Cmyk)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.#ctor(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <param name="Color"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.#ctor(Imagin.Common.Drawing.Rgba)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="m"></param>
            <param name="y"></param>
            <param name="k"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsb">
            <summary>
            Structure to define a color for HSB (hue/saturation/brightness).
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsb.Component">
            <summary>
            Specifies a HSB component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.Component.H">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsb.H"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.Component.S">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsb.S"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.Component.B">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsb.B"/> component.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsb.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MaxValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MaxValue.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MaxValue.B">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsb.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MinValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MinValue.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MinValue.B">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsb.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsb.H">
            <summary>
            Gets or sets the hue component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsb.S">
            <summary>
            Gets or sets the saturation component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsb.B">
            <summary>
            Gets or sets the brightness component (0 to 1).
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.op_Equality(Imagin.Common.Drawing.Hsb,Imagin.Common.Drawing.Hsb)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.op_Inequality(Imagin.Common.Drawing.Hsb,Imagin.Common.Drawing.Hsb)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.#ctor(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <param name="Color"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.#ctor(Imagin.Common.Drawing.Rgba)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the <see cref="T:Imagin.Common.Drawing.Hsb"/> structure.
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="b"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.New(Imagin.Common.Drawing.Hsb.Component,System.Double)">
            <summary>
            
            </summary>
            <param name="Component"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsl">
            <summary>
            Structure to define HSL.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsl.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Hsl"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.Component.H">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsl.H"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.Component.S">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsl.S"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.Component.L">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsl.L"/> component.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsl.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MaxValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MaxValue.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MaxValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsl.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MinValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MinValue.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MinValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsl.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsl.H">
            <summary>
            Gets or sets the hue component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsl.S">
            <summary>
            Gets or sets the saturation component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsl.L">
            <summary>
            Gets or sets the lightness component (0 to 1).
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.op_Equality(Imagin.Common.Drawing.Hsl,Imagin.Common.Drawing.Hsl)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.op_Inequality(Imagin.Common.Drawing.Hsl,Imagin.Common.Drawing.Hsl)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.#ctor(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <param name="Color"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.#ctor(Imagin.Common.Drawing.Rgba)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the <see cref="T:Imagin.Common.Drawing.Hsl"/> structure.
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="l"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.Frgb(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.New(Imagin.Common.Drawing.Hsl.Component,System.Double)">
            <summary>
            
            </summary>
            <param name="Component"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.ToRgba">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.IColor">
            <summary>
            Specifies a color.
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.IColor.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Illuminant">
            <summary>
            Represents a theoretical source of visible light with a published profile.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.A">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.C">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.E">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.D50">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.D55">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.D65">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.ICC">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.IReflectiveColor">
            <summary>
            Specifies a color that is reflective, or defined with both an <see cref="T:Imagin.Common.Drawing.Illuminant"/> and <see cref="T:Imagin.Common.Drawing.ObserverAngle"/>.
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.IReflectiveColor.Illuminant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.IReflectiveColor.Observer">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lab">
            <summary>
            Structure to define CIE LAB color.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lab.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Lab"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.Component.L">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lab.L"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.Component.A">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lab.A"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.Component.B">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lab.B"/> component.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lab.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MaxValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MaxValue.A">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MaxValue.B">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lab.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MinValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MinValue.A">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MinValue.B">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lab.Range">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Range.L">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Range.A">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Range.B">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.L">
            <summary>
            Gets or sets the luminance component (0 to 100).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.A">
            <summary>
            Gets or sets the opposing a component (-127 to 128).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.B">
            <summary>
            Gets or sets the opposing b component (-127 to 128).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Illuminant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Observer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.op_Equality(Imagin.Common.Drawing.Lab,Imagin.Common.Drawing.Lab)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.op_Inequality(Imagin.Common.Drawing.Lab,Imagin.Common.Drawing.Lab)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.#ctor(System.Windows.Media.Color,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Color"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.#ctor(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.#ctor(System.Double,System.Double,System.Double,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Drawing.Lab"/> structure.
            </summary>
            <param name="l"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="observer"></param>
            <param name="illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.New(Imagin.Common.Drawing.Lab.Component,System.Double)">
            <summary>
            
            </summary>
            <param name="Component"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Lch">
            <summary>
            Structure to define LCH color.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lch.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Lch"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.Component.L">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lch.L"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.Component.C">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lch.C"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.Component.H">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lch.H"/> component.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lch.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MaxValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MaxValue.C">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MaxValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lch.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MinValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MinValue.C">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MinValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.L">
            <summary>
            Gets or sets the luminance component (0 to 100).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.C">
            <summary>
            Gets or sets the chroma component (0 to 100).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.H">
            <summary>
            Gets or sets the hue component (0 to 359).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.Illuminant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.Observer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.op_Equality(Imagin.Common.Drawing.Lch,Imagin.Common.Drawing.Lch)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.op_Inequality(Imagin.Common.Drawing.Lch,Imagin.Common.Drawing.Lch)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.#ctor(System.Windows.Media.Color,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Color"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.#ctor(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.#ctor(Imagin.Common.Drawing.Lab,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Lab"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.#ctor(System.Double,System.Double,System.Double,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Drawing.Lch"/> structure.
            </summary>
            <param name="l"></param>
            <param name="c"></param>
            <param name="h"></param>
            <param name="observer"></param>
            <param name="illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.New(Imagin.Common.Drawing.Lch.Component,System.Double)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.ToLab">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Luv">
            <summary>
            Structure to define CIE LUV color.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Luv.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Luv"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Component.L">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Luv.L"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Component.U">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Luv.U"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Component.V">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Luv.V"/> component.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Luv.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MaxValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MaxValue.U">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MaxValue.V">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Luv.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MinValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MinValue.U">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MinValue.V">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Luv.Range">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Range.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Range.U">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Range.V">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.L">
            <summary>
            Gets or sets the lightness component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.U">
            <summary>
            Gets or sets the u component (-1 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.V">
            <summary>
            Gets or sets the v component (-1 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.Illuminant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.Observer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.op_Equality(Imagin.Common.Drawing.Luv,Imagin.Common.Drawing.Luv)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.op_Inequality(Imagin.Common.Drawing.Luv,Imagin.Common.Drawing.Luv)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.#ctor(System.Windows.Media.Color,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Color"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.#ctor(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.#ctor(Imagin.Common.Drawing.Xyz,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Xyz"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.#ctor(System.Double,System.Double,System.Double,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Drawing.Luv"/> structure.
            </summary>
            <param name="l"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="observer"></param>
            <param name="illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.New(Imagin.Common.Drawing.Luv.Component,System.Double)">
            <summary>
            
            </summary>
            <param name="Component"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.ToXyz">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.ObserverAngle">
            <summary>
            Specifies an observer for a color that uses reflective light.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.ObserverAngle.Two">
            <summary>
            Specifies the 1931 standard observer.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.ObserverAngle.Ten">
            <summary>
            Specifies the 1964 observer.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Rgba">
            <summary>
            Structure to define RGBA.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Rgba.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Rgba"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.Component.R">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Rgba.R"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.Component.G">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Rgba.G"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.Component.B">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Rgba.B"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.Component.A">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Rgba.A"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Rgba.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Rgba.R">
            <summary>
            Gets or sets the red component (0 to 255).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Rgba.G">
            <summary>
            Gets or sets the green component (0 to 255).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Rgba.B">
            <summary>
            Gets or sets the blue component (0 to 255).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Rgba.A">
            <summary>
            Gets or sets the alpha component (0 to 255).
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.op_Equality(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.Rgba)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.op_Inequality(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.Rgba)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.#ctor(System.Windows.Media.Color)">
            <summary>
            Initializes an instance of the <see cref="T:Imagin.Common.Drawing.Rgba"/> structure.
            </summary>
            <param name="Color"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of the <see cref="T:Imagin.Common.Drawing.Rgba"/> structure.
            </summary>
            <param name="R"></param>
            <param name="G"></param>
            <param name="B"></param>
            <param name="A"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes an instance of the <see cref="T:Imagin.Common.Drawing.Rgba"/> structure.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes an instance of the <see cref="T:Imagin.Common.Drawing.Rgba"/> structure.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
            <param name="fromLinear"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.Linear(System.Byte)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.Linear(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Xyz">
            <summary>
            Structure to define CIE XYZ color.
            </summary>
            <remarks>
            There are 11 main illuminants:
            1. A*
            2. C*
            3. D50*
            4. D55*
            5. D65*
            6. D75
            7. E*^
            8. F2
            9. F7
            10. F11
            11. ICC*
            
            * Defined in this struct
            ^ Theoretical
            
            And 2 types of observers 
            1.  2° = 1931
            2. 10° = 1964
            
            This structure supports Observer = 2°, Illuminant = D65 by default.
            </remarks>
        </member>
        <member name="T:Imagin.Common.Drawing.Xyz.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Xyz"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.Component.X">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Xyz.X"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.Component.Y">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Xyz.Y"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.Component.Z">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Xyz.Z"/> component.
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Max">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Xyz.MaxValue">
            <summary>
            TO-DO: Disallow instance creation (which does nothing).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.MaxValue.Item(Imagin.Common.Drawing.Xyz.Component,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Component"></param>
            <param name="Illuminant"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Xyz.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.MinValue.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.MinValue.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.MinValue.Z">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.X">
            <summary>
            Gets or sets the x component (0 to Illuminant.Max.X).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Y">
            <summary>
            Gets or sets the y component (0 to Illuminant.Max.Y).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Z">
            <summary>
            Gets or sets the component (0 to Illuminant.Max.Z).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Illuminant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Observer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.op_Equality(Imagin.Common.Drawing.Xyz,Imagin.Common.Drawing.Xyz)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.op_Inequality(Imagin.Common.Drawing.Xyz,Imagin.Common.Drawing.Xyz)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.#ctor(System.Windows.Media.Color,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Color"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.#ctor(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.#ctor(System.Double,System.Double,System.Double,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Drawing.Xyz"/> structure.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="observer"></param>
            <param name="illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.Fxyz(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.New(Imagin.Common.Drawing.Xyz.Component,System.Double)">
            <summary>
            Clones current <see cref="T:Imagin.Common.Drawing.Xyz"/> instance and sets given component value.
            </summary>
            <param name="Component"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Pixel">
            <summary>
            Specifies a device pixel as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Inch">
            <summary>
            Specifies an inch as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Centimeter">
            <summary>
            Specifies a centimeter (1/2.54 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Millimeter">
            <summary>
            Specifies a millimeter (1/25.4 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Pica">
            <summary>
            Specifies a pica (1/6 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Twip">
            <summary>
            Specifies a twip (1/1140 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Character">
            <summary>
            Specifies a character (1/12 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.En">
            <summary>
            Specifies an en (1/144.54 inch) as the unit of measure.
            </summary>
        </member>
        <member name="T:Imagin.Common.Extensions.ArrayExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ArrayExtensions.Where(System.Array,System.Func{System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.BrushExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.BrushExtensions.Duplicate(System.Windows.Media.Brush)">
            <summary>
            Creates Brush from specified Brush and it's values.
            </summary>
        </member>
        <member name="T:Imagin.Common.Extensions.DecimalExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DecimalExtensions.Coerce(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.IEnumerableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.IEnumerableExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            
            </summary>
            <param name="Source"></param>
            <param name="Action"></param>
        </member>
        <member name="T:Imagin.Common.Extensions.IListGenericExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.IListGenericExtensions.Enumerate``1(System.Collections.Generic.IList{``0},System.Object,System.Func{System.Object,``0,System.Boolean})">
            <summary>
            Enumerate all items contained in a collection (recursively), including each item's items (all items must implement <see cref="T:Imagin.Common.IContainer`1"/>).
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <param name="Parent"></param>
            <param name="Action"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.IListGenericExtensions.GetParent``1(System.Collections.Generic.IList{``0},System.Object,``0)">
            <summary>
            Get the logical parent for the given item. <para>(recursive)</para>
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source">The collection to search.</param>
            <param name="Parent">The parent to evaluate.</param>
            <param name="Item">The item to get the parent of.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.IListGenericExtensions.Move``1(System.Collections.Generic.IList{``0},``0,Imagin.Common.Direction)">
            <summary>
            Move the given item in the given direction (i.e., increase or decrease the item's index).
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <param name="Item"></param>
            <param name="Direction"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.IListGenericExtensions.Clone``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Clone the given item contained in the collection.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.IListGenericExtensions.Enumerate``1(System.Collections.Generic.IList{``0},System.Func{System.Object,``0,System.Boolean})">
            <summary>
            Enumerate all items contained in a collection (recursively), including each item's items (all items must implement <see cref="T:Imagin.Common.IContainer`1"/>).
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.IListGenericExtensions.GetParent``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Get the logical parent for the given item. <para>(recursive)</para>
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.IListGenericExtensions.LevelUp``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Move the given item up one level, or remove the item from it's current parent and add it to the collection of it's parent's parent.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.IListGenericExtensions.MoveDown``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Move the given item down, or increase the item's index.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.IListGenericExtensions.MoveUp``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Move the given item up, or decrease the item's index.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.IListGenericExtensions.RemoveRecursively``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Remove the given item from the collection without knowing what's it's parent is. <para>(recursive)</para> 
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.IListGenericExtensions.Wrap``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Add the given item to the given folder and insert the folder at the item's former location.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <param name="Folder"></param>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.IListExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.IListExtensions.Any(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.IListExtensions.ForEach(System.Collections.IList,System.Action{System.Object})">
            <summary>
            
            </summary>
            <param name="Source"></param>
            <param name="Action"></param>
        </member>
        <member name="T:Imagin.Common.Extensions.Int16Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.Int16Extensions.Abs(System.Int16)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int16Extensions.Coerce(System.Int16,System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.VersionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.VersionExtensions.Coerce(System.Version,System.Version,System.Version)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.UriExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.UriExtensions.GetResourceStream(System.Uri)">
            <summary>
            Returns a Uri that represents a resource.
            </summary>
        </member>
        <member name="T:Imagin.Common.Extensions.ActionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ActionExtensions.InvokeIf(System.Action,System.Func{System.Action,System.Boolean})">
            <summary>
            Invoke the given action if predicate.
            </summary>
            <param name="Value"></param>
            <param name="Predicate"></param>
        </member>
        <member name="T:Imagin.Common.Extensions.PropertyInfoExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.PropertyInfoExtensions.IsPublic(System.Reflection.PropertyInfo)">
            <summary>
            Check whether or not property is public and can be written to.
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Extensions.BitmapExtensions.ICONINFO.fIcon">
            <summary>
            Specifies whether this structure defines an icon or a cursor. A value of TRUE specifies an icon; FALSE specifies a cursor. 
            </summary>
        </member>
        <member name="F:Imagin.Common.Extensions.BitmapExtensions.ICONINFO.xHotspot">
            <summary>
            Specifies the x-coordinate of a cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member is ignored.
            </summary>
        </member>
        <member name="F:Imagin.Common.Extensions.BitmapExtensions.ICONINFO.yHotspot">
            <summary>
            Specifies the y-coordinate of the cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member is ignored. 
            </summary>
        </member>
        <member name="F:Imagin.Common.Extensions.BitmapExtensions.ICONINFO.hbmMask">
            <summary>
            (HBITMAP) Specifies the icon bitmask bitmap. If this structure defines a black and white icon, this bitmask is formatted so that the upper half is the icon AND bitmask and the lower half is the icon XOR bitmask. Under this condition, the height should be an even multiple of two. If this structure defines a color icon, this mask only defines the AND bitmask of the icon. 
            </summary>
        </member>
        <member name="F:Imagin.Common.Extensions.BitmapExtensions.ICONINFO.hbmColor">
            <summary>
            (HBITMAP) Handle to the icon color bitmap. This member can be optional if this structure defines a black and white icon. The AND bitmask of hbmMask is applied with the SRCAND flag to the destination; subsequently, the color bitmap is applied (using XOR) to the destination by using the SRCINVERT flag. 
            </summary>
        </member>
        <member name="T:Imagin.Common.Extensions.BoolExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.BoolExtensions.ToVisibility(System.Boolean,System.Windows.Visibility)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="FalseVisibility"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.ByteExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ByteExtensions.Coerce(System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="ToCoerce"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ByteExtensions.ToDouble(System.Byte)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ByteExtensions.ToInt32(System.Byte)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.GenericExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.Add``1(``0[],``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.For``1(System.Collections.Generic.IList{``0},System.Int32,System.Action{System.Collections.Generic.IList{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.For``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Action{System.Collections.Generic.IList{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Until"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.For``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{System.Int32},System.Action{System.Collections.Generic.IList{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Until"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{System.Collections.Generic.IEnumerable{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{System.Collections.Generic.IEnumerable{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Until"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Predicate{System.Int32},System.Action{System.Collections.Generic.IEnumerable{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Until"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Perform for each loop on given <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.In``1(``0,``0[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="Items"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.IsNullable``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.Merge``1(``0[],``0[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.Second``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the second item in a sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.Third``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the last item in a sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws an ArgumentNullException if the given data item is null.
            </summary>
            <param name="Object">The item to check for nullity.</param>
            <param name="Name">The name to use when throwing an exception, if necessary</param>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.TryAdd``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Items"></param>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.TryClear``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Items"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.TryForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Attempt to perform for each loop on given <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.GenericExtensions.WhereFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Items"></param>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.ModifierKeysExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ModifierKeysExtensions.IsPressed(System.Windows.Input.ModifierKeys)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.RectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.RectExtensions.BoundSize(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Bound rect to given size.
            </summary>
            <param name="Rect">The rect to bind.</param>
            <param name="Bounds">The size of the binding.</param>
            <returns>A rect bound to given size.</returns>
        </member>
        <member name="M:Imagin.Common.Extensions.RectExtensions.BoundPoint(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Bound rect based on given sizes.
            </summary>
        </member>
        <member name="T:Imagin.Common.Extensions.ColorExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ColorExtensions.DistanceFrom(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Gets distance to a color from given color.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ColorExtensions.ToHex(System.Windows.Media.Color)">
            <summary>
            Converts color to hex string without alpha component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ColorExtensions.ToHexWithAlpha(System.Windows.Media.Color)">
            <summary>
            Converts color to hex string with alpha component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ColorExtensions.WithAlpha(System.Windows.Media.Color,System.Byte)">
            <summary>
            Creates new color with specified alpha component from specified color.
            </summary>
        </member>
        <member name="T:Imagin.Common.Extensions.DateTimeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DateTimeExtensions.Coerce(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="P:Imagin.Common.Extensions.DateTimeExtensions.CurrentMonth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Extensions.DateTimeExtensions.CurrentDay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Extensions.DateTimeExtensions.CurrentYear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DateTimeExtensions.GetContextNow(System.DateTimeKind)">
            <summary>
            
            </summary>
            <param name="Kind"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DateTimeExtensions.GetMeridiem(System.DateTime)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DateTimeExtensions.IsEqualTo(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Determines if first date is equal to second.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DateTimeExtensions.IsEqualTo(System.DateTime,System.DateTime)">
            <summary>
            Determines if first date is equal to second irrespective of time.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DateTimeExtensions.IsToday(System.DateTime)">
            <summary>
            Checks if month, day, and year are identical to that of today (ignores time).
            </summary>
        </member>
        <member name="P:Imagin.Common.Extensions.DateTimeExtensions.Tomorrow">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DateTimeExtensions.ToRelativeTime(System.DateTime)">
            <summary>
            
            </summary>
            <param name="Date"></param>
            <returns></returns>
        </member>
        <member name="P:Imagin.Common.Extensions.DateTimeExtensions.Yesterday">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Extensions.DependencyObjectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.String,System.Windows.Data.BindingMode,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Property"></param>
            <param name="Source"></param>
            <param name="Path"></param>
            <param name="Mode"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.Windows.PropertyPath,System.Windows.Data.BindingMode,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Property"></param>
            <param name="Source"></param>
            <param name="Path"></param>
            <param name="Mode"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.String,System.Windows.Data.IValueConverter,System.Object,System.Windows.Data.BindingMode,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Property"></param>
            <param name="Source"></param>
            <param name="Path"></param>
            <param name="Converter"></param>
            <param name="ConverterParameter"></param>
            <param name="Mode"></param>
            <param name="UpdateSourceTrigger"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.Windows.PropertyPath,System.Windows.Data.IValueConverter,System.Object,System.Windows.Data.BindingMode,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Property"></param>
            <param name="Source"></param>
            <param name="Path"></param>
            <param name="Converter"></param>
            <param name="ConverterParameter"></param>
            <param name="Mode"></param>
            <param name="UpdateSourceTrigger"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.String,System.Windows.Data.RelativeSourceMode,System.Windows.Data.BindingMode,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Property"></param>
            <param name="Path"></param>
            <param name="RelativeSourceMode"></param>
            <param name="Mode"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.CollapseAll(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Object"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.ExpandAll(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Object"></param>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.GetChildOfType``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.GetParent(System.Windows.DependencyObject)">
            <summary>
            Attempts to find parent for specified object in following order: 
            VisualParent -> LogicalParent -> LogicalTemplatedParent.
            </summary>
            <remarks>
            Visual, FrameworkElement, and FrameworkContentElement types are supported.
            If the logical parent is not found, we try TemplatedParent
            </remarks>
            <param name="Object">The object to get the parent for.</param>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.GetParent``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.GetLogicalParent(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.GetLogicalParent``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.GetVisualChildren``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Parent"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.GetVisualParent(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.GetVisualParent``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.IsDescendantOf(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Returns true if the specified element is a child of parent somewhere in the visual 
            tree. This method will work for Visual, FrameworkElement and FrameworkContentElement.
            </summary>
            <param name="element">The element that is potentially a child of the specified parent.</param>
            <param name="parent">The element that is potentially a parent of the specified element.</param>
        </member>
        <member name="M:Imagin.Common.Extensions.DependencyObjectExtensions.ToggleAll(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets IsExpanded property to specified value on all TreeViewItems found.
            </summary>
        </member>
        <member name="T:Imagin.Common.Extensions.DoubleExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.Add(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Increment"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.Abs(System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.Coerce(System.Double,System.Double,System.Double)">
            <summary>
            Coerces <see cref="T:System.Double"/> to given maximum and minimum.
            </summary>
            <param name="Value">The value to coerce.</param>
            <param name="Maximum">The maximum to coerce to.</param>
            <param name="Minimum">The minimum to coerce to.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.Coerce(System.Double,System.Double,System.Boolean)">
            <summary>
            Coerces <see cref="T:System.Double"/> to given limit, which can be minimal or maximal.
            </summary>
            <param name="Value">The value to coerce.</param>
            <param name="Limit">The minimum or maximum to coerce to.</param>
            <param name="MinimumOrMaximum">Whether or not to coerce to minimum or maximum.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.Divide(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.GetRemaining(System.TimeSpan,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="Elapsed"></param>
            <param name="TotalBytes"></param>
            <param name="ProcessedBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.Multiply(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.NearestFactor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Factor"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.Round(System.Double,System.Int32)">
            <summary>
            Rounds double to variable places.
            </summary>
            <param name="Value"></param>
            <param name="Digits"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.Shift(System.Double,System.Int32)">
            <summary>
            Shifts decimal variable places. <para>If negative, shift left; otherwise, shift right.</para>
            </summary>
            <param name="Value"></param>
            <param name="Shifts"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.ShiftRound(System.Double,System.Int32,System.Int32)">
            <summary>
            Shifts decimal point and rounds to variable places. <para>If negative, shift left; otherwise, shift right.</para>
            </summary>
            <param name="Value"></param>
            <param name="Shifts"></param>
            <param name="Digits"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.Subtract(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Decrement"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.ToAngle(System.Double)">
            <summary>
            Convert given radians to angle.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.ToByte(System.Double)">
            <summary>
            Converts double to byte.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.ToInt32(System.Double)">
            <summary>
            Converts double to int.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.ToInt64(System.Double)">
            <summary>
            Converts double to long.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.ToRadians(System.Double)">
            <summary>
            Converts angle to radians.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.DoubleExtensions.ToUnit(System.Double,Imagin.Common.Drawing.GraphicalUnit,Imagin.Common.Drawing.GraphicalUnit,System.Double)">
            <summary>
            Converts a graphical unit value to another graphical unit value.
            </summary>
            <param name="Value">Number of units.</param>
            <param name="From">The unit to convert from.</param>
            <param name="To">The unit to convert to.</param>
            <param name="Ppi">Pixels per inch.</param>
            <param name="RoundTo">Decimal places to round to.</param>
        </member>
        <member name="M:Imagin.Common.Extensions.EnumExtensions.GetList``1">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.EnumExtensions.GetObservableCollection``1">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.EnumExtensions.GetValues``1">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.EnumExtensions.ParseEnum``1(System.String,System.Boolean)">
            <summary>
            Converts from string to enum.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.EnumExtensions.TryParseEnum``1(System.String,System.Boolean)">
            <summary>
            Attempts to convert from string to enum.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.EnumExtensions.Add``1(System.Enum,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.EnumExtensions.Add(System.Enum,System.Enum)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.EnumExtensions.Has``1(System.Enum,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="type"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.EnumExtensions.Has(System.Enum,System.Enum)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.EnumExtensions.Remove``1(System.Enum,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.EnumExtensions.Remove(System.Enum,System.Enum)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.IconExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.IconExtensions.ToImageSource(System.Drawing.Icon)">
            <summary>
            
            </summary>
            <param name="Icon"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.Int32Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.Add(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Increment"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.Abs(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.Coerce(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ToCoerce"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.Divide(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.K(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.M(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.Multiply(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.Random(System.Int32)">
            <summary>
            Generates a random string with numeric length.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.SplitBytes(System.Int32)">
            <summary>
            Converts int to byte array.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.Subtract(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Decrement"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.ToByte(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.ToDouble(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.ToInt64(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.ToFileSize(System.Int32,Imagin.Common.Data.FileSizeFormat,System.Int32)">
            <summary>
            
            </summary>
            <param name="Bytes"></param>
            <param name="FileSizeFormat"></param>
            <param name="RoundTo"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.ToOrdinal(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int32Extensions.WithinRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if given number is within given range.
            </summary>
        </member>
        <member name="T:Imagin.Common.Extensions.Int64Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.Add(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Increment"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.Abs(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.Coerce(System.Int64,System.Int64,System.Int64)">
            <summary>
            Coerces <see cref="T:System.Int64"/> to given maximum and minimum.
            </summary>
            <param name="Value">The value to coerce.</param>
            <param name="Maximum">The maximum to coerce to.</param>
            <param name="Minimum">The minimum to coerce to.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.Coerce(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Coerces <see cref="T:System.Int64"/> to given limit, which can be minimal or maximal.
            </summary>
            <param name="Value">The value to coerce.</param>
            <param name="Limit">The minimum or maximum to coerce to.</param>
            <param name="MinimumOrMaximum">Whether or not to coerce to minimum or maximum.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.Divide(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="ToDivide"></param>
            <param name="Divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.K(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.M(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.Multiply(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.Subtract(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Decrement"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.ToDouble(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.ToInt32(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.Int64Extensions.ToFileSize(System.Int64,Imagin.Common.Data.FileSizeFormat,System.Int32)">
            <summary>
            
            </summary>
            <param name="Bytes"></param>
            <param name="FileSizeFormat"></param>
            <param name="RoundTo"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.IntPtrExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.IntPtrExtensions.DeleteObject(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="Ptr"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.SpecialFolderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.SpecialFolderExtensions.GetPath(System.Environment.SpecialFolder)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.ObjectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.As``1(System.Object)">
            <summary>
            Returns object as specified type.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.EqualsAll(System.Object,System.Object[])">
            <summary>
            Check if object is equal to all given objects.
            </summary>
            <param name="Value"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.EqualsAny(System.Object,System.Object[])">
            <summary>
            Check if object is equal to any given object.
            </summary>
            <param name="Value"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.EqualsNone(System.Object,System.Object[])">
            <summary>
            Check if object is equal to no given object.
            </summary>
            <param name="Value"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.GetAttribute``1(System.Object,System.String,System.Boolean)">
            <summary>
            Get attribute for member of specified object and of specified type.
            </summary>
            <typeparam name="T">The type of attribute to get.</typeparam>
            <param name="ToEvaluate">The object containing the target attribute.</param>
            <param name="Member">The name of the member to get the attribute from; if object is enum, field attribute is obtained.</param>
            <param name="Inherits">Whether or not to check inherited attributes.</param>
            <returns>Attribute for member of object and specified type.</returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.GetAttributes``1(System.Object,System.String,System.Boolean)">
            <summary>
            Get all attributes for member of specified object and of specified type.
            </summary>
            <typeparam name="T">The type of attributes to get.</typeparam>
            <param name="ToEvaluate">The object containing the target attributes.</param>
            <param name="Member">The name of the member to get attributes from; if object is enum, field attributes are obtained.</param>
            <param name="Inherits">Whether or not to check inherited attributes.</param>
            <returns>Attributes for member of object and specified type.</returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.GetAttributes(System.Object,System.String,System.Boolean)">
            <summary>
            Get all attributes for member of specified object.
            </summary>
            <param name="ToEvaluate">The object containing the target attributes.</param>
            <param name="Member">The name of the member to get attributes from; if object is enum, field attributes are obtained.</param>
            <param name="Inherits">Whether or not to check inherited attributes.</param>
            <returns>Attributes for member of object.</returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.GetValue(System.Object,System.String)">
            <summary>
            Get value for object from given property name.
            </summary>
            <param name="Value">The object to get the value for.</param>
            <param name="PropertyName">The name of the property to get a value for.</param>
            <returns>The value of the property for an object.</returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.HasAttribute``1(System.Object,System.String,System.Boolean)">
            <summary>
            Check if member of specified object has attribute of specified type.
            </summary>
            <typeparam name="T">The type of attribute to check exists.</typeparam>
            <param name="ToEvaluate">The object containing the target attribute.</param>
            <param name="Member"></param>
            <param name="Inherits">Whether or not to check inherited attributes.</param>
            <returns>Whether or not the member of the object (or the object itself) has the attribute.</returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.HasProperty(System.Object,System.String)">
            <summary>
            Check if specified object has property with specified name.
            </summary>
            <param name="ToEvaluate">The object to evaluate.</param>
            <param name="PropertyName">The name of the property to check exists.</param>
            <returns>Whether or not the specified object has a property with the specified name.</returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.Implements``1(System.Object)">
            <summary>
            Checks if given object's type implements interface (T).
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.Is``1(System.Object)">
            <summary>
            Checks if specified object is of specified type.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.IsAny(System.Object,System.Type[])">
            <summary>
            Checks if specified object is of specified type.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.IsNot``1(System.Object)">
            <summary>
            Checks if specified object is NOT of specified type.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.IsNull(System.Object)">
            <summary>
            Checks if specified object is null.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.NullOr(System.Object,System.Object)">
            <summary>
            Return object if it is null or given object.
            </summary>
            <param name="Value"></param>
            <param name="Or"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.NullOr``1(System.Object,System.Object)">
            <summary>
            Return object if it is null or given object.
            </summary>
            <param name="Value"></param>
            <param name="Or"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.To``1(System.Object)">
            <summary>
            Cast object to given type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.ObjectExtensions.ToDynamic(System.Object)">
            <summary>
            Casts object to dynamic type.
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.StringExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.GetFtpDirectoryName(System.String)">
            <summary>
            Gets the directory name of a path formatted for a FTP server.
            </summary>
            <param name="path">The path</param>
            <returns>The parent directory path</returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.GetFtpFileName(System.String)">
            <summary>
            Gets the file name from the path.
            </summary>
            <param name="path">The full path to the file</param>
            <returns>The file name</returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.GetFtpPath(System.String)">
            <summary>
            Converts the specified path into a valid FTP file system path.
            </summary>
            <param name="path">The file system path</param>
            <returns>A path formatted for FTP</returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.Append(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Append"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.After(System.String,System.String)">
            <summary>
            Get string after a.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.Between(System.String,System.String,System.String)">
            <summary>
            Get string between a and b.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.Before(System.String,System.String)">
            <summary>
            Get string before a a.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.Capitalize(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.DirectoryExists(System.String)">
            <summary>
            Invokes <see cref="M:System.IO.Directory.Exists(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.F(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <param name="Args"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.Format(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <param name="Args"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.FileExists(System.String)">
            <summary>
            Invokes <see cref="M:System.IO.File.Exists(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.GetDirectoryName(System.String,System.String)">
            <summary>
            Invokes <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <param name="Scheme"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.GetExtension(System.String)">
            <summary>
            Invokes <see cref="M:System.IO.Path.GetExtension(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.GetFileName(System.String,System.String)">
            <summary>
            Invokes <see cref="M:System.IO.Path.GetFileName(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <param name="Scheme"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.GetFileNameWithoutExtension(System.String)">
            <summary>
            Invokes <see cref="M:System.IO.Path.GetFileNameWithoutExtension(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.GetFileType(System.String,System.Func{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <param name="GetTypeDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.GetResourceUri(System.String,System.String)">
            <summary>
            Returns <see cref="T:System.Uri"/> of resource defined in assembly with given path; note, path must NOT begin with slash and slashes must be forward-facing.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.FindType(System.String)">
            <summary>
            
            </summary>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.IsAlphaNumeric(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.IsDouble(System.String)">
            <summary>
            
            </summary>
            <param name="ToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.IsEmpty(System.String)">
            <summary>
            
            </summary>
            <param name="ToEvaluate"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.IsInt(System.String)">
            <summary>
            
            </summary>
            <param name="ToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.IsLong(System.String)">
            <summary>
            
            </summary>
            <param name="ToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            
            </summary>
            <param name="ToEvaluate"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            
            </summary>
            <param name="ToEvaluate"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.IsShort(System.String)">
            <summary>
            
            </summary>
            <param name="ToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.IsValidUrl(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Schemes"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.Prepend(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Prepend"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.SplitCamelCase(System.String)">
            <summary>
            Parses string to boolean.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.TryRun(System.String,System.String)">
            <summary>
            Attempt to run program at path.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToBool(System.String)">
            <summary>
            Parses string to boolean (evaluates "true" and "false"; everything else is parsed to an int).
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToByte(System.String)">
            <summary>
            Parses string to byte.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToChar(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToInt16(System.String)">
            <summary>
            Parses string to short.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToInt32(System.String)">
            <summary>
            Parses string to int.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToInt64(System.String)">
            <summary>
            Parses string to long.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToDateTime(System.String)">
            <summary>
            Parses string to DateTime.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToDecimal(System.String)">
            <summary>
            Parses string to decimal.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToDouble(System.String)">
            <summary>
            Parses string to double.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToInt(System.String)">
            <summary>
            Parses string to int.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToLong(System.String)">
            <summary>
            Parses string to long.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToShort(System.String)">
            <summary>
            Parses string to short.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToSolidColorBrush(System.String)">
            <summary>
            Converts alphanumeric hexadecimal to SolidColorBrush.
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.StringExtensions.ToVersion(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="raw"></param>
            <param name="Delimiter"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Extensions.TypeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Extensions.TypeExtensions.Equals``1(System.Type)">
            <summary>
            Gets whether or not the type is equal to type, <see cref="!:&lt;TType&gt;"/>.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.TypeExtensions.Implements``1(System.Type)">
            <summary>
            Gets whether or not the type implements interface, <see cref="!:&lt;TType&gt;"/> (or whether <see cref="!:&lt;TType&gt;"/> is assignable from the type).
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.TypeExtensions.IsNullable(System.Type)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Extensions.TypeExtensions.TryCreate``1(System.Type)">
            <summary>
            Attempts to create a new instance of given type using <see cref="M:System.Activator.CreateInstance``1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Input.RelayCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute"></param>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.#ctor(System.Action{System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="T:Imagin.Common.Input.RelayCommand`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Imagin.Common.Input.RelayCommand`1.execute">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.RelayCommand`1.canExecute">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.RelayCommand`1.canExecuteTask">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute"></param>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.#ctor(System.Action{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="E:Imagin.Common.Input.RelayCommand`1.CanExecuteChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.Execute(System.Object)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Imagin.Common.Input.SelectedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.Input.SelectedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.SelectedEventArgs.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="T:Imagin.Common.Input.EventArgs`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Imagin.Common.Input.EventArgs`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.EventArgs`1.Parameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.EventArgs`1.#ctor(`0,System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Parameter"></param>
        </member>
        <member name="T:Imagin.Common.Input.ChangedValue">
            <summary>
            Represents a value that has changed.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.ChangedValue.OldValue">
            <summary>
            The old value.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.ChangedValue.NewValue">
            <summary>
            The new value.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.ChangedValue.#ctor(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="OldValue"></param>
            <param name="NewValue"></param>
        </member>
        <member name="T:Imagin.Common.ISelectable">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.ISelectable.Selected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ISelectable.IsSelected">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IVariant`1">
            <summary>
            Represents an object that is a variant of another object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Imagin.Common.IVariant`1.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.IVariant`1.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.IVariant`1.OnChanged(`0)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.IVariant`1.Set(`0)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.Media.GradientPosition">
            <summary>
            Specifies a point that determines a gradient's position.
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.GradientPosition.Start">
            <summary>
            Specifies the start point of the gradient.
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.GradientPosition.End">
            <summary>
            Specifies the end point of the gradient.
            </summary>
        </member>
        <member name="T:Imagin.Common.Media.Animation.ExpanderDoubleAnimation">
            <summary>
            Animates a double value.
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.FromProperty">
            <summary>
            Dependency property for the From property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.From">
            <summary>
            CLR Wrapper for the From depenendency property
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.ToProperty">
            <summary>
            Dependency property for the To property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.To">
            <summary>
            CLR Wrapper for the To property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.ReverseValue">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.ReverseValueProperty">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="M:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.CreateInstanceCore">
            <summary>
            Creates an instance of the animation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.GetCurrentValueCore(System.Double,System.Double,System.Windows.Media.Animation.AnimationClock)">
            <summary>
            Animates the double value
            </summary>
            <param name="defaultOriginValue">The original value to animate</param>
            <param name="defaultDestinationValue">The final value</param>
            <param name="animationClock">The animation clock (timer)</param>
            <returns>Returns the new double to set</returns>
        </member>
        <member name="T:Imagin.Common.Media.Animation.GridLengthAnimation">
            <summary>
            Animates a grid length value just like the DoubleAnimation animates a double value
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.IsCompleted">
            <summary>
            Marks the animation as completed
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.ReverseValue">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.GridLengthAnimation.ReverseValueProperty">
            <summary>
            Dependency property. Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.TargetPropertyType">
            <summary>
            Returns the type of object to animate
            </summary>
        </member>
        <member name="M:Imagin.Common.Media.Animation.GridLengthAnimation.CreateInstanceCore">
            <summary>
            Creates an instance of the animation object
            </summary>
            <returns>Returns the instance of the GridLengthAnimation</returns>
        </member>
        <member name="F:Imagin.Common.Media.Animation.GridLengthAnimation.FromProperty">
            <summary>
            Dependency property for the From property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.From">
            <summary>
            CLR Wrapper for the From depenendency property
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.GridLengthAnimation.ToProperty">
            <summary>
            Dependency property for the To property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.To">
            <summary>
            CLR Wrapper for the To property
            </summary>
        </member>
        <member name="M:Imagin.Common.Media.Animation.GridLengthAnimation.VerifyAnimationCompletedStatus(System.Windows.Media.Animation.AnimationClock)">
            <summary>
            registers to the completed event of the animation clock
            </summary>
            <param name="clock">the animation clock to notify completion status</param>
        </member>
        <member name="M:Imagin.Common.Media.Animation.GridLengthAnimation.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
            <summary>
            Animates the grid let set
            </summary>
            <param name="defaultOriginValue">The original value to animate</param>
            <param name="defaultDestinationValue">The final value</param>
            <param name="animationClock">The animation clock (timer)</param>
            <returns>Returns the new grid length to set</returns>
        </member>
        <member name="T:Imagin.Common.CheckableObject">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Imagin.Common.CheckableObject.Checked">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.CheckableObject.Unchecked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CheckableObject.isChecked">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckableObject.IsChecked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.CheckableObject.OnChecked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject.OnUnchecked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isChecked"></param>
        </member>
        <member name="T:Imagin.Common.CompassDirection">
            <remarks>
            Field order is important
            </remarks>
        </member>
        <member name="F:Imagin.Common.CompassDirection.NW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassDirection.N">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassDirection.NE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassDirection.W">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassDirection.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassDirection.E">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassDirection.SW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassDirection.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassDirection.SE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassDirection.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Entry">
            <summary>
             An object with a date that periodically notifies.
             </summary>
        </member>
        <member name="F:Imagin.Common.Entry.date">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Entry.Date">
            <summary>
            Gets or sets the date of the entry.
            </summary>
        </member>
        <member name="M:Imagin.Common.Entry.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Entry.#ctor(System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Imagin.Common.Entry.#ctor(System.DateTime,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Imagin.Common.Entry.OnNotified(System.Timers.ElapsedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.LeftRight">
            <summary>
            Represents a direction that can only be left or right.
            </summary>
        </member>
        <member name="T:Imagin.Common.Globalization.LocalizationProvider">
            <summary>
            A utility to access global localization resources.
            </summary>
        </member>
        <member name="T:Imagin.Common.IContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.IContainer.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.INotifiable">
            <summary>
            Specifies an object capable of raising notifications.
            </summary>
        </member>
        <member name="E:Imagin.Common.INotifiable.Notified">
            <summary>
            Occurs when <see cref="T:System.Timers.Timer"/> elapses.
            </summary>
        </member>
        <member name="P:Imagin.Common.INotifiable.Enabled">
            <summary>
            Gets or sets whether or not to enable notifications.
            </summary>
        </member>
        <member name="P:Imagin.Common.INotifiable.Interval">
            <summary>
            The period of time (in milliseconds) between notifications.
            </summary>
        </member>
        <member name="T:Imagin.Common.IProportional">
            <summary>
            Specifies an object that has proportions.
            </summary>
        </member>
        <member name="P:Imagin.Common.IProportional.Proportions">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Meridiem">
            <summary>
            Specifies a time before or after midday.
            </summary>
        </member>
        <member name="F:Imagin.Common.Meridiem.Ante">
            <summary>
            Specifies a time BEFORE midday.
            </summary>
        </member>
        <member name="F:Imagin.Common.Meridiem.Post">
            <summary>
            Specifies a time AFTER midday.
            </summary>
        </member>
        <member name="F:Imagin.Common.Meridiem.Unspecified">
            <summary>
            Specifies a time with unspecified meridiem.
            </summary>
        </member>
        <member name="T:Imagin.Common.Mvvm.IMainViewModel">
            <summary>
            Specifies a view model that corresponds to the main module.
            </summary>
        </member>
        <member name="T:Imagin.Common.Mvvm.ViewModel`1">
            <summary>
            Base implementatation for defining view models.
            </summary>
            <typeparam name="T">The type of an object to model.</typeparam>
        </member>
        <member name="P:Imagin.Common.Mvvm.ViewModel`1.Object">
            <summary>
            An object to model.
            </summary>
        </member>
        <member name="M:Imagin.Common.Mvvm.ViewModel`1.#ctor">
            <summary>
            Initializes a new instance of the ViewModel class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Mvvm.ViewModel`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the ViewModel class.
            </summary>
            <param name="_object">The object to model.</param>
        </member>
        <member name="T:Imagin.Common.Mvvm.ViewModel">
            <summary>
            Base implementatation for defining view models.
            </summary>
        </member>
        <member name="M:Imagin.Common.Mvvm.ViewModel.#ctor">
            <summary>
            Initializes a new instance of the ViewModel class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Mvvm.ViewModel.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ViewModel class.
            </summary>
            <param name="Object">The object to model.</param>
        </member>
        <member name="T:Imagin.Common.NamedEntry">
            <summary>
             A named object with a date that periodically notifies.
             </summary>
        </member>
        <member name="F:Imagin.Common.NamedEntry.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.NamedEntry.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NamedEntry.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NamedEntry.#ctor(System.String,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Imagin.Common.NamedEntry.#ctor(System.String,System.DateTime,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="date"></param>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Imagin.Common.NamedEntry.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.NamedObject">
            <summary>
            A named, abstract object.
            </summary>
        </member>
        <member name="F:Imagin.Common.NamedObject.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.NamedObject.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NamedObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NamedObject.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Imagin.Common.NamedObject.OnPreviewNameChanged(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="OldValue"></param>
            <param name="NewValue"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.NamedObject.OnNameChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.NotifiableObject">
            <summary>
            An object capable of raising notifications using <see cref="T:System.Timers.Timer"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.NotifiableObject.DefaultInterval">
            <summary>
            The default interval to use.
            </summary>
        </member>
        <member name="E:Imagin.Common.NotifiableObject.Notified">
            <summary>
            Occurs when <see cref="P:Imagin.Common.NotifiableObject.Timer"/> elapses.
            </summary>
        </member>
        <member name="P:Imagin.Common.NotifiableObject.Timer">
            <summary>
            A timer used for automating notifications.
            </summary>
        </member>
        <member name="P:Imagin.Common.NotifiableObject.Enabled">
            <summary>
            Gets or sets whether or not to enable notifications.
            </summary>
        </member>
        <member name="P:Imagin.Common.NotifiableObject.Interval">
            <summary>
            The period of time (in milliseconds) between notifications.
            </summary>
        </member>
        <member name="M:Imagin.Common.NotifiableObject.OnNotified(System.Timers.ElapsedEventArgs)">
            <summary>
            Occurs when <see cref="P:Imagin.Common.NotifiableObject.Timer"/> elapses.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.NotifiableObject.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.NotifiableObject"/> class and enables (or disables) timer with given interval.
            </summary>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="T:Imagin.Common.Primitives.DateTimePart">
            <summary>
            Specifies a part of a DateTime instance.
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Month">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Day">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Year">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Hour">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Minute">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Second">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Millisecond">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Meridian">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Primitives.Proportions">
            <summary>
            Represents <see cref="T:System.Windows.Size"/> with binding support; variant of <see cref="T:System.Windows.Size"/>.
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Proportions.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Proportions.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Proportions.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Proportions.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.#ctor(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Width"></param>
            <param name="Height"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.op_Implicit(System.Windows.Size)~Imagin.Common.Primitives.Proportions">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.OnChanged(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.Set(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.Set(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Primitives.Position">
            <summary>
            Represents <see cref="T:System.Windows.Point"/> in two-dimensional space with binding support; variant of <see cref="T:System.Windows.Point"/>.
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Position.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Position.x">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Position.y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position.Y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position.Point">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.#ctor(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.op_Implicit(System.Windows.Point)~Imagin.Common.Primitives.Position">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.OnChanged(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.Set(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.Set(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Primitives.Release">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Release.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Release.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Release.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Release.Major">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Release.Minor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Release.Build">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Release.Revision">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Release.Version">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Version"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.#ctor(System.Version)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Major"></param>
            <param name="Minor"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Major"></param>
            <param name="Minor"></param>
            <param name="Build"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
            <param name="build"></param>
            <param name="revision"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.OnChanged(System.Version)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.Set(System.Version)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Implicit(System.Version)~Imagin.Common.Primitives.Release">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Implicit(System.Int32)~Imagin.Common.Primitives.Release">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Inequality(Imagin.Common.Primitives.Release,Imagin.Common.Primitives.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Inequality(Imagin.Common.Primitives.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Inequality(Imagin.Common.Primitives.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Equality(Imagin.Common.Primitives.Release,Imagin.Common.Primitives.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Equality(Imagin.Common.Primitives.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Equality(Imagin.Common.Primitives.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_LessThan(Imagin.Common.Primitives.Release,Imagin.Common.Primitives.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_LessThan(Imagin.Common.Primitives.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_LessThan(Imagin.Common.Primitives.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_LessThanOrEqual(Imagin.Common.Primitives.Release,Imagin.Common.Primitives.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_LessThanOrEqual(Imagin.Common.Primitives.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_LessThanOrEqual(Imagin.Common.Primitives.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_GreaterThan(Imagin.Common.Primitives.Release,Imagin.Common.Primitives.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_GreaterThan(Imagin.Common.Primitives.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_GreaterThan(Imagin.Common.Primitives.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_GreaterThanOrEqual(Imagin.Common.Primitives.Release,Imagin.Common.Primitives.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_GreaterThanOrEqual(Imagin.Common.Primitives.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_GreaterThanOrEqual(Imagin.Common.Primitives.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Addition(Imagin.Common.Primitives.Release,Imagin.Common.Primitives.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Addition(Imagin.Common.Primitives.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Addition(Imagin.Common.Primitives.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Subtraction(Imagin.Common.Primitives.Release,Imagin.Common.Primitives.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Subtraction(Imagin.Common.Primitives.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Release.op_Subtraction(Imagin.Common.Primitives.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Primitives.Selection">
            <summary>
            Represents a rect with binding support.
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Selection.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Selection.PositionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Selection.SizeChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.TopRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.BottomLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Rect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.#ctor">
            <summary>
            Initializes new instance of Selection.
            </summary>
            <param name="X">X-position of selection.</param>
            <param name="Y">Y-position of selection.</param>
            <param name="Width">Width of selection.</param>
            <param name="Height">Height of selection.</param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.#ctor(System.Windows.Point,System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.#ctor(System.Windows.Rect)">
            <summary>
            
            </summary>
            <param name="Rect"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.#ctor(System.Double[])">
            <summary>
            
            </summary>
            <param name="Values"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.op_Implicit(System.Double[])~Imagin.Common.Primitives.Selection">
            <summary>
            
            </summary>
            <param name="Values"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.op_Implicit(System.Windows.Rect)~Imagin.Common.Primitives.Selection">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.OnPositionChanged(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.OnSizeChanged(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.OnChanged(System.Windows.Rect)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set selection from given values.
            </summary>
            <param name="x">X-position of selection.</param>
            <param name="y">Y-position of selection.</param>
            <param name="width">Width of selection.</param>
            <param name="height">Height of selection.</param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Set(System.Windows.Rect)">
            <summary>
            Set selection from given Rect.
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Set(System.Double[])">
            <summary>
            
            </summary>
            <param name="Values"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Set(System.Windows.Point,System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Primitives.Position3D">
            <summary>
            Represents <see cref="T:System.Windows.Point"/> in three-dimensional space with binding support; variant of <see cref="T:System.Windows.Media.Media3D.Point3D"/>.
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Position3D.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Position3D.x">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position3D.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Position3D.y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position3D.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Position3D.z">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position3D.Z">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position3D.Point">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position3D.Point3D">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.#ctor(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.#ctor(System.Windows.Media.Media3D.Point3D)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.op_Implicit(System.Windows.Point)~Imagin.Common.Primitives.Position3D">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.op_Implicit(System.Windows.Media.Media3D.Point3D)~Imagin.Common.Primitives.Position3D">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.OnChanged(System.Windows.Media.Media3D.Point3D)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.Set(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.Set(System.Windows.Media.Media3D.Point3D)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.Set(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:Imagin.Common.Primitives.Int64Kind">
            <summary>
            Provides enumerator for long integers of various representations.
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Int64Kind.Default">
            <summary>
            Specifies a general Int64.
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Int64Kind.FileSize">
            <summary>
            Specifies a file size.
            </summary>
        </member>
        <member name="T:Imagin.Common.Primitives.StringKind">
            <summary>
            Provides enumerator for strings 
            of various representations.
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.StringKind.Default">
            <summary>
            Specifies a regular string.
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.StringKind.FilePath">
            <summary>
            Specifies a file path.
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.StringKind.FolderPath">
            <summary>
            Specifies a folder path.
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.StringKind.Multiline">
            <summary>
            Specifies a multiline string.
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.StringKind.Password">
            <summary>
            Specifies a password string.
            </summary>
        </member>
        <member name="T:Imagin.Common.Serialization.WritableColor">
            <summary>
            Facilitates with serializing standard .NET colors.
            </summary>
        </member>
        <member name="T:Imagin.Common.Serialization.WritableEnum">
            <summary>
            Facilitates with serializing standard .NET enums.
            </summary>
        </member>
        <member name="T:Imagin.Common.Serialization.WritableObject`1">
            <summary>
            Facilitator for serializing otherwise unserializable objects.
            </summary>
        </member>
        <member name="T:Imagin.Common.TaggedObject">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TaggedObject.tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TaggedObject.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TaggedObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TaggedObject.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="tag"></param>
        </member>
        <member name="T:Imagin.Common.Span`2">
            <summary>
            Represents a writable 2-tuple, or pair.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:Imagin.Common.Span`2.First">
            <summary>
            Get or set the first component.
            </summary>
        </member>
        <member name="P:Imagin.Common.Span`2.Second">
            <summary>
            Get or set the second component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Span`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Span class.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
        </member>
        <member name="T:Imagin.Common.Span`3">
            <summary>
            Represents a writable 3-tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="P:Imagin.Common.Span`3.Third">
            <summary>
            Get or set the third component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Span`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the Span class.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
        </member>
        <member name="T:Imagin.Common.Span`4">
            <summary>
            Represents a writable 4-tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
        </member>
        <member name="P:Imagin.Common.Span`4.Fourth">
            <summary>
            Get or set the fourth component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Span`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the Span class.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
            <param name="Fourth"></param>
        </member>
        <member name="T:Imagin.Common.Span`5">
            <summary>
            Represents a writable 5-tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
        </member>
        <member name="P:Imagin.Common.Span`5.Fifth">
            <summary>
            Get or set the fifth component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Span`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the Span class.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
            <param name="Fourth"></param>
            <param name="Fifth"></param>
        </member>
        <member name="T:Imagin.Common.Span`6">
            <summary>
            Represents a writable 6-tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
        </member>
        <member name="P:Imagin.Common.Span`6.Sixth">
            <summary>
            Get or set the sixth component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Span`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the Span class.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
            <param name="Fourth"></param>
            <param name="Fifth"></param>
            <param name="Sixth"></param>
        </member>
        <member name="T:Imagin.Common.Tracing.ILogEntry">
            <summary>
            Specifies a log entry.
            </summary>
        </member>
        <member name="P:Imagin.Common.Tracing.ILogEntry.Date">
            <summary>
            Specifies when the entry was created.
            </summary>
        </member>
        <member name="P:Imagin.Common.Tracing.ILogEntry.Message">
            <summary>
            Specifies a message to convey.
            </summary>
        </member>
        <member name="P:Imagin.Common.Tracing.ILogEntry.Source">
            <summary>
            Specifies the source of the entry.
            </summary>
        </member>
        <member name="P:Imagin.Common.Tracing.ILogEntry.Type">
            <summary>
            Specifies what kind of entry it is.
            </summary>
        </member>
        <member name="T:Imagin.Common.Tracing.Log">
            <summary>
            A facility to access the log owned by the current application; <see cref="P:System.Windows.Application.Current"/> must implement <see cref="T:Imagin.Common.Config.IApp"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Tracing.Log.Write(System.Object,Imagin.Common.Tracing.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Imagin.Common.Tracing.Log.Write(System.Object,System.Object,Imagin.Common.Tracing.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Source"></param>
            <param name="Type"></param>
        </member>
        <member name="T:Imagin.Common.Tracing.LogEntry">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Tracing.LogEntry.DefaultInterval">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Tracing.LogEntry.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Tracing.LogEntry.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Tracing.LogEntry.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Tracing.LogEntry.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Tracing.LogEntry.#ctor(System.String,Imagin.Common.Tracing.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Imagin.Common.Tracing.LogEntry.#ctor(System.String,System.Object,Imagin.Common.Tracing.LogEntryType)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="source"></param>
            <param name="type"></param>
        </member>
        <member name="T:Imagin.Common.Tracing.ILog">
            <summary>
            Specifies a log.
            </summary>
        </member>
        <member name="M:Imagin.Common.Tracing.ILog.Load">
            <summary>
            Load current instance with data from file it is associated with.
            </summary>
            <returns>The result of the task.</returns>
        </member>
        <member name="M:Imagin.Common.Tracing.ILog.Write(System.Object,Imagin.Common.Tracing.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Imagin.Common.Tracing.ILog.Write(System.Object,System.Object,Imagin.Common.Tracing.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Source"></param>
            <param name="Type"></param>
        </member>
        <member name="T:Imagin.Common.Tracing.LogEntryType">
            <summary>
            Specifies a type of <see cref="T:Imagin.Common.Tracing.LogEntry"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.Tracing.LogEntryType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Tracing.LogEntryType.Error">
            <summary>
            Specifies an error message.
            </summary>
        </member>
        <member name="F:Imagin.Common.Tracing.LogEntryType.Message">
            <summary>
            Specifies a general message.
            </summary>
        </member>
        <member name="F:Imagin.Common.Tracing.LogEntryType.Success">
            <summary>
            Specifies a success message.
            </summary>
        </member>
        <member name="F:Imagin.Common.Tracing.LogEntryType.Warning">
            <summary>
            Specifies a warning message.
            </summary>
        </member>
        <member name="F:Imagin.Common.Tracing.LogEntryType.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.RowColumn">
            <summary>
            A data type to represent a row and column pair.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.Task">
            <summary>
            Gets the task being watched. This property never changes and is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.Result">
            <summary>
            Gets the result of the task. Returns the default value of TResult if the task has not completed successfully.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.IsCompleted">
            <summary>
            Gets whether the task has completed.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.IsSuccessfullyCompleted">
            <summary>
            Gets whether the task has completed successfully.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.IsCanceled">
            <summary>
            Gets whether the task has been canceled.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.IsFaulted">
            <summary>
            Gets whether the task has faulted.
            </summary>
        </member>
        <member name="T:Imagin.Common.AbstractContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.AbstractContainer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.AbstractContainer.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:Imagin.Common.AbstractContainer`1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AbstractContainer`1.items">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AbstractContainer`1.Items">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.AbstractContainer`1.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.AbstractContainer`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.AbstractContainer`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:Imagin.Common.Web.Fetch">
            <summary>
            Fetches web pages.
            </summary>
        </member>
        <member name="P:Imagin.Common.Web.Fetch.Headers">
            <summary>
            Gets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:Imagin.Common.Web.Fetch.Response">
            <summary>
            Gets the response.
            </summary>
        </member>
        <member name="P:Imagin.Common.Web.Fetch.ResponseData">
            <summary>
            Gets the response data.
            </summary>
        </member>
        <member name="P:Imagin.Common.Web.Fetch.Retries">
            <summary>
            Gets or sets the retries.
            </summary>
            <value>The retries.</value>
        </member>
        <member name="P:Imagin.Common.Web.Fetch.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:Imagin.Common.Web.Fetch.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:Imagin.Common.Web.Fetch"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Imagin.Common.Web.Fetch.Load(System.String)">
            <summary>
            Gets the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Web.Fetch.Get(System.String)">
            <summary>
            Gets the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Web.Fetch.GetString">
            <summary>
            Gets the string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Web.FetchStream">
            <summary>
            Fetches streamed content.
            </summary>
        </member>
        <member name="P:Imagin.Common.Web.FetchStream.Response">
            <summary>
            Gets the response.
            </summary>
        </member>
        <member name="P:Imagin.Common.Web.FetchStream.ResponseData">
            <summary>
            Gets the response data.
            </summary>
        </member>
        <member name="M:Imagin.Common.Web.FetchStream.Load(System.String)">
            <summary>
            Gets the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Web.FetchStream.Get(System.String)">
            <summary>
            Gets the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Web.FetchStream.GetString">
            <summary>
            Gets the string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Controls.Extended.ColorSpace">
            <summary>
            Specifies a color space.
            </summary>
        </member>
    </members>
</doc>
