<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Imagin.Common.Wpf</name>
    </assembly>
    <members>
        <member name="T:Imagin.Common.Collections.DataTemplateCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.DataTemplateCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1">
            <summary>
            Provides a collection that can be modified safely on other threads. The notify event is thrown using the dispatcher from the event listener(s).
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemAdded">
            <summary>
            Occurs when a single item is added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemsAdded">
            <summary>
            Occurs when any number of items are added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemsChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemsCleared">
            <summary>
            Occurs when the collection is cleared.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemInserted">
            <summary>
            Occurs when a single item is inserted.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemRemoved">
            <summary>
            Occurs when a single item is removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemsRemoved">
            <summary>
            Occurs when any number of items are removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.PreviewItemsCleared">
            <summary>
            Occurs just before the collection is cleared.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.PropertyChanged">
            <summary>
            Occurs when a property changes.
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(`0[])">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Imagin#Common#Collections#Generic#ITrackableCollection{T}#Remove(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.RemoveAt(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Indices"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.BeginClear">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemAdded(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemsAdded(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemInserted(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <param name="Index"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemRemoved(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemsRemoved(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="OldItems"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnPreviewItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1">
            <summary>
            This class provides the base for concurrent collections that 
            can be bound to user interface elements
            </summary>
            <notes>
            Could do with a more performant enumerable implementation
            but this is what I have so far. I create a snapshot of the collection
            and use the enumerable from that. When the collection is updated
            I set a flag indicating that a new snapshot is required.
            </notes>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.IsDispatcherThread">
            <summary>
            Gets if the calling thread is the same as the dispatcher thread
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.CollectionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.ReadWriteLock">
            <summary>
            The lock that controls read/write access to the base collection
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.BaseCollection">
            <summary>
            The underlying base enumerable that is used to store the items,
            used for creating an immutable collection from which an enumerator
            can be obtained.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.NewSnapshotRequired">
            <summary>
            Flag indicating that a write has occured, so anything that depends on
            taking a snapshot of the collection needs to be updated.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.SnapshotLock">
            <summary>
            The enumerable lock to prevent threading conflicts on allocating
            the enumerable of the fixed collection
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.BaseSnapshot">
            <summary>
            The collection used for generating an enumerable that iterates
            over a snapshot of the base collection
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Subscribers">
            <summary>
            A list of observers
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.SubscriberKey">
            <summary>
            The key for new observers, incremented with each new observer
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.IsDisposed">
            <summary>
            Flag indicating this collection is disposed
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Snapshot">
            <summary>
            Gets an immutable snapshot of the collection
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.ReadCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.viewModel">
            <summary>
            The view model that is used to allow this collection to be bound to the UI.
            Relevant methods determine if they are being called on the UI thread, and if
            so then the view model is used.
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.ViewModel">
            <summary>
            Access this directly if getting the error "An ItemsControl is inconsistent with its items source".
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.WriteCollection">
            <summary>
            Gets the base collection that holds the values
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor that takes an eumerable
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Disposing"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.OnNext(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.OnError(System.Exception)">
            <summary>
            
            </summary>
            <param name="Exception"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.OnCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Subscribe(System.IObserver{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            
            </summary>
            <param name="Observer"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DisposeDelegate">
            <summary>
            Result returned from <see cref="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Subscribe(System.IObserver{System.Collections.Specialized.NotifyCollectionChangedEventArgs})"/> method.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.GetEnumerator">
            <summary>
            Gets the enumerator for a snapshot of the collection
            </summary>
            <remarks>
            Note that the Enumerator should really only be used on the Dispatcher thread,
            if not then should enumerate over the Snapshot instead.
            
            </remarks>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for a snapshot of the collection
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.UpdateSnapshot">
            <summary>
            Updates the snapshot that is used to generate an Enumerator
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseClear(System.Action)">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <remarks>
            Don't use BaseCollection.Clear(), it causes problems because it
            sends a reset event, and then the collection needs to be read out through
            an enumerator. Use RemoveAt instead until the collection is empty.
            Using remove from end after testing with this speed test:
            </remarks>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.HandleBaseCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles when the base collection changes. Pipes the event through IObservable.OnNext
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            As this is a concurrent collection we don't want a change event to result in the listener
            later coming back to enumerate over the whole collection again, possible before the listener
            gets other changed events, but after the collection has been added to.
            </remarks>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseRead(System.Action)">
            <summary>
            Handles read access from the base collection
            </summary>
            <param name="readFunc"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseRead``1(System.Func{``0})">
            <summary>
            Handles read access from the base collection when a return value is required
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ReadAction"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseReadWrite``1(System.Func{System.Boolean},System.Func{``0},System.Func{``0})">
            <summary>
            Calls the read function passed in, and if it returns true,
            then calls the next read function, else calls the write
            function.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseReadWrite``1(System.Func{System.Boolean},System.Func{``0},System.Action,System.Func{``0})">
            <summary>
            Calls the read function passed in, and if it returns true,
            then calls the next read function, else unlocks the collection,
            calls the pre-write function, then chains to DoBaseReadWrite
            calls the write
            function.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseWrite(System.Action)">
            <summary>
            Handles write access to the base collection
            </summary>
            <param name="WriteAction"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseWrite``1(System.Func{``0})">
            <summary>
            Handles write access to the base collection when a return value is required
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="WriteFunc"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1">
            <summary>
            The view model for <see cref="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1"/>; this is exposed by <see cref="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1"/> when it is used on the dispatcher thread.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.UnsubscribeToken">
            <summary>
            Token that comes back when subscribing to the <see cref="T:System.IObserver`1"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.SubscriptionActionToken">
            <summary>
            Token for removing the subscription action from the queue
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.ProcessCommand(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Processes a NotifyCollectionChangedEventArgs event argument
            </summary>
            <param name="Command"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.Dispose(System.Boolean)">
            <summary>
            Disposes of this object, and supresses the finalizer
            </summary>
            <param name="IsDisposing"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.#ctor(System.IObservable{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Constructor. Queues subscribing to the IObservable passed in.
            </summary>
            <param name="Observable"></param>
            <remarks>
            We create a subscribe action, which has a reference to this object.
            If the DispatcherQueueProcessor isn't started (because the Dispatcher hasn't been
            created), then the subscriber action will sit in the queue forever, hence will
            never be garbage collection, hence this view model will never be garbage
            collected. To get around this the dispatcher subscription queue stores a weak
            reference. As such the Subscribe Action needs to be referenced in this class
            otherwise it will be garbage collected once we leave the scope of this constructor.
            the return token holds a reference to the Subscribe Action
            </remarks>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.Finalize">
            <summary>
            Finalizer, disposes of the object
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.Dispose">
            <summary>
            Disposes of the current object
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.OnCompleted">
            <summary>
             IObserver implementation
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.OnError(System.Exception)">
            <summary>
             IObserver implementation
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.OnNext(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
             IObserver implementation
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor">
            <summary>
            Executes a stream on actions on the dispatcher thread.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor._instance">
            <summary>
            This class is a singleton class. Below is the instance.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.ActionQueue">
            <summary>
            A queue of actions to be called on the dispatcher thread
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.SubscriberQueue">
            <summary>
            A list of pending subscribers, processed once the Dispather is created.
            Using a ConcurrentDictionary because this is the only framework collection
            that has a remove method.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.Dispatcher">
            <summary>
            The Application Dispatcher
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.ActionWaiting">
            <summary>
            The current action that is awaiting processing on the Dispatcher thread
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.ActionWaitingSemaphore">
            <summary>
            Semaphore used to prevent a race condition on ActionWaiting 
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.Instance">
            <summary>
            Gets the instance of the singleton class
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.IsDispatcherThread">
            <summary>
            Tests if the calling thread is the same as the dispatcher thread
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.#ctor">
            <summary>
            Private constructor for this singleton class. Use the Instance property to
            get an instance of this class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.CheckIfDispatcherCreated">
            <summary>
            Checks if the dispatcher has been created yet
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.StartQueueProcessing">
            <summary>
            Starts the thread that processes the queue of actions that are to be
            executed on the dispatcher thread.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.Add(System.Action)">
             <summary>
             Adds an action to the processing queue
             </summary>
             <remarks>
             If we are running on the dispatcher thread, we could call the
             action directly, but then we've got the problem with queue
             jumping. It's desirable to immediately update the view model,
             as if we don't the code that added the item won't see it
             if an iteration is done over the collection, which would confuse
             the person using this collection.
            
             So, we need to add it to the queue and then process the queue
             so the view is consistent with the Add action.
             </remarks>
             <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.QueueSubscribe(System.Action)">
            <summary>
            Adds a subscribe action to the subscriber queue
            </summary>
            <remarks>
            Subscriber queue is set to null after the 
            Dispatcher has been created. So subscriptions 
            can be handled directly once the dispatcher 
            queue is being processed.
            </remarks>
            <param name="SubscribeAction"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.DisposeDelegate">
            <summary>
            Result returned by "QueueSubscribe" method.
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.FrameworkElementCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.FrameworkElementCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Markup.EnumerateBinding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Markup.EnumerateBinding.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Imagin.Common.Markup.PackageExtension">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Markup.PackageExtension.Assembly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Markup.PackageExtension.RelativePath">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Markup.PackageExtension.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Assembly"></param>
            <param name="RelativePath"></param>
        </member>
        <member name="M:Imagin.Common.Markup.PackageExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Markup.EnumerateExtension">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Markup.EnumerateExtension.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Markup.EnumerateExtension.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Imagin.Common.Markup.EnumerateExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.ColorExtensions">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.ToMedia(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.DistanceFrom(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Gets distance to a color from given color.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.ToDrawing(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.ToHex(System.Windows.Media.Color)">
            <summary>
            Converts color to hex string without alpha component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.ToHexWithAlpha(System.Windows.Media.Color)">
            <summary>
            Converts color to hex string with alpha component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.WithAlpha(System.Windows.Media.Color,System.Byte)">
            <summary>
            Creates new color with specified alpha component from specified color.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.ActionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.DispatcherExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            
            </summary>
            <param name="Dispatcher"></param>
            <param name="Action"></param>
            <param name="Priority"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            
            </summary>
            <param name="Dispatcher"></param>
            <param name="Action"></param>
            <param name="Priority"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.AssemblyExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.AssemblyExtensions.GetVersionInfo(System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="Assembly"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.BrushExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.BrushExtensions.Duplicate(System.Windows.Media.Brush)">
            <summary>
            Creates Brush from specified Brush and it's values.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.EncodingExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.EncodingExtensions.GetEncoding(Imagin.Common.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="ToConvert"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.FrameworkElementExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.ContainsMouse(System.Windows.FrameworkElement)">
            <summary>
            Helper method to determine if the given framework element has the mouse over it or not.
            </summary>
            <param name="element">The FrameworkElement to test for mouse containment.</param>
            <returns>True, if the mouse is over the FrameworkElement; false, otherwise.</returns>
        </member>
        <member name="T:Imagin.Common.Linq.UriExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.UriExtensions.GetResourceStream(System.Uri)">
            <summary>
            Returns a Uri that represents a resource.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.BooleanExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.BooleanExtensions.ToVisibility(System.Boolean,System.Windows.Visibility)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="FalseVisibility"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.ModifierKeysExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ModifierKeysExtensions.IsPressed(System.Windows.Input.ModifierKeys)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.PointExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Add(System.Windows.Point,System.Double)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Add(System.Windows.Point,System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Divide(System.Windows.Point,System.Double)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Divide(System.Windows.Point,System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Multiply(System.Windows.Point,System.Double)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Multiply(System.Windows.Point,System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Subtract(System.Windows.Point,System.Double)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.RectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.RectExtensions.BoundSize(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Bound rect to given size.
            </summary>
            <param name="Rect">The rect to bind.</param>
            <param name="Bounds">The size of the binding.</param>
            <returns>A rect bound to given size.</returns>
        </member>
        <member name="M:Imagin.Common.Linq.RectExtensions.BoundPoint(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Bound rect based on given sizes.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.SolidColorBrushExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.SolidColorBrushExtensions.ToHex(System.Windows.Media.SolidColorBrush)">
            <summary>
            
            </summary>
            <param name="Brush"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.SolidColorBrushExtensions.ToHexWithAlpha(System.Windows.Media.SolidColorBrush)">
            <summary>
            
            </summary>
            <param name="Brush"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.DependencyObjectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.String,System.Windows.Data.BindingMode,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Property"></param>
            <param name="Source"></param>
            <param name="Path"></param>
            <param name="Mode"></param>
            <param name="UpdateSourceTrigger"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.Windows.PropertyPath,System.Windows.Data.BindingMode,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Property"></param>
            <param name="Source"></param>
            <param name="Path"></param>
            <param name="Mode"></param>
            <param name="UpdateSourceTrigger"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.String,System.Windows.Data.IValueConverter,System.Object,System.Windows.Data.BindingMode,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Property"></param>
            <param name="Source"></param>
            <param name="Path"></param>
            <param name="Converter"></param>
            <param name="ConverterParameter"></param>
            <param name="Mode"></param>
            <param name="UpdateSourceTrigger"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.Windows.PropertyPath,System.Windows.Data.IValueConverter,System.Object,System.Windows.Data.BindingMode,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Property"></param>
            <param name="Source"></param>
            <param name="Path"></param>
            <param name="Converter"></param>
            <param name="ConverterParameter"></param>
            <param name="Mode"></param>
            <param name="UpdateSourceTrigger"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.String,System.Windows.Data.RelativeSourceMode,System.Windows.Data.BindingMode,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Property"></param>
            <param name="Path"></param>
            <param name="RelativeSourceMode"></param>
            <param name="Mode"></param>
            <param name="UpdateSourceTrigger"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.CollapseAll(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Object"></param>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.ExpandAll(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Object"></param>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.FindChild``1(System.Windows.DependencyObject,System.String,System.Int32,System.Int32@)">
            <summary>
            Finds a Child of a given item in the visual tree. 
            </summary>
            <param name="parent">A direct parent of the queried item.</param>
            <typeparam name="T">The type of the queried item.</typeparam>
            <param name="childName">x:Name or Name of child. </param>
            <param name="findIndex">the index of the item to be found.  0 to find the first name/type match, 1 to find the second match, etc </param>
            <param name="foundCount">recursion counter to keep track of the number of name/type matches found so far. </param>
            <returns>The first parent item that matches the submitted type parameter. 
            If not matching item can be found, a null parent is being returned.</returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.FindChild``1(System.Windows.DependencyObject,System.String,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent"></param>
            <param name="childName"></param>
            <param name="findIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetChildOfType``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetParent(System.Windows.DependencyObject)">
            <summary>
            Attempts to find parent for specified object in following order: 
            VisualParent -> LogicalParent -> LogicalTemplatedParent.
            </summary>
            <remarks>
            Visual, FrameworkElement, and FrameworkContentElement types are supported. If the logical parent is not found, we try TemplatedParent.
            </remarks>
            <param name="Child">The object to get the parent for.</param>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetParent``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetLogicalParent(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetLogicalParent``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetLogicalChildren``1(System.Windows.DependencyObject)">
            <summary>
            Gets all logical children for the given <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Parent"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetVisualChildren``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Parent"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetVisualParent(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetVisualParent``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.IsDescendantOf(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Returns true if the specified element is a child of parent somewhere in the visual 
            tree. This method will work for Visual, FrameworkElement and FrameworkContentElement.
            </summary>
            <param name="Object">The element that is potentially a child of the specified parent.</param>
            <param name="Parent">The element that is potentially a parent of the specified element.</param>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.ToggleAll(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets IsExpanded property to specified value on all TreeViewItems found.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.IntPtrExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.IntPtrExtensions.DeleteObject(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="Ptr"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.SpecialFolderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.SpecialFolderExtensions.GetPath(System.Environment.SpecialFolder)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.StringExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetFtpDirectoryName(System.String)">
            <summary>
            Gets the directory name of a path formatted for a FTP server.
            </summary>
            <param name="Path">The path</param>
            <returns>The parent directory path</returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetFtpFileName(System.String)">
            <summary>
            Gets the file name from the path.
            </summary>
            <param name="Path">The full path to the file</param>
            <returns>The file name</returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetFtpPath(System.String)">
            <summary>
            Converts the specified path into a valid FTP file system path.
            </summary>
            <param name="Path">The file system path</param>
            <returns>A path formatted for FTP</returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.Append(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Append"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.Capitalize(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.DirectoryExists(System.String)">
            <summary>
            Invokes <see cref="M:System.IO.Directory.Exists(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.FileExists(System.String)">
            <summary>
            Invokes <see cref="M:System.IO.File.Exists(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetDirectoryName(System.String,System.String)">
            <summary>
            Invokes <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <param name="Scheme"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetExtension(System.String,System.Boolean)">
            <summary>
            Invokes <see cref="M:System.IO.Path.GetExtension(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <param name="WithoutPeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetFileName(System.String,System.Boolean,System.String)">
            <summary>
            Invokes <see cref="M:System.IO.Path.GetFileName(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <param name="WithoutExtension"></param>
            <param name="Scheme"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetFileType(System.String,System.Func{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <param name="GetTypeDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.FindType(System.String)">
            <summary>
            
            </summary>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.IsValidUrl(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Schemes"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.Prepend(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Prepend"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.TryRun(System.String,System.String)">
            <summary>
            Attempt to run program at path.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToSecureString(System.String)">
            <summary>
            
            </summary>
            <param name="ToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToSolidColorBrush(System.String)">
            <summary>
            Converts alphanumeric hexadecimal to SolidColorBrush.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.TimeSpanExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TimeSpanExtensions.ToDuration(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TimeSpanExtensions.ToShortTime(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.UIElementExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.UIElementExtensions.AnimateAsync(System.Windows.UIElement,System.Windows.Media.Animation.Storyboard)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <param name="storyboard"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.UIElementExtensions.FadeInAsync(System.Windows.UIElement,System.Windows.Duration)">
            <summary>
            
            </summary>
            <param name="Element"></param>
            <param name="Duration"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.UIElementExtensions.FadeOutAsync(System.Windows.UIElement,System.Windows.Duration,System.EventHandler)">
            <summary>
            
            </summary>
            <param name="Element"></param>
            <param name="Duration"></param>
            <param name="Callback"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.VisibilityExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.VisibilityExtensions.Invert(System.Windows.Visibility)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.VisibilityExtensions.ToBoolean(System.Windows.Visibility)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.KeyboardExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.IsAnyKeyDown(System.Windows.Input.Key[])">
            <summary>
            
            </summary>
            <param name="Keys"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.IsKeyModifyingPopupState(System.Windows.Input.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.ToUnicode(System.UInt32,System.UInt32,System.Byte[],System.Text.StringBuilder,System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="wVirtKey"></param>
            <param name="wScanCode"></param>
            <param name="lpKeyState"></param>
            <param name="pwszBuff"></param>
            <param name="cchBuff"></param>
            <param name="wFlags"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.GetKeyboardState(System.Byte[])">
            <summary>
            
            </summary>
            <param name="lpKeyState"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.MapVirtualKey(System.UInt32,Imagin.Common.Input.MapType)">
            <summary>
            
            </summary>
            <param name="uCode"></param>
            <param name="uMapType"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.ToChar(System.Windows.Input.Key)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.BooleanToYesNoConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.BooleanToYesNoConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.BooleanToYesNoConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.SolidColorBrushToColorConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.SolidColorBrushToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.SolidColorBrushToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.DisplayNameAttributeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.DisplayNameAttributeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.DisplayNameAttributeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.InverseThicknessConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.InverseThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.InverseThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ArrayToStringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ArrayToStringConverter.GetSeparator(System.Object)">
            <summary>
            
            </summary>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ArrayToStringConverter.ToString(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ArrayToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ArrayToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.Int32ArrayToStringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.Int32ArrayToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.CharacterToStringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.CharacterToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.CharacterToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.EnumHasFlagConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.EnumHasFlagConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.EnumHasFlagConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ToStringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.IntToBooleanConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.IntToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.IntToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.LowerCaseConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.LowerCaseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.LowerCaseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.FileSizeMultiValueConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.FileSizeMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.FileSizeMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.StringToBooleanConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.StringToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.StringToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ValueEqualsParameterToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ValueEqualsParameterToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ValueEqualsParameterToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.EnumFlagsToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.EnumFlagsToVisibilityConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.EnumFlagsToVisibilityConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.DateTimeStringFormatConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.DateTimeStringFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.DateTimeStringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.NullConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.NullConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.NullConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <remarks>
            According to https://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter.convertback(v=vs.110).aspx#Anchor_1,
            
            If you do not support a conversion back, 
            you should return Binding.DoNothing or
            DependencyProperty.UnsetValue.
            </remarks>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ValueEqualsParameterConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ValueEqualsParameterConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ValueEqualsParameterConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.BooleanToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ByteToDoubleConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ByteToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ByteToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ParentFolderConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ParentFolderConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ParentFolderConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.FileExtensionConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.FileExtensionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.FileExtensionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ObjectIsConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ObjectIsConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ObjectIsConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.GraphicalUnitConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.GraphicalUnitConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.GraphicalUnitConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.OrientationToBooleanConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.OrientationToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.OrientationToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.OrientationToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.OrientationToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.OrientationToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.BrushToColorConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.BrushToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.BrushToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.SolidColorBrushToHexConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.SolidColorBrushToHexConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.SolidColorBrushToHexConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ColorToSolidColorBrushConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ColorToSolidColorBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ColorToSolidColorBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ColorToHexConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ColorToHexConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ColorToHexConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.DateTimeIsTodayConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.DateTimeIsTodayConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.DateTimeIsTodayConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.DateTimeToDayConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.DateTimeToDayConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.DateTimeToDayConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.EnumToCamelCaseConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.EnumToCamelCaseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.EnumToCamelCaseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.FileNameConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.FileNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.FileNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.FileSizeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.FileSizeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.FileSizeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.FileSpeedConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.FileSpeedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.FileSpeedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.IntToMonthConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.IntToMonthConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.IntToMonthConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.InverseBooleanConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.InverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.InverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.NullToBooleanConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.NullToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.NullToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.NullToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Data.Converters.NullToVisibilityConverter.Parameter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.Converters.NullToVisibilityConverter.Parameter.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.Converters.NullToVisibilityConverter.Parameter.Inverted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.StringToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.StringToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.ObjectToTypeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ObjectToTypeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.ObjectToTypeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.RelativeTimeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.RelativeTimeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.RelativeTimeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.SecondsConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.SecondsConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.SecondsConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.StartsWithToVisibilityMultiValueConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.StartsWithToVisibilityMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.StartsWithToVisibilityMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.StringToCamelCaseConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.StringToCamelCaseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.StringToCamelCaseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.SubstringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.SubstringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.SubstringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.TreeViewLineConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.TreeViewLineConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.TreeViewLineConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.Converters.UpperCaseConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Converters.UpperCaseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Converters.UpperCaseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.AbbreviationAttributeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.AbbreviationAttributeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.AbbreviationAttributeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.DescriptionAttributeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.DescriptionAttributeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.DescriptionAttributeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.LocalizationConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.LocalizationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.LocalizationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.LocalizationMultiValueConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.LocalizationMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.LocalizationMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.ResultToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.ResultToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.ResultToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.EnumToCollectionConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.EnumToCollectionConverter.Convert(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.EnumToCollectionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.EnumToCollectionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.BindingProxy">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Data.BindingProxy.DataChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.BindingProxy.DataProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Data.BindingProxy.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.BindingProxy.OnDataChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.Data.BindingProxy.CreateInstanceCore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.BindingProxy.OnDataChanged(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.LoadingDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.LoadingDialog.ShowAsync(System.String,System.String,System.Uri,Imagin.Common.DialogAction,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="image"></param>
            <param name="action"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Globalization.Localizer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Globalization.Localizer.AssemblyName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Globalization.Localizer.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="AssemblyName"></param>
        </member>
        <member name="M:Imagin.Common.Globalization.Localizer.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Globalization.Localizer.GetValue``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Globalization.Localizer.GetValue``1(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Key"></param>
            <param name="Source"></param>
            <param name="Dictionary"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Input.DelegateCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="excuteMethod"></param>
            <param name="canExecuteMethod"></param>
        </member>
        <member name="M:Imagin.Common.Input.DelegateCommand.#ctor(System.Func{System.Object,System.Threading.Tasks.Task},System.Func{System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="excuteMethod"></param>
            <param name="canExecuteMethod"></param>
        </member>
        <member name="M:Imagin.Common.Input.DelegateCommand.RaiseCanExecuteChanger">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Input.DelegateCommand.CanExecuteChanged">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.INotifyPropertyEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Input.INotifyPropertyEnabled.PropertyEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.INotifyPropertyEnabled.OnPropertyEnabled(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="PropertyName"></param>
            <param name="IsEnabled"></param>
        </member>
        <member name="T:Imagin.Common.Input.IExecuteWithObject">
            <summary>
            This interface is meant for the <see cref="T:Imagin.Common.Input.WeakAction`1" /> class and can be 
            useful if you store multiple WeakAction{T} instances but don't know in advance
            what type T represents.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.IExecuteWithObject.ExecuteWithObject(System.Object)">
            <summary>
            Executes an action.
            </summary>
            <param name="parameter">A parameter passed as an object,
            to be casted to the appropriate type.</param>
        </member>
        <member name="T:Imagin.Common.Input.IExecuteWithObjectAndResult">
            <summary>
            This interface is meant for the <see cref="T:Imagin.Common.Input.WeakFunc`1" /> class and can be 
            useful if you store multiple WeakFunc{T} instances but don't know in advance
            what type T represents.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.IExecuteWithObjectAndResult.ExecuteWithObject(System.Object)">
            <summary>
            Executes a Func and returns the result.
            </summary>
            <param name="parameter">A parameter passed as an object,
            to be casted to the appropriate type.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Imagin.Common.Input.PropertyEnabledEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.PropertyEnabledEventArgs.PropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.PropertyEnabledEventArgs.IsEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.PropertyEnabledEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="PropertyName"></param>
            <param name="IsEnabled"></param>
        </member>
        <member name="T:Imagin.Common.Input.PropertyEnabledEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.Input.RelayCommand">
            <summary>
            A command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'.  This class does not allow you to accept command parameters in the
            Execute and CanExecute callback methods.
            </summary>
            <remarks>If you are using this class in WPF4.5 or above, you need to use the 
            GalaSoft.MvvmLight.CommandWpf namespace (instead of GalaSoft.MvvmLight.Command).
            This will enable (or restore) the CommandManager class which handles
            automatic enabling/disabling of controls based on the CanExecute delegate.</remarks>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the RelayCommand class that 
            can always execute.
            </summary>
            <param name="execute">The execution logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.#ctor(System.Action,System.Boolean)">
            <summary>
            
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="E:Imagin.Common.Input.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:Imagin.Common.Input.RelayCommand.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked. 
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
        </member>
        <member name="T:Imagin.Common.Input.RelayCommand`1">
            <summary>
            A generic command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'. This class allows you to accept command parameters in the
            Execute and CanExecute callback methods.
            </summary>
            <typeparam name="T">The type of the command parameter.</typeparam>
            <remarks>If you are using this class in WPF4.5 or above, you need to use the 
            GalaSoft.MvvmLight.CommandWpf namespace (instead of GalaSoft.MvvmLight.Command).
            This will enable (or restore) the CommandManager class which handles
            automatic enabling/disabling of controls based on the CanExecute delegate.</remarks>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the RelayCommand class that 
            can always execute.
            </summary>
            <param name="execute">The execution logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.#ctor(System.Action{`0},System.Boolean)">
            <summary>
            
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="E:Imagin.Common.Input.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:Imagin.Common.Input.RelayCommand`1.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data 
            to be passed, this object can be set to a null reference</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked. 
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data 
            to be passed, this object can be set to a null reference</param>
        </member>
        <member name="T:Imagin.Common.Input.WeakAction">
            <summary>
            Stores an <see cref="T:System.Action" /> without causing a hard reference to be created to the Action's owner. The owner can be garbage collected at any time.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.Method">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.MethodInfo" /> corresponding to this WeakAction's
            method passed in the constructor.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.MethodName">
            <summary>
            Gets the name of the method that this WeakAction represents.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.ActionReference">
            <summary>
            Gets or sets a WeakReference to this WeakAction's action's target.
            This is not necessarily the same as
            <see cref="P:Imagin.Common.Input.WeakAction.Reference" />, for example if the
            method is anonymous.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.Reference">
            <summary>
            Gets or sets a WeakReference to the target passed when constructing
            the WeakAction. This is not necessarily the same as
            <see cref="P:Imagin.Common.Input.WeakAction.ActionReference" />, for example if the
            method is anonymous.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.IsStatic">
            <summary>
            Gets a value indicating whether the WeakAction is static or not.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction.#ctor">
            <summary>
            Initializes an empty instance of the <see cref="T:Imagin.Common.Input.WeakAction" /> class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Input.WeakAction" /> class.
            </summary>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction.#ctor(System.Object,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Input.WeakAction" /> class.
            </summary>
            <param name="target">The action's owner.</param>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.IsAlive">
            <summary>
            Gets a value indicating whether the Action's owner is still alive, or if it was collected
            by the Garbage Collector already.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.Target">
            <summary>
            Gets the Action's owner. This object is stored as a 
            <see cref="T:System.WeakReference" />.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.ActionTarget">
            <summary>
            The target of the weak reference.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction.Execute">
            <summary>
            Executes the action. This only happens if the action's owner
            is still alive.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction.MarkForDeletion">
            <summary>
            Sets the reference that this instance stores to null.
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.WeakAction`1">
            <summary>
            Stores an Action without causing a hard reference
            to be created to the Action's owner. The owner can be garbage collected at any time.
            </summary>
            <typeparam name="T">The type of the Action's parameter.</typeparam>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction`1.MethodName">
            <summary>
            Gets the name of the method that this WeakAction represents.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction`1.IsAlive">
            <summary>
            Gets a value indicating whether the Action's owner is still alive, or if it was collected
            by the Garbage Collector already.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the WeakAction class.
            </summary>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.#ctor(System.Object,System.Action{`0})">
            <summary>
            Initializes a new instance of the WeakAction class.
            </summary>
            <param name="target">The action's owner.</param>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.Execute">
            <summary>
            Executes the action. This only happens if the action's owner
            is still alive. The action's parameter is set to default(T).
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.Execute(`0)">
            <summary>
            Executes the action. This only happens if the action's owner is still alive.
            </summary>
            <param name="parameter">A parameter to be passed to the action.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.ExecuteWithObject(System.Object)">
            <summary>
            Executes the action with a parameter of type object. This parameter
            will be casted to T. This method implements <see cref="M:Imagin.Common.Input.IExecuteWithObject.ExecuteWithObject(System.Object)" />
            and can be useful if you store multiple WeakAction{T} instances but don't know in advance
            what type T represents.
            </summary>
            <param name="parameter">The parameter that will be passed to the action after
            being casted to T.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.MarkForDeletion">
            <summary>
            Sets all the actions that this WeakAction contains to null,
            which is a signal for containing objects that this WeakAction
            should be deleted.
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.WeakEventHandlerManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakEventHandlerManager.AddWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference}@,System.EventHandler,System.Int32)">
            <summary>
            
            </summary>
            <param name="handlers"></param>
            <param name="handler"></param>
            <param name="defaultListSize"></param>
        </member>
        <member name="M:Imagin.Common.Input.WeakEventHandlerManager.CallWeakReferenecHandlers(System.Object,System.Collections.Generic.List{System.WeakReference})">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="handlers"></param>
        </member>
        <member name="M:Imagin.Common.Input.WeakEventHandlerManager.RemoveWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference},System.EventHandler)">
            <summary>
            
            </summary>
            <param name="handlers"></param>
            <param name="handler"></param>
        </member>
        <member name="T:Imagin.Common.Input.WeakFunc`1">
            <summary>
            Stores a Func&lt;T&gt; without causing a hard reference
            to be created to the Func's owner. The owner can be garbage collected at any time.
            </summary>
            <typeparam name="TResult">The type of the result of the Func that will be stored
            by this weak reference.</typeparam>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.Method">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.MethodInfo" /> corresponding to this WeakFunc's
            method passed in the constructor.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.IsStatic">
            <summary>
            Get a value indicating whether the WeakFunc is static or not.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.MethodName">
            <summary>
            Gets the name of the method that this WeakFunc represents.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.FuncReference">
            <summary>
            Gets or sets a WeakReference to this WeakFunc's action's target.
            This is not necessarily the same as
            <see cref="P:Imagin.Common.Input.WeakFunc`1.Reference" />, for example if the
            method is anonymous.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.Reference">
            <summary>
            Gets or sets a WeakReference to the target passed when constructing
            the WeakFunc. This is not necessarily the same as
            <see cref="P:Imagin.Common.Input.WeakFunc`1.FuncReference" />, for example if the
            method is anonymous.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`1.#ctor">
            <summary>
            Initializes an empty instance of the WeakFunc class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the WeakFunc class.
            </summary>
            <param name="func">The Func that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`1.#ctor(System.Object,System.Func{`0})">
            <summary>
            Initializes a new instance of the WeakFunc class.
            </summary>
            <param name="target">The Func's owner.</param>
            <param name="func">The Func that will be associated to this instance.</param>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.IsAlive">
            <summary>
            Gets a value indicating whether the Func's owner is still alive, or if it was collected
            by the Garbage Collector already.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.Target">
            <summary>
            Gets the Func's owner. This object is stored as a 
            <see cref="T:System.WeakReference" />.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.FuncTarget">
            <summary>
            Gets the owner of the Func that was passed as parameter.
            This is not necessarily the same as
            <see cref="P:Imagin.Common.Input.WeakFunc`1.Target" />, for example if the
            method is anonymous.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`1.Execute">
            <summary>
            Executes the action. This only happens if the Func's owner
            is still alive.
            </summary>
            <returns>The result of the Func stored as reference.</returns>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`1.MarkForDeletion">
            <summary>
            Sets the reference that this instance stores to null.
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.WeakFunc`2">
            <summary>
            Stores an Func without causing a hard reference
            to be created to the Func's owner. The owner can be garbage collected at any time.
            </summary>
            <typeparam name="T">The type of the Func's parameter.</typeparam>
            <typeparam name="TResult">The type of the Func's return value.</typeparam>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`2.MethodName">
            <summary>
            Gets or sets the name of the method that this WeakFunc represents.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`2.IsAlive">
            <summary>
            Gets a value indicating whether the Func's owner is still alive, or if it was collected by the garbage collector already.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the WeakFunc class.
            </summary>
            <param name="func">The Func that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.#ctor(System.Object,System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the WeakFunc class.
            </summary>
            <param name="target">The Func's owner.</param>
            <param name="func">The Func that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.Execute">
            <summary>
            Executes the Func. This only happens if the Func's owner
            is still alive. The Func's parameter is set to default(T).
            </summary>
            <returns>The result of the Func stored as reference.</returns>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.Execute(`0)">
            <summary>
            Executes the Func. This only happens if the Func's owner
            is still alive.
            </summary>
            <param name="parameter">A parameter to be passed to the action.</param>
            <returns>The result of the Func stored as reference.</returns>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.ExecuteWithObject(System.Object)">
            <summary>
            Executes the Func with a parameter of type object. This parameter
            will be casted to T. This method implements <see cref="M:Imagin.Common.Input.IExecuteWithObject.ExecuteWithObject(System.Object)" />
            and can be useful if you store multiple WeakFunc{T} instances but don't know in advance
            what type T represents.
            </summary>
            <param name="parameter">The parameter that will be passed to the Func after
            being casted to T.</param>
            <returns>The result of the execution as object, to be casted to T.</returns>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.MarkForDeletion">
            <summary>
            Sets all the funcs that this WeakFunc contains to null,
            which is a signal for containing objects that this WeakFunc
            should be deleted.
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.MapType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MapType.MAPVK_VK_TO_VSC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MapType.MAPVK_VSC_TO_VK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MapType.MAPVK_VK_TO_CHAR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MapType.MAPVK_VSC_TO_VK_EX">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.MouseEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.DelayedMouseDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.MouseDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.MouseUp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.MouseDoubleClick">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Dialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Dialog.Show(System.String,System.String,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.Show(System.String,System.String,System.Object,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="content"></param>
            <param name="image"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowAsync(System.String,System.String,System.Uri,Imagin.Common.DialogAction,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="image"></param>
            <param name="action"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowAsync(System.String,System.String,System.Object,System.Uri,Imagin.Common.DialogAction,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="content"></param>
            <param name="image"></param>
            <param name="action"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowError(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowInfo(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowInput(System.String,System.String,System.String,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="defaultInput"></param>
            <param name="buttons"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowPassword(System.String,System.String,System.String,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="defaultPassword"></param>
            <param name="image"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowSuccess(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowWarning(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.Show(System.String[]@,System.String,Imagin.Common.WindowsDialogMode,Imagin.Common.WindowsDialogSelectionMode,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            
            </summary>
            <param name="paths"></param>
            <param name="title"></param>
            <param name="dialogMode"></param>
            <param name="dialogSelectionMode"></param>
            <param name="extensions"></param>
            <param name="defaultPath"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.Show(System.String@,System.String,Imagin.Common.WindowsDialogMode,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="title"></param>
            <param name="dialogMode"></param>
            <param name="extensions"></param>
            <param name="defaultPath"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Cmyk">
            <summary>
            Structure to define CMYK.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Cmyk.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Cmyk.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Cmyk.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Cmyk.C">
            <summary>
            Gets or sets the cyan component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Cmyk.M">
            <summary>
            Gets or sets the magenta component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Cmyk.Y">
            <summary>
            Gets or sets the yellow component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Cmyk.K">
            <summary>
            Gets or sets the black component (0 to 1).
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.op_Equality(Imagin.Common.Drawing.Cmyk,Imagin.Common.Drawing.Cmyk)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.op_Inequality(Imagin.Common.Drawing.Cmyk,Imagin.Common.Drawing.Cmyk)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.#ctor(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <param name="Color"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.#ctor(Imagin.Common.Drawing.Rgba)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="m"></param>
            <param name="y"></param>
            <param name="k"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Cmyk.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsb">
            <summary>
            Structure to define a color for HSB (hue/saturation/brightness).
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsb.Component">
            <summary>
            Specifies a HSB component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.Component.H">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsb.H"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.Component.S">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsb.S"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.Component.B">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsb.B"/> component.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsb.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MaxValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MaxValue.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MaxValue.B">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsb.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MinValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MinValue.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsb.MinValue.B">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsb.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsb.H">
            <summary>
            Gets or sets the hue component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsb.S">
            <summary>
            Gets or sets the saturation component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsb.B">
            <summary>
            Gets or sets the brightness component (0 to 1).
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.op_Equality(Imagin.Common.Drawing.Hsb,Imagin.Common.Drawing.Hsb)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.op_Inequality(Imagin.Common.Drawing.Hsb,Imagin.Common.Drawing.Hsb)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.#ctor(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <param name="Color"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.#ctor(Imagin.Common.Drawing.Rgba)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the <see cref="T:Imagin.Common.Drawing.Hsb"/> structure.
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="b"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.New(Imagin.Common.Drawing.Hsb.Component,System.Double)">
            <summary>
            
            </summary>
            <param name="Component"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsb.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsl">
            <summary>
            Structure to define HSL.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsl.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Hsl"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.Component.H">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsl.H"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.Component.S">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsl.S"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.Component.L">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Hsl.L"/> component.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsl.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MaxValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MaxValue.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MaxValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Hsl.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MinValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MinValue.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Hsl.MinValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsl.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsl.H">
            <summary>
            Gets or sets the hue component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsl.S">
            <summary>
            Gets or sets the saturation component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Hsl.L">
            <summary>
            Gets or sets the lightness component (0 to 1).
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.op_Equality(Imagin.Common.Drawing.Hsl,Imagin.Common.Drawing.Hsl)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.op_Inequality(Imagin.Common.Drawing.Hsl,Imagin.Common.Drawing.Hsl)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.#ctor(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <param name="Color"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.#ctor(Imagin.Common.Drawing.Rgba)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the <see cref="T:Imagin.Common.Drawing.Hsl"/> structure.
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="l"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.Frgb(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.New(Imagin.Common.Drawing.Hsl.Component,System.Double)">
            <summary>
            
            </summary>
            <param name="Component"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Hsl.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.IColor">
            <summary>
            Specifies a color.
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.IColor.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lab">
            <summary>
            Structure to define CIE LAB color.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lab.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Lab"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.Component.L">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lab.L"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.Component.A">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lab.A"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.Component.B">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lab.B"/> component.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lab.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MaxValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MaxValue.A">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MaxValue.B">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lab.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MinValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MinValue.A">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lab.MinValue.B">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lab.Range">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Range.L">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Range.A">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Range.B">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.L">
            <summary>
            Gets or sets the luminance component (0 to 100).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.A">
            <summary>
            Gets or sets the opposing a component (-127 to 128).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.B">
            <summary>
            Gets or sets the opposing b component (-127 to 128).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Illuminant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lab.Observer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.op_Equality(Imagin.Common.Drawing.Lab,Imagin.Common.Drawing.Lab)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.op_Inequality(Imagin.Common.Drawing.Lab,Imagin.Common.Drawing.Lab)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.#ctor(System.Windows.Media.Color,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Color"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.#ctor(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.#ctor(System.Double,System.Double,System.Double,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Drawing.Lab"/> structure.
            </summary>
            <param name="l"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="observer"></param>
            <param name="illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.New(Imagin.Common.Drawing.Lab.Component,System.Double)">
            <summary>
            
            </summary>
            <param name="Component"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lab.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Lch">
            <summary>
            Structure to define LCH color.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lch.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Lch"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.Component.L">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lch.L"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.Component.C">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lch.C"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.Component.H">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Lch.H"/> component.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lch.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MaxValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MaxValue.C">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MaxValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Lch.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MinValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MinValue.C">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Lch.MinValue.H">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.L">
            <summary>
            Gets or sets the luminance component (0 to 100).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.C">
            <summary>
            Gets or sets the chroma component (0 to 100).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.H">
            <summary>
            Gets or sets the hue component (0 to 359).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.Illuminant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Lch.Observer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.op_Equality(Imagin.Common.Drawing.Lch,Imagin.Common.Drawing.Lch)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.op_Inequality(Imagin.Common.Drawing.Lch,Imagin.Common.Drawing.Lch)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.#ctor(System.Windows.Media.Color,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Color"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.#ctor(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.#ctor(Imagin.Common.Drawing.Lab,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Lab"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.#ctor(System.Double,System.Double,System.Double,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Drawing.Lch"/> structure.
            </summary>
            <param name="l"></param>
            <param name="c"></param>
            <param name="h"></param>
            <param name="observer"></param>
            <param name="illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.New(Imagin.Common.Drawing.Lch.Component,System.Double)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.ToLab">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Lch.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Luv">
            <summary>
            Structure to define CIE LUV color.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Luv.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Luv"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Component.L">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Luv.L"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Component.U">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Luv.U"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Component.V">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Luv.V"/> component.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Luv.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MaxValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MaxValue.U">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MaxValue.V">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Luv.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MinValue.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MinValue.U">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.MinValue.V">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Luv.Range">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Range.L">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Range.U">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Luv.Range.V">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.L">
            <summary>
            Gets or sets the lightness component (0 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.U">
            <summary>
            Gets or sets the u component (-1 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.V">
            <summary>
            Gets or sets the v component (-1 to 1).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.Illuminant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Luv.Observer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.op_Equality(Imagin.Common.Drawing.Luv,Imagin.Common.Drawing.Luv)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.op_Inequality(Imagin.Common.Drawing.Luv,Imagin.Common.Drawing.Luv)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.#ctor(System.Windows.Media.Color,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Color"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.#ctor(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.#ctor(Imagin.Common.Drawing.Xyz,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Xyz"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.#ctor(System.Double,System.Double,System.Double,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Drawing.Luv"/> structure.
            </summary>
            <param name="l"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="observer"></param>
            <param name="illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.New(Imagin.Common.Drawing.Luv.Component,System.Double)">
            <summary>
            
            </summary>
            <param name="Component"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Luv.ToXyz">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Rgba">
            <summary>
            Structure to define RGBA.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Rgba.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Rgba"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.Component.R">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Rgba.R"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.Component.G">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Rgba.G"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.Component.B">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Rgba.B"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.Component.A">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Rgba.A"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Rgba.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Rgba.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Rgba.R">
            <summary>
            Gets or sets the red component (0 to 255).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Rgba.G">
            <summary>
            Gets or sets the green component (0 to 255).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Rgba.B">
            <summary>
            Gets or sets the blue component (0 to 255).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Rgba.A">
            <summary>
            Gets or sets the alpha component (0 to 255).
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.op_Equality(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.Rgba)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.op_Inequality(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.Rgba)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.#ctor(System.Windows.Media.Color)">
            <summary>
            Initializes an instance of the <see cref="T:Imagin.Common.Drawing.Rgba"/> structure.
            </summary>
            <param name="Color"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of the <see cref="T:Imagin.Common.Drawing.Rgba"/> structure.
            </summary>
            <param name="R"></param>
            <param name="G"></param>
            <param name="B"></param>
            <param name="A"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes an instance of the <see cref="T:Imagin.Common.Drawing.Rgba"/> structure.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes an instance of the <see cref="T:Imagin.Common.Drawing.Rgba"/> structure.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
            <param name="fromLinear"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.Linear(System.Byte)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Rgba.Linear(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Xyz">
            <summary>
            Structure to define CIE XYZ color.
            </summary>
            <remarks>
            There are 11 main illuminants:
            1. A*
            2. C*
            3. D50*
            4. D55*
            5. D65*
            6. D75
            7. E*^
            8. F2
            9. F7
            10. F11
            11. ICC*
            
            * Defined in this struct
            ^ Theoretical
            
            And 2 types of observers 
            1.  2° = 1931
            2. 10° = 1964
            
            This structure supports Observer = 2°, Illuminant = D65 by default.
            </remarks>
        </member>
        <member name="T:Imagin.Common.Drawing.Xyz.Component">
            <summary>
            Specifies a <see cref="T:Imagin.Common.Drawing.Xyz"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.Component.X">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Xyz.X"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.Component.Y">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Xyz.Y"/> component.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.Component.Z">
            <summary>
            Specifies the <see cref="P:Imagin.Common.Drawing.Xyz.Z"/> component.
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Max">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Xyz.MaxValue">
            <summary>
            TO-DO: Disallow instance creation (which does nothing).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.MaxValue.Item(Imagin.Common.Drawing.Xyz.Component,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Component"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.Xyz.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.MinValue.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.MinValue.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Xyz.MinValue.Z">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.X">
            <summary>
            Gets or sets the x component (0 to Illuminant.Max.X).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Y">
            <summary>
            Gets or sets the y component (0 to Illuminant.Max.Y).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Z">
            <summary>
            Gets or sets the component (0 to Illuminant.Max.Z).
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Illuminant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.Xyz.Observer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.op_Equality(Imagin.Common.Drawing.Xyz,Imagin.Common.Drawing.Xyz)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.op_Inequality(Imagin.Common.Drawing.Xyz,Imagin.Common.Drawing.Xyz)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.#ctor(System.Windows.Media.Color,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Color"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.#ctor(Imagin.Common.Drawing.Rgba,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            
            </summary>
            <param name="Rgba"></param>
            <param name="Observer"></param>
            <param name="Illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.#ctor(System.Double,System.Double,System.Double,Imagin.Common.Drawing.ObserverAngle,Imagin.Common.Drawing.Illuminant)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Drawing.Xyz"/> structure.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="observer"></param>
            <param name="illuminant"></param>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.Fxyz(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.New(Imagin.Common.Drawing.Xyz.Component,System.Double)">
            <summary>
            Clones current <see cref="T:Imagin.Common.Drawing.Xyz"/> instance and sets given component value.
            </summary>
            <param name="Component"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Drawing.Xyz.ToRgba">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Lang.Main">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.ADay">
            <summary>
              Looks up a localized string similar to A day.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Ago">
            <summary>
              Looks up a localized string similar to Ago.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.AMinute">
            <summary>
              Looks up a localized string similar to A minute.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.AMonth">
            <summary>
              Looks up a localized string similar to A month.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.AnHour">
            <summary>
              Looks up a localized string similar to An hour.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.ASecond">
            <summary>
              Looks up a localized string similar to A second.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.AYear">
            <summary>
              Looks up a localized string similar to A year.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Days">
            <summary>
              Looks up a localized string similar to Days.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.FromNow">
            <summary>
              Looks up a localized string similar to From now.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Hours">
            <summary>
              Looks up a localized string similar to Hours.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Minutes">
            <summary>
              Looks up a localized string similar to Minutes.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Months">
            <summary>
              Looks up a localized string similar to Months.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Never">
            <summary>
              Looks up a localized string similar to Never.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Now">
            <summary>
              Looks up a localized string similar to Now.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Seconds">
            <summary>
              Looks up a localized string similar to Seconds.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Tomorrow">
            <summary>
              Looks up a localized string similar to Tomorrow.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Years">
            <summary>
              Looks up a localized string similar to Years.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Yesterday">
            <summary>
              Looks up a localized string similar to Yesterday.
            </summary>
        </member>
        <member name="T:Imagin.Common.I3Dimensional">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.I3Dimensional.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IO.ISystemObjectProvider">
            <summary>
            Specifies an object capable of querying system objects.
            </summary>
        </member>
        <member name="M:Imagin.Common.IO.ISystemObjectProvider.Query(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="Path">The path to query.</param>
            <param name="Source">A source used to make queries.</param>
            <returns>A list of system object paths.</returns>
        </member>
        <member name="T:Imagin.Common.IO.LocalSystemObjectProvider">
            <summary>
            Defines functionality to query a local system.
            </summary>
        </member>
        <member name="M:Imagin.Common.IO.LocalSystemObjectProvider.Query(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.IO.SystemObjectProvider">
            <summary>
            Defines base functionality for an <see cref="T:Imagin.Common.IO.ISystemObjectProvider"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.IO.SystemObjectProvider.Query(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Media.GradientPosition">
            <summary>
            Specifies a point that determines a gradient's position.
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.GradientPosition.Start">
            <summary>
            Specifies the start point of the gradient.
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.GradientPosition.End">
            <summary>
            Specifies the end point of the gradient.
            </summary>
        </member>
        <member name="T:Imagin.Common.Media.GradientType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.GradientType.Linear">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.GradientType.Radial">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Media.Animation.ExpanderDoubleAnimation">
            <summary>
            Animates a double value.
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.FromProperty">
            <summary>
            Dependency property for the From property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.From">
            <summary>
            CLR Wrapper for the From depenendency property
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.ToProperty">
            <summary>
            Dependency property for the To property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.To">
            <summary>
            CLR Wrapper for the To property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.ReverseValue">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.ReverseValueProperty">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="M:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.CreateInstanceCore">
            <summary>
            Creates an instance of the animation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.GetCurrentValueCore(System.Double,System.Double,System.Windows.Media.Animation.AnimationClock)">
            <summary>
            Animates the double value
            </summary>
            <param name="defaultOriginValue">The original value to animate</param>
            <param name="defaultDestinationValue">The final value</param>
            <param name="animationClock">The animation clock (timer)</param>
            <returns>Returns the new double to set</returns>
        </member>
        <member name="T:Imagin.Common.Media.Animation.GridLengthAnimation">
            <summary>
            Animates a grid length value just like the DoubleAnimation animates a double value
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.IsCompleted">
            <summary>
            Marks the animation as completed
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.ReverseValue">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.GridLengthAnimation.ReverseValueProperty">
            <summary>
            Dependency property. Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.TargetPropertyType">
            <summary>
            Returns the type of object to animate
            </summary>
        </member>
        <member name="M:Imagin.Common.Media.Animation.GridLengthAnimation.CreateInstanceCore">
            <summary>
            Creates an instance of the animation object
            </summary>
            <returns>Returns the instance of the GridLengthAnimation</returns>
        </member>
        <member name="F:Imagin.Common.Media.Animation.GridLengthAnimation.FromProperty">
            <summary>
            Dependency property for the From property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.From">
            <summary>
            CLR Wrapper for the From depenendency property
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.GridLengthAnimation.ToProperty">
            <summary>
            Dependency property for the To property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.To">
            <summary>
            CLR Wrapper for the To property
            </summary>
        </member>
        <member name="M:Imagin.Common.Media.Animation.GridLengthAnimation.VerifyAnimationCompletedStatus(System.Windows.Media.Animation.AnimationClock)">
            <summary>
            registers to the completed event of the animation clock
            </summary>
            <param name="clock">the animation clock to notify completion status</param>
        </member>
        <member name="M:Imagin.Common.Media.Animation.GridLengthAnimation.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
            <summary>
            Animates the grid let set
            </summary>
            <param name="defaultOriginValue">The original value to animate</param>
            <param name="defaultDestinationValue">The final value</param>
            <param name="animationClock">The animation clock (timer)</param>
            <returns>Returns the new grid length to set</returns>
        </member>
        <member name="T:Imagin.Common.WindowsDialogMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogMode.OpenFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogMode.OpenFolder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogMode.Open">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogMode.SaveFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.WindowsDialogSelectionMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogSelectionMode.Single">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogSelectionMode.Multiple">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Entry">
            <summary>
             An object with a date that periodically notifies.
             </summary>
        </member>
        <member name="F:Imagin.Common.Entry.date">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Entry.Date">
            <summary>
            Gets or sets the date of the entry.
            </summary>
        </member>
        <member name="M:Imagin.Common.Entry.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Entry.#ctor(System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Imagin.Common.Entry.#ctor(System.DateTime,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Imagin.Common.Entry.OnNotified(Imagin.Common.Timers.ElapsedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.I2Dimensional">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.I2Dimensional.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IProportional">
            <summary>
            Specifies an object that has proportions.
            </summary>
        </member>
        <member name="P:Imagin.Common.IProportional.Proportions">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Mvvm.ViewModel`1">
            <summary>
            Base implementatation for defining view models.
            </summary>
            <typeparam name="T">The type of an object to model.</typeparam>
        </member>
        <member name="P:Imagin.Common.Mvvm.ViewModel`1.View">
            <summary>
            The view to model.
            </summary>
        </member>
        <member name="M:Imagin.Common.Mvvm.ViewModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Mvvm.ViewModel`1"/> class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Mvvm.ViewModel`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Mvvm.ViewModel`1"/> class.
            </summary>
            <param name="view">The view to model.</param>
        </member>
        <member name="T:Imagin.Common.Mvvm.ViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Mvvm.ViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Mvvm.ViewModel"/> class.
            </summary>
        </member>
        <member name="T:Imagin.Common.NamedEntry">
            <summary>
             A named object with a date that periodically notifies.
             </summary>
        </member>
        <member name="F:Imagin.Common.NamedEntry.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.NamedEntry.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NamedEntry.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NamedEntry.#ctor(System.String,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Imagin.Common.NamedEntry.#ctor(System.String,System.DateTime,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="date"></param>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Imagin.Common.NamedEntry.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Native.Utilities">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.PeriodicalObject">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.PeriodicalObject.Notified">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PeriodicalObject.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PeriodicalObject.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PeriodicalObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PeriodicalObject.#ctor(System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Imagin.Common.PeriodicalObject.OnNotified(Imagin.Common.Timers.ElapsedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.PeriodicalObject.OnUnmanagedDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Primitives.TimePart">
            <summary>
            Specifies a part of a <see cref="T:System.TimeSpan"/>  instance.
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.TimePart.Hour">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.TimePart.Minute">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.TimePart.Second">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Primitives.DateTimePart">
            <summary>
            Specifies a part of a <see cref="T:System.DateTime"/> instance.
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Month">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Day">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Year">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Hour">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Minute">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Second">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Millisecond">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.DateTimePart.Meridian">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Primitives.Proportions">
            <summary>
            Represents <see cref="T:System.Windows.Size"/> with binding support; variant of <see cref="T:System.Windows.Size"/>.
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Proportions.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Proportions.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Proportions.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Proportions.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.#ctor(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Width"></param>
            <param name="Height"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.op_Implicit(System.Windows.Size)~Imagin.Common.Primitives.Proportions">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.OnChanged(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.Set(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.Set(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Proportions.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Primitives.Position">
            <summary>
            Represents <see cref="T:System.Windows.Point"/> in two-dimensional space with binding support; variant of <see cref="T:System.Windows.Point"/>.
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Position.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Position.x">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Position.y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position.Y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position.Point">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.#ctor(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.op_Implicit(System.Windows.Point)~Imagin.Common.Primitives.Position">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.OnChanged(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.Set(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.Set(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Primitives.Selection">
            <summary>
            Represents a rect with binding support.
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Selection.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Selection.PositionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Selection.SizeChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.TopRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.BottomLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Rect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Selection.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.#ctor">
            <summary>
            Initializes new instance of Selection.
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.#ctor(System.Windows.Point,System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.#ctor(System.Windows.Rect)">
            <summary>
            
            </summary>
            <param name="Rect"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.#ctor(System.Double[])">
            <summary>
            
            </summary>
            <param name="Values"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.op_Implicit(System.Double[])~Imagin.Common.Primitives.Selection">
            <summary>
            
            </summary>
            <param name="Values"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.op_Implicit(System.Windows.Rect)~Imagin.Common.Primitives.Selection">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.OnPositionChanged(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.OnSizeChanged(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.OnChanged(System.Windows.Rect)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set selection from given values.
            </summary>
            <param name="x">X-position of selection.</param>
            <param name="y">Y-position of selection.</param>
            <param name="width">Width of selection.</param>
            <param name="height">Height of selection.</param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Set(System.Windows.Rect)">
            <summary>
            Set selection from given Rect.
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Set(System.Double[])">
            <summary>
            
            </summary>
            <param name="Values"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.Set(System.Windows.Point,System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Point"></param>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Selection.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Primitives.Position3D">
            <summary>
            Represents <see cref="T:System.Windows.Point"/> in three-dimensional space with binding support; variant of <see cref="T:System.Windows.Media.Media3D.Point3D"/>.
            </summary>
        </member>
        <member name="E:Imagin.Common.Primitives.Position3D.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Position3D.x">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position3D.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Position3D.y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position3D.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Primitives.Position3D.z">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position3D.Z">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position3D.Point">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Primitives.Position3D.Point3D">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.#ctor(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.#ctor(System.Windows.Media.Media3D.Point3D)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.op_Implicit(System.Windows.Point)~Imagin.Common.Primitives.Position3D">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.op_Implicit(System.Windows.Media.Media3D.Point3D)~Imagin.Common.Primitives.Position3D">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.OnChanged(System.Windows.Media.Media3D.Point3D)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.Set(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.Set(System.Windows.Media.Media3D.Point3D)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Primitives.Position3D.Set(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:Imagin.Common.Debug.Log">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.Log.App">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.Action{Imagin.Common.Configuration.IApp})">
            <summary>
            
            </summary>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.Object,Imagin.Common.Debug.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.Object,System.Object,Imagin.Common.Debug.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Source"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Format"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.String,Imagin.Common.Debug.LogEntryType,System.Object[])">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
            <param name="Format"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.String,System.Object,Imagin.Common.Debug.LogEntryType,System.Object[])">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Source"></param>
            <param name="Type"></param>
            <param name="Format"></param>
        </member>
        <member name="T:Imagin.Common.StretchMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StretchMode.Tiled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StretchMode.Centered">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StretchMode.Stretched">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Theme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Theme.Dark">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Theme.Light">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ThemeDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ThemeDictionary.Theme">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ThemeDictionary.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ThemeDictionary.OnAssemblyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.ThemeDictionary.OnThemeChanged(Imagin.Common.Theme)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.StyleDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StyleDictionary.Assembly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.StyleDictionary.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.StyleDictionary.OnAssemblyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Controls.Extended.ColorSpace">
            <summary>
            Specifies a color space.
            </summary>
        </member>
        <member name="F:Imagin.Controls.Extended.ColorSpace.Rgb">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Controls.Extended.ColorSpace.Hsb">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Controls.Extended.ColorSpace.Hsl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Controls.Extended.ColorSpace.Xyz">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Controls.Extended.ColorSpace.Lab">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Controls.Extended.ColorSpace.Lch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Controls.Extended.ColorSpace.Yuv">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Controls.Extended.ColorSpace.Luv">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Controls.Extended.ColorSpace.Cmy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Controls.Extended.ColorSpace.Cmyk">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
