<UserControl 
    x:Class="Imagin.Controls.Extended.PropertyGrid"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:local="clr-namespace:Imagin.Controls.Extended"
    xmlns:Common.Data="clr-namespace:Imagin.Common.Data;assembly=Imagin.Common"
    xmlns:Common.Data.Converters="clr-namespace:Imagin.Common.Data.Converters;assembly=Imagin.Common"
    xmlns:Controls.Common.Extensions="clr-namespace:Imagin.Controls.Common.Extensions;assembly=Imagin.Controls.Common"
    xmlns:Controls.Common="clr-namespace:Imagin.Controls.Common;assembly=Imagin.Controls.Common"
    xmlns:Controls.Extended.Converters="clr-namespace:Imagin.Controls.Extended.Converters"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:System.2="clr-namespace:System;assembly=System"
    xmlns:System.Collections="clr-namespace:System.Collections;assembly=mscorlib"
    xmlns:System.ComponentModel="clr-namespace:System.ComponentModel;assembly=System"
    xmlns:System.Net="clr-namespace:System.Net;assembly=System"
    xmlns:System.Windows="clr-namespace:System.Windows;assembly=WindowsBase"
    xmlns:System.Windows.Media="clr-namespace:System.Windows.Media;assembly=PresentationCore"
    x:Name="PART_PropertyGrid">
    <UserControl.Resources>
        <Common.Data:BindingProxy x:Key="BindingProxy"  Data="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:PropertyGrid}}}"/>

        <!-- ....................................................... Converters -->

        <Common.Data.Converters:ObjectToTypeConverter x:Key="ObjectToTypeConverter"/>
        <Common.Data.Converters:NullToBooleanConverter x:Key="NullToBooleanConverter"/>
        <Common.Data.Converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <Common.Data.Converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <Common.Data.Converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Common.Data.Converters:StringToCamelCaseConverter x:Key="StringToCamelCaseConverter"/>
        <Common.Data.Converters:EnumToCamelCaseConverter x:Key="EnumToCamelCaseConverter"/>
        <Common.Data.Converters:EnumToCollectionConverter x:Key="EnumToCollectionConverter"/>
        <Common.Data.Converters:FileSizeMultiValueConverter x:Key="FileSizeMultiValueConverter"/>
        <Common.Data.Converters:StringToVisibilityConverter x:Key="StringToVisibilityConverter"/>
        <Common.Data.Converters:SolidColorBrushToHexConverter x:Key="SolidColorBrushToHexConverter"/>
        <Common.Data.Converters:StartsWithToVisibilityMultiValueConverter x:Key="StartsWithToVisibilityMultiValueConverter"/>

        <Controls.Extended.Converters:FeaturedPropertyVisibilityConverter x:Key="FeaturedPropertyVisibilityConverter"/>

        <!-- ....................................................... Styles -->

        <Style 
            x:Key="Style.Cell"
            TargetType="{x:Type DataGridCell}" 
            BasedOn="{StaticResource {x:Type DataGridCell}}">
            <Setter Property="Padding" Value="10,1"/>
        </Style>

        <Style x:Key="Style.DataGrid.Row" TargetType="{x:Type DataGridRow}">
            <Setter Property="TextElement.Foreground" Value="{Binding Foreground, ElementName=PART_PropertyGrid}" />
            <Setter Property="Visibility">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource StartsWithToVisibilityMultiValueConverter}">
                        <Binding Path="Name" Converter="{StaticResource StringToCamelCaseConverter}"/>
                        <Binding Path="SearchQuery" RelativeSource="{RelativeSource AncestorType={x:Type local:PropertyGrid}}"/>
                    </MultiBinding>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="False" />
                        <Condition Property="IsMouseOver" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True" />
                        <Condition Property="IsMouseOver" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True" />
                        <Condition Property="Selector.IsSelectionActive" Value="False" />
                        <Condition Property="IsMouseOver" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True" />
                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                        <Condition Property="IsMouseOver" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="False" />
                        <Condition Property="ItemsControl.AlternationIndex" Value="0" />
                        <Condition Property="IsMouseOver" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="False" />
                        <Condition Property="ItemsControl.AlternationIndex" Value="1" />
                        <Condition Property="IsMouseOver" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="Style.DataGrid.GroupHeader" TargetType="{x:Type GroupItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GroupItem}">
                        <Expander Header="{Binding Name}" IsExpanded="{Binding CollapseGroups, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type local:PropertyGrid}}, Converter={StaticResource InverseBooleanConverter}}">
                            <ItemsPresenter/>
                        </Expander>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- ....................................................... Templates -->
        <ResourceDictionary x:Key="Resources.Templates">
            <DataTemplate x:Key="{x:Type System:Boolean}">
                <CheckBox 
                    HorizontalAlignment="Left" 
                    IsChecked="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                    IsEnabled="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                    Margin="0,5"/>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System:Byte}">
                <Controls.Common:ByteUpDown 
                    HorizontalAlignment="Stretch"
                    IsReadOnly="{Binding IsReadOnly}"
                    CanUpDown="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                    Maximum="{Binding Maximum}"
                    Minimum="{Binding Minimum}"
                    StringFormat="{Binding StringFormat}"
                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System.Collections:IList}">
                <Grid Margin="0,7">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock 
                        Text="{l:LocText Prefix=(, Key=Collection, Suffix=)}"/>
                    <Controls.Common:MaskedButton
                        Grid.Column="1"
                        Command="{x:Static local:PropertyGrid.EditCollectionCommand}"
                        CommandParameter="{Binding Value, Mode=OneWay}"
                        Padding="7,0,0,0"
                        Source="pack://application:,,,/Imagin.Controls.Extended;component/Images/Pencil.png"/>
                </Grid>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System:DateTime}">
                <Controls.Common:DateTimeUpDown 
                    HorizontalAlignment="Stretch"
                    IsReadOnly="{Binding IsReadOnly}"
                    CanUpDown="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                    Maximum="{Binding Maximum}"
                    Minimum="{Binding Minimum}"
                    StringFormat="{Binding StringFormat}"
                    Value="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System:Decimal}">
                <Controls.Common:DecimalUpDown 
                    HorizontalAlignment="Stretch"
                    IsReadOnly="{Binding IsReadOnly}"
                    CanUpDown="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                    Maximum="{Binding Maximum}"
                    Minimum="{Binding Minimum}"
                    StringFormat="{Binding StringFormat}"
                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System:Double}">
                <Controls.Common:DoubleUpDown 
                    HorizontalAlignment="Stretch"
                    IsReadOnly="{Binding IsReadOnly}"
                    CanUpDown="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                    Maximum="{Binding Maximum}"
                    Minimum="{Binding Minimum}"
                    StringFormat="{Binding StringFormat}"
                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System:Enum}">
                <ComboBox
                    IsEnabled="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                    ItemsSource="{Binding Value, Mode=OneTime, Converter={StaticResource EnumToCollectionConverter}}" 
                    SelectedValue="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                    VirtualizingPanel.IsVirtualizing="True" 
                    VirtualizingPanel.VirtualizationMode="Recycling">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Mode=OneWay, Converter={StaticResource EnumToCamelCaseConverter}}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System.Windows.Media:LinearGradientBrush}">
                <local:GradientChip 
                    Height="25"
                    Value="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                    Width="Auto"/>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System:Guid}">
                <Controls.Common:RegexBox 
                    HorizontalAlignment="Stretch"
                    IsReadOnly="{Binding IsReadOnly}" 
                    Pattern="^([0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12})$"
                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System:Int32}">
                <Controls.Common:IntUpDown 
                    HorizontalAlignment="Stretch"
                    IsReadOnly="{Binding IsReadOnly}"
                    CanUpDown="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                    Maximum="{Binding Maximum}"
                    Minimum="{Binding Minimum}"
                    StringFormat="{Binding StringFormat}"
                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System:Int64}">
                <ContentControl x:Name="PART_Content">
                    <Controls.Common:LongUpDown 
                        HorizontalAlignment="Stretch"
                        IsReadOnly="{Binding IsReadOnly}"
                        CanUpDown="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                        Maximum="{Binding Maximum}"
                        Minimum="{Binding Minimum}"
                        StringFormat="{Binding StringFormat}"
                        Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                </ContentControl>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Tag}" Value="FileSize">
                        <Setter TargetName="PART_Content" Property="Content">
                            <Setter.Value>
                                <TextBlock Margin="0,10">
                                    <TextBlock.Text>
                                        <MultiBinding Converter="{StaticResource FileSizeMultiValueConverter}">
                                            <Binding Path="Value" Mode="OneWay"/>
                                            <Binding Path="Data.FileSizeFormat" Source="{StaticResource BindingProxy}"/>
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System.Net:NetworkCredential}">
                <StackPanel IsEnabled="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}">
                    <Controls.Common:TextBoxExt
                        Margin="0,0,0,5"
                        Placeholder="{l:Loc Username}"
                        Text="{Binding Value.UserName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <Controls.Common:PasswordBox
                        Placeholder="{l:Loc Password}"
                        Text="{Binding Value.Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System.Windows:Point}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <Controls.Common:DoubleUpDown 
                        IsReadOnly="{Binding IsReadOnly}"
                        CanUpDown="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                        Margin="0,0,5,0"
                        Maximum="{Binding Maximum.X}"
                        Minimum="{Binding Minimum.X}"
                        StringFormat="{Binding StringFormat}"
                        Text="{Binding Variant.X, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        ToolTip="{l:Loc X}"/>
                    <Controls.Common:DoubleUpDown 
                        Grid.Column="1"
                        Grid.Row="1"
                        IsReadOnly="{Binding IsReadOnly}"
                        CanUpDown="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                        Maximum="{Binding Maximum.Y}"
                        Minimum="{Binding Minimum.Y}"
                        StringFormat="{Binding StringFormat}"
                        Text="{Binding Variant.Y, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        ToolTip="{l:Loc Y}"/>
                </Grid>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System:Int16}">
                <Controls.Common:ShortUpDown 
                    HorizontalAlignment="Stretch"
                    IsReadOnly="{Binding IsReadOnly}"
                    CanUpDown="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                    Maximum="{Binding Maximum}"
                    Minimum="{Binding Minimum}"
                    StringFormat="{Binding StringFormat}"
                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System.Windows:Size}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <Controls.Common:DoubleUpDown
                        x:Name="PART_Width"
                        IsReadOnly="{Binding IsReadOnly}"
                        CanUpDown="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                        Maximum="{Binding Maximum.Width}"
                        Minimum="0"
                        StringFormat="{Binding StringFormat}"
                        Text="{Binding Variant.Width, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        ToolTip="{l:Loc Width}"/>
                    <Controls.Common:MaskedToggleButton
                        Grid.Column="1"
                        CheckedToolTip="{l:Loc Unbind}"
                        IsChecked="{Binding Tag, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        Padding="7,0"
                        Source="pack://application:,,,/Imagin.Controls.Extended;component/Images/LinkHorizontal.png"
                        UncheckedToolTip="{l:Loc Bind}"/>
                    <Controls.Common:DoubleUpDown
                        Grid.Column="2"
                        x:Name="PART_Height"
                        IsReadOnly="{Binding IsReadOnly}"
                        CanUpDown="{Binding IsReadOnly, Converter={StaticResource InverseBooleanConverter}}"
                        Maximum="{Binding Maximum.Height}"
                        Minimum="0"
                        StringFormat="{Binding StringFormat}"
                        Text="{Binding Variant.Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        ToolTip="{l:Loc Height}"/>
                </Grid>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System.Windows.Media:SolidColorBrush}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <local:ColorChip Value="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="25" Height="25" Margin="0,0,5,0"/>
                    <Controls.Common:AlphaNumericBox Grid.Column="1" Text="{Binding Value, Mode=TwoWay, Converter={StaticResource SolidColorBrushToHexConverter}, UpdateSourceTrigger=LostFocus}" MaxLength="8" IsReadOnly="{Binding IsReadOnly}"/>
                </Grid>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System:String}">
                <ContentControl x:Name="PART_Content">
                    <Controls.Common:TextBoxExt 
                        HorizontalAlignment="Stretch"
                        IsReadOnly="{Binding IsReadOnly}" 
                        Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                </ContentControl>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Tag, UpdateSourceTrigger=PropertyChanged}" Value="FilePath">
                        <Setter TargetName="PART_Content" Property="Content">
                            <Setter.Value>
                                <Controls.Common:FileBox  
                                    BrowseMode="OpenFile"
                                    HorizontalAlignment="Stretch"
                                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Tag, UpdateSourceTrigger=PropertyChanged}" Value="FolderPath">
                        <Setter TargetName="PART_Content" Property="Content">
                            <Setter.Value>
                                <Controls.Common:FileBox  
                                    BrowseMode="OpenFolder"
                                    HorizontalAlignment="Stretch"
                                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Tag, UpdateSourceTrigger=PropertyChanged}" Value="Multiline">
                        <Setter TargetName="PART_Content" Property="Content">
                            <Setter.Value>
                                <Controls.Common:TextBoxExt 
                                    AcceptsReturn="True"
                                    IsReadOnly="{Binding IsReadOnly}" 
                                    Height="Auto"
                                    HorizontalAlignment="Stretch"
                                    Padding="3"
                                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                    TextBlock.LineStackingStrategy="BlockLineHeight"
                                    TextBlock.LineHeight="15"
                                    VerticalContentAlignment="Top"
                                    TextWrapping="Wrap"/>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Tag, UpdateSourceTrigger=PropertyChanged}" Value="Password">
                        <Setter TargetName="PART_Content" Property="Content">
                            <Setter.Value>
                                <Controls.Common:PasswordBox 
                                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                    HorizontalAlignment="Stretch"/>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System.2:Uri}">
                <Controls.Common:RegexBox 
                    HorizontalAlignment="Stretch"
                    IsReadOnly="{Binding IsReadOnly}" 
                    Pattern="^(http|https|ftp|)\://|[a-zA-Z0-9\-\.]+\.[a-zA-Z](:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;%\$#\=~])*[^\.\,\)\(\s]$"
                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTemplate>
            <DataTemplate x:Key="{x:Type System:Version}">
                <Controls.Common:RegexBox 
                    HorizontalAlignment="Stretch"
                    IsReadOnly="{Binding IsReadOnly}" 
                    Pattern="^(?:0|[1-9][0-9]*)(?:\.(0|[1-9][0-9]*))*$"
                    Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTemplate>
        </ResourceDictionary>

        <DataTemplate x:Key="PropertyModelTemplate">
            <ContentControl Content="{Binding}">
                <ContentControl.ContentTemplateSelector>
                    <local:PropertyTemplateSelector Resources="{StaticResource Resources.Templates}"/>
                </ContentControl.ContentTemplateSelector>
            </ContentControl>
        </DataTemplate>
    </UserControl.Resources>
    <Grid DataContext="{Binding ElementName=PART_PropertyGrid}">
        <Grid.RowDefinitions>
            <RowDefinition Height="30"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid Visibility="{Binding ShowHeader, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid IsEnabled="{Binding SelectedObject, Converter={StaticResource NullToBooleanConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ItemsControl
                    ItemsSource="{Binding Buttons, Mode=OneWay}"
                    VerticalAlignment="Center">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <ContentPresenter Content="{Binding Mode=OneWay}"/>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
                <Controls.Common:MaskedToggleButton
                    Grid.Column="1"
                    Source="pack://application:,,,/Imagin.Controls.Extended;component/Images/Category.png"
                    IsChecked="{Binding ShowCategories}"
                    Padding="7,0,0,0"
                    CheckedToolTip="Showing Categories"
                    UncheckedToolTip="Show Categories"
                    VerticalAlignment="Center"/>
                <Controls.Common:MaskedDropDownButton
                    Grid.Column="2"
                    Source="pack://application:,,,/Imagin.Controls.Extended;component/Images/Sort.png"
                    ToolTip="{l:Loc SortDirection}"
                    Padding="10,0"
                    VerticalAlignment="Center">
                    <Controls.Common:MaskedDropDownButton.DropDown>
                        <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                            <MenuItem Header="{l:Loc Name}" IsCheckable="True" IsChecked="{Binding SortByName}" Controls.Common.Extensions:MenuItemExtensions.GroupName="SortName"/>
                            <MenuItem Header="{l:Loc Type}" IsCheckable="True" IsChecked="{Binding SortByType}" Controls.Common.Extensions:MenuItemExtensions.GroupName="SortName"/>
                            <Separator/>
                            <MenuItem Header="{l:Loc Ascending}" IsCheckable="True" IsChecked="{Binding IsSortAscending}" Controls.Common.Extensions:MenuItemExtensions.GroupName="SortDirection"/>
                            <MenuItem Header="{l:Loc Descending}" IsCheckable="True" IsChecked="{Binding IsSortDescending}" Controls.Common.Extensions:MenuItemExtensions.GroupName="SortDirection"/>
                        </ContextMenu>
                    </Controls.Common:MaskedDropDownButton.DropDown>
                </Controls.Common:MaskedDropDownButton>
                <Controls.Common:MaskedImage
                    Grid.Column="3"
                    Source="pack://application:,,,/Imagin.Controls.Extended;component/Images/Search.png"
                    Margin="0,0,5,0"/>
                <Controls.Common:TextBoxExt
                    Grid.Column="4"
                    CanUserClear="True"
                    Placeholder="{l:Loc Search}"
                    Text="{Binding SearchQuery, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    ToolTip="{l:Loc Search}"
                    Background="Transparent"
                    BorderThickness="0"/>
                <Controls.Common:MaskedDropDownButton
                    Grid.Column="6"
                    Source="pack://application:,,,/Imagin.Controls.Extended;component/Images/ArrowDown.png"
                    ToolTip="{l:Loc Options}"
                    Padding="5,0">
                    <Controls.Common:MaskedDropDownButton.DropDown>
                        <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                            <MenuItem 
                                Header="{l:Loc CollapseGroups}" 
                                IsCheckable="True"
                                IsChecked="{Binding CollapseGroups}"
                                StaysOpenOnClick="True"/>
                            <Separator/>
                            <MenuItem 
                                Header="{l:Loc Reset}" 
                                Command="{x:Static local:PropertyGrid.ResetCommand}"/>
                        </ContextMenu>
                    </Controls.Common:MaskedDropDownButton.DropDown>
                </Controls.Common:MaskedDropDownButton>
            </Grid>
        </Grid>
        <Border
            Grid.Row="1"
            Background="{Binding GridBackground}"
            BorderBrush="{Binding GridBorderBrush}"
            BorderThickness="{Binding GridBorderThickness}">
            <Grid>
                <Grid Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <ContentControl
                        ContentTemplate="{Binding LoaderTemplate}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"/>
                </Grid>
                <Grid Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Inverted}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Label 
                        Content="{Binding SelectedObject, Converter={StaticResource ObjectToTypeConverter}}"
                        FontWeight="Bold"
                        Margin="10,5"
                        Visibility="{Binding ShowType, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    
                    <Grid 
                        Grid.Row="1"
                        Margin="10,5,5,10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.Visibility>
                            <MultiBinding Converter="{StaticResource FeaturedPropertyVisibilityConverter}">
                                <Binding Path="ShowFeatured"/>
                                <Binding Path="Properties.Featured"/>
                            </MultiBinding>
                        </Grid.Visibility>
                        <Label 
                            Content="{Binding Properties.Featured.Name}" 
                            Margin="0,0,10,0" 
                            VerticalAlignment="Center"/>
                        <ContentControl
                            Grid.Column="1"
                            Content="{Binding Properties.Featured}"
                            ContentTemplate="{StaticResource PropertyModelTemplate}"/>
                    </Grid>
                    
                    <DataGrid
                        Grid.Row="2"
                        AutoGenerateColumns="False"
                        CanUserAddRows="False"
                        CanUserDeleteRows="False"
                        CellStyle="{StaticResource Style.Cell}"
                        GridLinesVisibility="{Binding GridLinesVisibility}"
                        HeadersVisibility="{Binding HeadersVisibility}"
                        ItemContainerStyle="{StaticResource Style.DataGrid.Row}"
                        ItemsSource="{Binding ListCollectionView, IsAsync=True}"
                        ScrollViewer.HorizontalScrollBarVisibility="Auto"
                        ScrollViewer.VerticalScrollBarVisibility="Auto"
                        SelectedValue="{Binding Properties.ActiveProperty, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        SelectionMode="Single"
                        Style="{Binding GridStyle}">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn
                                Header="Name"
                                SortMemberPath="Name" 
                                Width="{Binding Data.PropertyColumnWidth, Source={StaticResource BindingProxy}}">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock 
                                            Text="{Binding Name, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToCamelCaseConverter}}"
                                            TextTrimming="CharacterEllipsis"
                                            ToolTip="{Binding Text, Mode=OneWay, RelativeSource={RelativeSource Self}}"
                                            VerticalAlignment="Center"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn 
                                CellTemplate="{StaticResource PropertyModelTemplate}" 
                                Header="Value" 
                                Width="{Binding Data.ValueColumnWidth, Source={StaticResource BindingProxy}}"/>
                        </DataGrid.Columns>
                        <DataGrid.GroupStyle>
                            <GroupStyle ContainerStyle="{StaticResource Style.DataGrid.GroupHeader}">
                                <GroupStyle.Panel>
                                    <ItemsPanelTemplate>
                                        <DataGridRowsPresenter/>
                                    </ItemsPanelTemplate>
                                </GroupStyle.Panel>
                            </GroupStyle>
                        </DataGrid.GroupStyle>
                    </DataGrid>
                </Grid>
            </Grid>
        </Border>
        <ContentControl 
            Grid.Row="2"
            Content="{Binding Properties.ActiveProperty}"
            Visibility="{Binding ShowPropertyDescription, Converter={StaticResource BooleanToVisibilityConverter}}">
            <ContentControl.ContentTemplate>
                <DataTemplate>
                    <Border Style="{Binding PropertyDescriptionStyle, RelativeSource={RelativeSource AncestorType={x:Type local:PropertyGrid}}}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <TextBlock 
                                FontWeight="Bold"
                                Margin="0,0,15,0"
                                Text="{Binding Name, Converter={StaticResource StringToCamelCaseConverter}}"
                                TextTrimming="CharacterEllipsis"/>
                            <TextBlock 
                                Grid.Row="1"
                                Text="{Binding Description}"
                                TextTrimming="CharacterEllipsis"
                                TextWrapping="Wrap"/>
                        </Grid>
                    </Border>
                </DataTemplate>
            </ContentControl.ContentTemplate>
        </ContentControl>
    </Grid>
</UserControl>
