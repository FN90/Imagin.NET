<UserControl 
    x:Class="Imagin.Controls.Common.PropertyGridBase"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:local="clr-namespace:Imagin.Controls.Common"
    xmlns:Common="http://imagin.tech/imagin/common"
    xmlns:Common.Portable="clr-namespace:Imagin.Common;assembly=Imagin.Common"
    xmlns:Converters="clr-namespace:Imagin.Controls.Common.Converters"
    xmlns:Linq="clr-namespace:Imagin.Controls.Common.Extensions"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:System.2="clr-namespace:System;assembly=System"
    xmlns:System.Collections="clr-namespace:System.Collections;assembly=mscorlib"
    xmlns:System.ComponentModel="clr-namespace:System.ComponentModel;assembly=System"
    xmlns:System.Net="clr-namespace:System.Net;assembly=System"
    xmlns:System.Windows="clr-namespace:System.Windows;assembly=WindowsBase"
    xmlns:System.Windows.Media="clr-namespace:System.Windows.Media;assembly=PresentationCore"
    x:Name="PART_PropertyGrid">
    <UserControl.Resources>
        <Common:BindingProxy x:Key="BindingProxy"  Data="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:PropertyGrid}}}"/>

        <!-- ....................................................... Converters -->
        
        <Common:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Common:EnumToCollectionConverter x:Key="EnumToCollectionConverter"/>
        <Common:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <Common:LocalizationConverter x:Key="LocalizationConverter"/>
        <Common:NullToBooleanConverter x:Key="NullToBooleanConverter"/>
        <Common:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <Common:StartsWithToVisibilityMultiValueConverter x:Key="StartsWithToVisibilityMultiValueConverter"/>
        <Converters:FeaturedPropertyVisibilityConverter x:Key="FeaturedPropertyVisibilityConverter"/>

        <!-- ....................................................... Styles -->

        <Style x:Key="Style.Cell"
                TargetType="{x:Type DataGridCell}" 
                BasedOn="{StaticResource {x:Type DataGridCell}}">
            <Setter Property="Padding" Value="10,1"/>
        </Style>

        <Style x:Key="Style.DataGrid.Row"
               TargetType="{x:Type DataGridRow}">
            <Setter Property="TextElement.Foreground" Value="{Binding Foreground, ElementName=PART_PropertyGrid}" />
            <Setter Property="Visibility">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource StartsWithToVisibilityMultiValueConverter}" BindingGroupName="{x:Null}">
                        <Binding Converter="{StaticResource LocalizationConverter}" Path="DisplayName"/>
                        <Binding Path="Data.SearchQuery" Source="{StaticResource BindingProxy}"/>
                    </MultiBinding>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="False" />
                        <Condition Property="IsMouseOver" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True" />
                        <Condition Property="IsMouseOver" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True" />
                        <Condition Property="Selector.IsSelectionActive" Value="False" />
                        <Condition Property="IsMouseOver" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True" />
                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                        <Condition Property="IsMouseOver" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="False" />
                        <Condition Property="ItemsControl.AlternationIndex" Value="0" />
                        <Condition Property="IsMouseOver" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="False" />
                        <Condition Property="ItemsControl.AlternationIndex" Value="1" />
                        <Condition Property="IsMouseOver" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="Transparent"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="Style.DataGrid.GroupHeader"
               TargetType="{x:Type GroupItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GroupItem}">
                        <Expander Header="{Binding Name}" IsExpanded="{Binding CollapseGroups, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type local:PropertyGrid}}, Converter={StaticResource InverseBooleanConverter}}">
                            <ItemsPresenter/>
                        </Expander>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid DataContext="{Binding ElementName=PART_PropertyGrid}">
        <Grid.RowDefinitions>
            <RowDefinition Height="30"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- ....................................................... Header -->
        
        <Grid 
            IsEnabled="{Binding Source, Converter={StaticResource NullToBooleanConverter}}"
            Linq:PanelExtensions.Spacing="0,0,10,0"
            Linq:PanelExtensions.TrimLast="True"
            Visibility="{Binding ShowHeader, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <!-- Custom Buttons -->
            <ItemsControl
                ItemsSource="{Binding Buttons, Mode=OneWay}"
                VerticalAlignment="Center">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <ContentPresenter Content="{Binding Mode=OneWay}"/>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <!-- Default Buttons -->

            <local:MaskedButton
                Grid.Column="1"
                Command="{Binding RewindNestCommand}"
                Source="pack://application:,,,/Imagin.Controls.Common.Wpf;component/Images/ArrowLeftRound.png"
                ToolTip="{l:Loc Imagin.Controls.Common.Wpf:Main:Back}"
                VerticalAlignment="Center"
                Visibility="{Binding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay, RelativeSource={RelativeSource Self}, UpdateSourceTrigger=PropertyChanged}"/>
            <local:MaskedToggleButton
                Grid.Column="2"
                CheckedToolTip="{l:Loc Imagin.Controls.Common.Wpf:Main:HideCategories}"
                IsChecked="{Binding ShowCategories}"
                Source="pack://application:,,,/Imagin.Controls.Common.Wpf;component/Images/Category.png"
                ToolTip="{l:Loc Imagin.Controls.Common.Wpf:Main:ShowCategories}"
                VerticalAlignment="Center"/>
            <local:MaskedDropDownButton
                Grid.Column="3"
                Source="pack://application:,,,/Imagin.Controls.Common.Wpf;component/Images/Sort.png"
                ToolTip="{l:Loc Imagin.Controls.Common.Wpf:Main:Sort}"
                VerticalAlignment="Center">
                <local:MaskedDropDownButton.DropDown>
                    <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                        <MenuItem 
                            Header="{l:Loc Imagin.Controls.Common.Wpf:Main:Name}" 
                            IsCheckable="True" 
                            IsChecked="{Binding SortByName, UpdateSourceTrigger=PropertyChanged}" 
                            Linq:MenuItemExtensions.GroupName="SortName"
                            StaysOpenOnClick="True"/>
                        <MenuItem 
                            Header="{l:Loc Imagin.Controls.Common.Wpf:Main:Type}" 
                            IsCheckable="True" 
                            IsChecked="{Binding SortByType, UpdateSourceTrigger=PropertyChanged}"
                            Linq:MenuItemExtensions.GroupName="SortName"
                            StaysOpenOnClick="True"/>
                        <Separator/>
                        <MenuItem 
                            Header="{l:Loc Imagin.Controls.Common.Wpf:Main:Ascending}" 
                            IsCheckable="True" 
                            IsChecked="{Binding IsSortAscending, UpdateSourceTrigger=PropertyChanged}" 
                            Linq:MenuItemExtensions.GroupName="SortDirection"
                            StaysOpenOnClick="True"/>
                        <MenuItem 
                            Header="{l:Loc Imagin.Controls.Common.Wpf:Main:Descending}"
                            IsCheckable="True" 
                            IsChecked="{Binding IsSortDescending, UpdateSourceTrigger=PropertyChanged}" 
                            Linq:MenuItemExtensions.GroupName="SortDirection"
                            StaysOpenOnClick="True"/>
                    </ContextMenu>
                </local:MaskedDropDownButton.DropDown>
            </local:MaskedDropDownButton>
            
            <!-- Search -->
            <local:MaskedImage
                Grid.Column="4"
                Source="pack://application:,,,/Imagin.Controls.Common.Wpf;component/Images/Search.png"/>
            <local:TextBox
                Grid.Column="5"
                IsClearEnabled="True"
                Padding="0"
                Placeholder="{l:Loc Imagin.Controls.Common.Wpf:Main:Search}"
                Text="{Binding SearchQuery, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                ToolTip="{l:Loc Imagin.Controls.Common.Wpf:Main:Search}"
                Background="Transparent"
                BorderThickness="0"/>

            <!-- Options -->
            <local:MaskedDropDownButton
                Grid.Column="6"
                Padding="5,0"
                Source="pack://application:,,,/Imagin.Controls.Common.Wpf;component/Images/ArrowDown.png"
                ToolTip="{l:Loc Imagin.Controls.Common.Wpf:Main:Options}"
                VerticalAlignment="Stretch"
                VerticalContentAlignment="Center">
                <local:MaskedDropDownButton.DropDown>
                    <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                        <MenuItem 
                            Header="{l:Loc Imagin.Controls.Common.Wpf:Main:CollapseGroups}" 
                            IsCheckable="True"
                            IsChecked="{Binding CollapseGroups}"
                            StaysOpenOnClick="True"/>
                        <Separator/>
                        <MenuItem 
                            Header="{l:Loc Imagin.Controls.Common.Wpf:Main:Disconnect}" 
                            Command="{Binding DisconnectSourceCommand}"/>
                        <MenuItem 
                            Header="{l:Loc Imagin.Controls.Common.Wpf:Main:Reset}" 
                            Command="{Binding ResetSourceCommand}"/>
                    </ContextMenu>
                </local:MaskedDropDownButton.DropDown>
            </local:MaskedDropDownButton>
        </Grid>

        <!-- ....................................................... Body -->
        
        <Grid
            Grid.Row="1">
            <!-- ................................................... Loader -->
            <ContentControl
                ContentTemplate="{Binding LoaderTemplate}"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                
            <Grid
                Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Inverted}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- ............................................... Type -->
                <Grid  
                    Margin="10,5"
                    Visibility="{Binding Source, Converter={StaticResource NullToVisibilityConverter}}">
                    <ContentControl
                        Content="{Binding Source, Mode=OneWay}"
                        ContentStringFormat="{Binding TypeStringFormat}"
                        ContentTemplate="{Binding TypeTemplate}"
                        ContentTemplateSelector="{Binding TypeTemplateSelector}"
                        Visibility="{Binding ShowType, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                </Grid>

                <!-- ............................................... Featured -->
                <Grid 
                    Grid.Row="1"
                    Margin="10,5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.Visibility>
                        <MultiBinding Converter="{StaticResource FeaturedPropertyVisibilityConverter}">
                            <Binding Path="ShowFeatured"/>
                            <Binding Path="Properties.Featured"/>
                        </MultiBinding>
                    </Grid.Visibility>

                    <local:LocalizedTextBlock
                        Margin="0,0,10,0" 
                        Text="{Binding Properties.Featured.DisplayName, Mode=OneWay}"
                        VerticalAlignment="Center"/>
                    <local:PropertyView
                        Grid.Column="1"
                        Property="{Binding Properties.Featured, Mode=OneWay}"/>
                </Grid>

                <!-- ............................................... DataGrid -->
                <DataGrid
                    Grid.Row="2"
                    AutoGenerateColumns="False"
                    CanUserAddRows="False"
                    CanUserDeleteRows="False"
                    CellStyle="{StaticResource Style.Cell}"
                    GridLinesVisibility="{Binding GridLinesVisibility}"
                    HeadersVisibility="{Binding HeadersVisibility}"
                    IsEnabled="{Binding IsSourceEnabled}"
                    ItemContainerStyle="{StaticResource Style.DataGrid.Row}"
                    ItemsSource="{Binding ListCollectionView, IsAsync=True}"
                    ScrollViewer.HorizontalScrollBarVisibility="Auto"
                    ScrollViewer.VerticalScrollBarVisibility="Auto"
                    SelectedValue="{Binding Properties.ActiveProperty, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    SelectionMode="Single"
                    Style="{Binding DataGridStyle}">
                    <DataGrid.Columns>
                        <DataGridTemplateColumn
                            Header="Name"
                            SortMemberPath="DisplayName" 
                            Width="{Binding Data.PropertyColumnWidth, Source={StaticResource BindingProxy}}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <local:LocalizedTextBlock
                                        Text="{Binding DisplayName, Mode=OneWay}"
                                        TextTrimming="CharacterEllipsis"
                                        ToolTip="{Binding LocalizedText, Mode=OneWay, RelativeSource={RelativeSource Self}}"
                                        VerticalAlignment="Center"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn 
                            Header="Value" 
                            Width="{Binding Data.ValueColumnWidth, Source={StaticResource BindingProxy}}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <local:PropertyView
                                        Property="{Binding Mode=OneWay}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                    <DataGrid.GroupStyle>
                        <GroupStyle>
                            <GroupStyle.ContainerStyle>
                                <Style TargetType="GroupItem">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type GroupItem}">
                                                <Expander 
                                                    IsExpanded="{Binding CollapseGroups, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type local:PropertyGrid}}, Converter={StaticResource InverseBooleanConverter}}" 
                                                    HorizontalAlignment="Stretch">
                                                    <Expander.Header>
                                                        <StackPanel Orientation="Horizontal">
                                                            <TextBlock
                                                                Text="{Binding Name, Mode=OneWay}"/>
                                                            <TextBlock 
                                                                Opacity="0.5"
                                                                Text="{Binding ItemCount, Mode=OneWay, StringFormat={} ({0})}"/>
                                                        </StackPanel>
                                                    </Expander.Header>
                                                    <ItemsPresenter/>
                                                </Expander>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </GroupStyle.ContainerStyle>
                            <GroupStyle.Panel>
                                <ItemsPanelTemplate>
                                    <DataGridRowsPresenter/>
                                </ItemsPanelTemplate>
                            </GroupStyle.Panel>
                        </GroupStyle>
                    </DataGrid.GroupStyle>
                </DataGrid>
            </Grid>
        </Grid>
        
        <!-- ....................................................... Footer -->
        
        <GridSplitter
            Grid.Row="2"
            x:Name="PART_GridSplitter"
            ResizeDirection="Rows"
            Style="{Binding SplitterStyle}"/>
        <ContentControl 
            Grid.Row="3"
            Content="{Binding Properties.ActiveProperty}"
            ContentStringFormat="{Binding DescriptionStringFormat}"
            ContentTemplate="{Binding DescriptionTemplate}"
            ContentTemplateSelector="{Binding DescriptionTemplateSelector}"
            Visibility="{Binding DescriptionVisibility}"/>
    </Grid>
</UserControl>
