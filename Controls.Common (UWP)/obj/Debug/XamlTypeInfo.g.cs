//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks","14.0.0.0")]
    public sealed class XamlMetaDataProvider: global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[52];
            _typeNameTable[0] = "Imagin.Common.Data.DateTimeToDateTimeOffsetConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[3] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[4] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[5] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[6] = "Microsoft.Xaml.Interactions.Core.DataTriggerBehavior";
            _typeNameTable[7] = "Microsoft.Xaml.Interactivity.Trigger";
            _typeNameTable[8] = "Microsoft.Xaml.Interactivity.Behavior";
            _typeNameTable[9] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[10] = "Microsoft.Xaml.Interactions.Core.ComparisonConditionType";
            _typeNameTable[11] = "System.Enum";
            _typeNameTable[12] = "System.ValueType";
            _typeNameTable[13] = "Microsoft.Xaml.Interactions.Core.ChangePropertyAction";
            _typeNameTable[14] = "Windows.UI.Xaml.PropertyPath";
            _typeNameTable[15] = "Imagin.Controls.Common.DateTimePicker";
            _typeNameTable[16] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[17] = "System.DateTime";
            _typeNameTable[18] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[19] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[20] = "Imagin.Controls.Common.FlagCheckView";
            _typeNameTable[21] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[22] = "System.Collections.ObjectModel.ObservableCollection`1<Imagin.Common.CheckableObject`1<Object>>";
            _typeNameTable[23] = "System.Collections.ObjectModel.Collection`1<Imagin.Common.CheckableObject`1<Object>>";
            _typeNameTable[24] = "Imagin.Common.CheckableObject`1<Object>";
            _typeNameTable[25] = "Imagin.Common.CheckableObject";
            _typeNameTable[26] = "Imagin.Common.BindableObject";
            _typeNameTable[27] = "System.Nullable`1<Boolean>";
            _typeNameTable[28] = "Windows.UI.Xaml.Controls.ItemsPanelTemplate";
            _typeNameTable[29] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[30] = "Imagin.Controls.Common.LLMListView";
            _typeNameTable[31] = "Windows.UI.Xaml.Controls.ListView";
            _typeNameTable[32] = "Windows.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[33] = "System.Action";
            _typeNameTable[34] = "System.MulticastDelegate";
            _typeNameTable[35] = "System.Delegate";
            _typeNameTable[36] = "Boolean";
            _typeNameTable[37] = "Double";
            _typeNameTable[38] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[39] = "Windows.UI.Xaml.Controls.IconElement";
            _typeNameTable[40] = "Int32";
            _typeNameTable[41] = "Imagin.Controls.Common.SwipeMode";
            _typeNameTable[42] = "Windows.UI.Xaml.Media.Animation.EasingFunctionBase";
            _typeNameTable[43] = "String";
            _typeNameTable[44] = "Imagin.Controls.Common.LLMListViewItem";
            _typeNameTable[45] = "Windows.UI.Xaml.Controls.ListViewItem";
            _typeNameTable[46] = "Imagin.Controls.Common.SwipeConfig";
            _typeNameTable[47] = "Windows.UI.Xaml.Input.ManipulationModes";
            _typeNameTable[48] = "XP.XPButton";
            _typeNameTable[49] = "Windows.UI.Xaml.Controls.Button";
            _typeNameTable[50] = "Windows.UI.Xaml.CornerRadius";
            _typeNameTable[51] = "XP.IconPosition";

            _typeTable = new global::System.Type[52];
            _typeTable[0] = typeof(global::Imagin.Common.Data.DateTimeToDateTimeOffsetConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[3] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[6] = typeof(global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior);
            _typeTable[7] = typeof(global::Microsoft.Xaml.Interactivity.Trigger);
            _typeTable[8] = typeof(global::Microsoft.Xaml.Interactivity.Behavior);
            _typeTable[9] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[10] = typeof(global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType);
            _typeTable[11] = typeof(global::System.Enum);
            _typeTable[12] = typeof(global::System.ValueType);
            _typeTable[13] = typeof(global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.PropertyPath);
            _typeTable[15] = typeof(global::Imagin.Controls.Common.DateTimePicker);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[17] = typeof(global::System.DateTime);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[20] = typeof(global::Imagin.Controls.Common.FlagCheckView);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[22] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Imagin.Common.CheckableObject<global::System.Object>>);
            _typeTable[23] = typeof(global::System.Collections.ObjectModel.Collection<global::Imagin.Common.CheckableObject<global::System.Object>>);
            _typeTable[24] = typeof(global::Imagin.Common.CheckableObject<global::System.Object>);
            _typeTable[25] = typeof(global::Imagin.Common.CheckableObject);
            _typeTable[26] = typeof(global::Imagin.Common.BindableObject);
            _typeTable[27] = typeof(global::System.Nullable<global::System.Boolean>);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Controls.ItemsPanelTemplate);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[30] = typeof(global::Imagin.Controls.Common.LLMListView);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.Controls.ListView);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
            _typeTable[33] = typeof(global::System.Action);
            _typeTable[34] = typeof(global::System.MulticastDelegate);
            _typeTable[35] = typeof(global::System.Delegate);
            _typeTable[36] = typeof(global::System.Boolean);
            _typeTable[37] = typeof(global::System.Double);
            _typeTable[38] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[39] = typeof(global::Windows.UI.Xaml.Controls.IconElement);
            _typeTable[40] = typeof(global::System.Int32);
            _typeTable[41] = typeof(global::Imagin.Controls.Common.SwipeMode);
            _typeTable[42] = typeof(global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase);
            _typeTable[43] = typeof(global::System.String);
            _typeTable[44] = typeof(global::Imagin.Controls.Common.LLMListViewItem);
            _typeTable[45] = typeof(global::Windows.UI.Xaml.Controls.ListViewItem);
            _typeTable[46] = typeof(global::Imagin.Controls.Common.SwipeConfig);
            _typeTable[47] = typeof(global::Windows.UI.Xaml.Input.ManipulationModes);
            _typeTable[48] = typeof(global::XP.XPButton);
            _typeTable[49] = typeof(global::Windows.UI.Xaml.Controls.Button);
            _typeTable[50] = typeof(global::Windows.UI.Xaml.CornerRadius);
            _typeTable[51] = typeof(global::XP.IconPosition);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_DateTimeToDateTimeOffsetConverter() { return new global::Imagin.Common.Data.DateTimeToDateTimeOffsetConverter(); }
        private object Activate_3_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_6_DataTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior(); }
        private object Activate_9_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_13_ChangePropertyAction() { return new global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction(); }
        private object Activate_15_DateTimePicker() { return new global::Imagin.Controls.Common.DateTimePicker(); }
        private object Activate_20_FlagCheckView() { return new global::Imagin.Controls.Common.FlagCheckView(); }
        private object Activate_22_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Imagin.Common.CheckableObject<global::System.Object>>(); }
        private object Activate_23_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Imagin.Common.CheckableObject<global::System.Object>>(); }
        private object Activate_24_CheckableObject() { return new global::Imagin.Common.CheckableObject<global::System.Object>(); }
        private object Activate_25_CheckableObject() { return new global::Imagin.Common.CheckableObject(); }
        private object Activate_30_LLMListView() { return new global::Imagin.Controls.Common.LLMListView(); }
        private object Activate_44_LLMListViewItem() { return new global::Imagin.Controls.Common.LLMListViewItem(); }
        private object Activate_46_SwipeConfig() { return new global::Imagin.Controls.Common.SwipeConfig(); }
        private object Activate_48_XPButton() { return new global::XP.XPButton(); }
        private void VectorAdd_3_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_9_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Imagin.Common.CheckableObject<global::System.Object>>)instance;
            var newItem = (global::Imagin.Common.CheckableObject<global::System.Object>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_23_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Imagin.Common.CheckableObject<global::System.Object>>)instance;
            var newItem = (global::Imagin.Common.CheckableObject<global::System.Object>)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Imagin.Common.Data.DateTimeToDateTimeOffsetConverter
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_DateTimeToDateTimeOffsetConverter;
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 3:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_3_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Microsoft.Xaml.Interactions.Core.DataTriggerBehavior
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Trigger"));
                userType.Activator = Activate_6_DataTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactivity.Trigger.Actions");
                userType.AddMemberName("Binding");
                userType.AddMemberName("Value");
                userType.AddMemberName("ComparisonCondition");
                xamlType = userType;
                break;

            case 7:   //  Microsoft.Xaml.Interactivity.Trigger
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior"));
                userType.SetContentPropertyName("Microsoft.Xaml.Interactivity.Trigger.Actions");
                userType.AddMemberName("Actions");
                xamlType = userType;
                break;

            case 8:   //  Microsoft.Xaml.Interactivity.Behavior
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 9:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_9_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 10:   //  Microsoft.Xaml.Interactions.Core.ComparisonConditionType
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Equal", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.Equal);
                userType.AddEnumValue("NotEqual", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.NotEqual);
                userType.AddEnumValue("LessThan", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.LessThan);
                userType.AddEnumValue("LessThanOrEqual", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.LessThanOrEqual);
                userType.AddEnumValue("GreaterThan", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.GreaterThan);
                userType.AddEnumValue("GreaterThanOrEqual", global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType.GreaterThanOrEqual);
                xamlType = userType;
                break;

            case 11:   //  System.Enum
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 12:   //  System.ValueType
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 13:   //  Microsoft.Xaml.Interactions.Core.ChangePropertyAction
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_13_ChangePropertyAction;
                userType.AddMemberName("PropertyName");
                userType.AddMemberName("Value");
                userType.AddMemberName("TargetObject");
                xamlType = userType;
                break;

            case 14:   //  Windows.UI.Xaml.PropertyPath
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Imagin.Controls.Common.DateTimePicker
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_15_DateTimePicker;
                userType.AddMemberName("DateTime");
                userType.AddMemberName("Orientation");
                userType.AddMemberName("TimeVisibility");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  System.DateTime
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Imagin.Controls.Common.FlagCheckView
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_20_FlagCheckView;
                userType.AddMemberName("Flags");
                userType.AddMemberName("Items");
                userType.AddMemberName("ItemsPanel");
                userType.AddMemberName("ItemTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  System.Collections.ObjectModel.ObservableCollection`1<Imagin.Common.CheckableObject`1<Object>>
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Imagin.Common.CheckableObject`1<Object>>"));
                userType.CollectionAdd = VectorAdd_22_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  System.Collections.ObjectModel.Collection`1<Imagin.Common.CheckableObject`1<Object>>
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_23_Collection;
                userType.CollectionAdd = VectorAdd_23_Collection;
                xamlType = userType;
                break;

            case 24:   //  Imagin.Common.CheckableObject`1<Object>
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Imagin.Common.CheckableObject"));
                userType.Activator = Activate_24_CheckableObject;
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 25:   //  Imagin.Common.CheckableObject
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Imagin.Common.BindableObject"));
                userType.Activator = Activate_25_CheckableObject;
                userType.AddMemberName("IsChecked");
                xamlType = userType;
                break;

            case 26:   //  Imagin.Common.BindableObject
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 27:   //  System.Nullable`1<Boolean>
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 28:   //  Windows.UI.Xaml.Controls.ItemsPanelTemplate
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Imagin.Controls.Common.LLMListView
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListView"));
                userType.Activator = Activate_30_LLMListView;
                userType.AddMemberName("Refresh");
                userType.AddMemberName("LoadMore");
                userType.AddMemberName("FloatButtonAction");
                userType.AddMemberName("CanPullToRefresh");
                userType.AddMemberName("RefreshAreaHeight");
                userType.AddMemberName("RefreshProgressRingBrush");
                userType.AddMemberName("RefreshProgressBarBrush");
                userType.AddMemberName("LoadMoreProgressBarBrush");
                userType.AddMemberName("FloatButtonForeground");
                userType.AddMemberName("FloatButtonBackground");
                userType.AddMemberName("FloatButtonVisibility");
                userType.AddMemberName("FloatButtonIcon");
                userType.AddMemberName("EmptyDataTemplate");
                userType.AddMemberName("ScrollOffsetOfLoadMoreTrigger");
                userType.AddMemberName("IsItemSwipeEnabled");
                userType.AddMemberName("ItemLeftSwipeContentTemplate");
                userType.AddMemberName("ItemRightSwipeContentTemplate");
                userType.AddMemberName("ItemBackAnimDuration");
                userType.AddMemberName("ItemLeftSwipeMode");
                userType.AddMemberName("ItemLeftBackAnimEasingFunction");
                userType.AddMemberName("ItemLeftSwipeLengthRate");
                userType.AddMemberName("ItemLeftSwipeMaxLength");
                userType.AddMemberName("ItemLeftActionRateForSwipeLength");
                userType.AddMemberName("ItemRightSwipeMode");
                userType.AddMemberName("ItemRightBackAnimEasingFunction");
                userType.AddMemberName("ItemRightSwipeLengthRate");
                userType.AddMemberName("ItemRightSwipeMaxLength");
                userType.AddMemberName("ItemRightActionRateForSwipeLength");
                userType.AddMemberName("IsSwipedRightMemberPath");
                userType.AddMemberName("IsSwipedLeftMemberPath");
                userType.AddMemberName("EnableSwipeRightMemberPath");
                userType.AddMemberName("EnableSwipeLeftMemberPath");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Windows.UI.Xaml.Controls.ListView
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  System.Action
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  System.MulticastDelegate
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 35:   //  System.Delegate
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 36:   //  Boolean
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  Double
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 39:   //  Windows.UI.Xaml.Controls.IconElement
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Int32
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 41:   //  Imagin.Controls.Common.SwipeMode
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Imagin.Controls.Common.SwipeMode.None);
                userType.AddEnumValue("Fix", global::Imagin.Controls.Common.SwipeMode.Fix);
                userType.AddEnumValue("Collapse", global::Imagin.Controls.Common.SwipeMode.Collapse);
                userType.AddEnumValue("Expand", global::Imagin.Controls.Common.SwipeMode.Expand);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  Windows.UI.Xaml.Media.Animation.EasingFunctionBase
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  String
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  Imagin.Controls.Common.LLMListViewItem
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListViewItem"));
                userType.Activator = Activate_44_LLMListViewItem;
                userType.AddMemberName("Config");
                userType.AddMemberName("IsSwipedRightMemberPath");
                userType.AddMemberName("IsSwipedRight");
                userType.AddMemberName("IsSwipedLeftMemberPath");
                userType.AddMemberName("IsSwipedLeft");
                userType.AddMemberName("EnableSwipeRightMemberPath");
                userType.AddMemberName("EnableSwipeRight");
                userType.AddMemberName("EnableSwipeLeftMemberPath");
                userType.AddMemberName("EnableSwipeLeft");
                userType.AddMemberName("IsSwipeEnabled");
                userType.AddMemberName("ItemManipulationMode");
                userType.AddMemberName("LeftSwipeContentTemplate");
                userType.AddMemberName("RightSwipeContentTemplate");
                userType.AddMemberName("BackAnimDuration");
                userType.AddMemberName("LeftSwipeMode");
                userType.AddMemberName("LeftBackAnimEasingFunction");
                userType.AddMemberName("LeftSwipeMaxLength");
                userType.AddMemberName("LeftSwipeLengthRate");
                userType.AddMemberName("LeftActionRateForSwipeLength");
                userType.AddMemberName("ActualLeftSwipeLengthRate");
                userType.AddMemberName("RightSwipeMode");
                userType.AddMemberName("RightSwipeMaxLength");
                userType.AddMemberName("RightSwipeLengthRate");
                userType.AddMemberName("ActualRightSwipeLengthRate");
                userType.AddMemberName("RightActionRateForSwipeLength");
                userType.AddMemberName("RightBackAnimEasingFunction");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  Windows.UI.Xaml.Controls.ListViewItem
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 46:   //  Imagin.Controls.Common.SwipeConfig
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  Windows.UI.Xaml.Input.ManipulationModes
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 48:   //  XP.XPButton
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_48_XPButton;
                userType.AddMemberName("CornerRadius");
                userType.AddMemberName("Icon");
                userType.AddMemberName("IconPosition");
                userType.AddMemberName("IconSize");
                userType.AddMemberName("IconInterval");
                userType.AddMemberName("IconForeground");
                userType.AddMemberName("PointerOverBackground");
                userType.AddMemberName("PointerOverTextForeground");
                userType.AddMemberName("PointerOverIconForeground");
                userType.AddMemberName("PointerOverBorderBrush");
                userType.AddMemberName("PressedBackground");
                userType.AddMemberName("PressedTextForeground");
                userType.AddMemberName("PressedIconForeground");
                userType.AddMemberName("PressedBorderBrush");
                userType.AddMemberName("DisabledBackground");
                userType.AddMemberName("DisabledTextForeground");
                userType.AddMemberName("DisabledIconForeground");
                userType.AddMemberName("DisabledBorderBrush");
                xamlType = userType;
                break;

            case 49:   //  Windows.UI.Xaml.Controls.Button
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 50:   //  Windows.UI.Xaml.CornerRadius
                xamlType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  XP.IconPosition
                userType = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::XP.IconPosition.Left);
                userType.AddEnumValue("Right", global::XP.IconPosition.Right);
                userType.AddEnumValue("Top", global::XP.IconPosition.Top);
                userType.AddEnumValue("Bottom", global::XP.IconPosition.Bottom);
                userType.AddEnumValue("NoIcon", global::XP.IconPosition.NoIcon);
                userType.AddEnumValue("OnlyIcon", global::XP.IconPosition.OnlyIcon);
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::XP.XPButton_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_0_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_1_Trigger_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Trigger)instance;
            return that.Actions;
        }
        private object get_2_DataTriggerBehavior_Binding(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            return that.Binding;
        }
        private void set_2_DataTriggerBehavior_Binding(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            that.Binding = (global::System.Object)Value;
        }
        private object get_3_DataTriggerBehavior_Value(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            return that.Value;
        }
        private void set_3_DataTriggerBehavior_Value(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            that.Value = (global::System.Object)Value;
        }
        private object get_4_DataTriggerBehavior_ComparisonCondition(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            return that.ComparisonCondition;
        }
        private void set_4_DataTriggerBehavior_ComparisonCondition(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.DataTriggerBehavior)instance;
            that.ComparisonCondition = (global::Microsoft.Xaml.Interactions.Core.ComparisonConditionType)Value;
        }
        private object get_5_Behavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Behavior)instance;
            return that.AssociatedObject;
        }
        private object get_6_ChangePropertyAction_PropertyName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            return that.PropertyName;
        }
        private void set_6_ChangePropertyAction_PropertyName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            that.PropertyName = (global::Windows.UI.Xaml.PropertyPath)Value;
        }
        private object get_7_ChangePropertyAction_Value(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            return that.Value;
        }
        private void set_7_ChangePropertyAction_Value(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            that.Value = (global::System.Object)Value;
        }
        private object get_8_ChangePropertyAction_TargetObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            return that.TargetObject;
        }
        private void set_8_ChangePropertyAction_TargetObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            that.TargetObject = (global::System.Object)Value;
        }
        private object get_9_DateTimePicker_DateTime(object instance)
        {
            var that = (global::Imagin.Controls.Common.DateTimePicker)instance;
            return that.DateTime;
        }
        private void set_9_DateTimePicker_DateTime(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.DateTimePicker)instance;
            that.DateTime = (global::System.DateTime)Value;
        }
        private object get_10_DateTimePicker_Orientation(object instance)
        {
            var that = (global::Imagin.Controls.Common.DateTimePicker)instance;
            return that.Orientation;
        }
        private void set_10_DateTimePicker_Orientation(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.DateTimePicker)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_11_DateTimePicker_TimeVisibility(object instance)
        {
            var that = (global::Imagin.Controls.Common.DateTimePicker)instance;
            return that.TimeVisibility;
        }
        private void set_11_DateTimePicker_TimeVisibility(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.DateTimePicker)instance;
            that.TimeVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_12_FlagCheckView_Flags(object instance)
        {
            var that = (global::Imagin.Controls.Common.FlagCheckView)instance;
            return that.Flags;
        }
        private void set_12_FlagCheckView_Flags(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.FlagCheckView)instance;
            that.Flags = (global::System.Object)Value;
        }
        private object get_13_FlagCheckView_Items(object instance)
        {
            var that = (global::Imagin.Controls.Common.FlagCheckView)instance;
            return that.Items;
        }
        private object get_14_CheckableObject_Value(object instance)
        {
            var that = (global::Imagin.Common.CheckableObject<global::System.Object>)instance;
            return that.Value;
        }
        private void set_14_CheckableObject_Value(object instance, object Value)
        {
            var that = (global::Imagin.Common.CheckableObject<global::System.Object>)instance;
            that.Value = (global::System.Object)Value;
        }
        private object get_15_CheckableObject_IsChecked(object instance)
        {
            var that = (global::Imagin.Common.CheckableObject)instance;
            return that.IsChecked;
        }
        private void set_15_CheckableObject_IsChecked(object instance, object Value)
        {
            var that = (global::Imagin.Common.CheckableObject)instance;
            that.IsChecked = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_16_FlagCheckView_ItemsPanel(object instance)
        {
            var that = (global::Imagin.Controls.Common.FlagCheckView)instance;
            return that.ItemsPanel;
        }
        private void set_16_FlagCheckView_ItemsPanel(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.FlagCheckView)instance;
            that.ItemsPanel = (global::Windows.UI.Xaml.Controls.ItemsPanelTemplate)Value;
        }
        private object get_17_FlagCheckView_ItemTemplate(object instance)
        {
            var that = (global::Imagin.Controls.Common.FlagCheckView)instance;
            return that.ItemTemplate;
        }
        private void set_17_FlagCheckView_ItemTemplate(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.FlagCheckView)instance;
            that.ItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_18_LLMListView_Refresh(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.Refresh;
        }
        private void set_18_LLMListView_Refresh(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.Refresh = (global::System.Action)Value;
        }
        private object get_19_LLMListView_LoadMore(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.LoadMore;
        }
        private void set_19_LLMListView_LoadMore(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.LoadMore = (global::System.Action)Value;
        }
        private object get_20_LLMListView_FloatButtonAction(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.FloatButtonAction;
        }
        private void set_20_LLMListView_FloatButtonAction(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.FloatButtonAction = (global::System.Action)Value;
        }
        private object get_21_LLMListView_CanPullToRefresh(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.CanPullToRefresh;
        }
        private void set_21_LLMListView_CanPullToRefresh(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.CanPullToRefresh = (global::System.Boolean)Value;
        }
        private object get_22_LLMListView_RefreshAreaHeight(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.RefreshAreaHeight;
        }
        private void set_22_LLMListView_RefreshAreaHeight(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.RefreshAreaHeight = (global::System.Double)Value;
        }
        private object get_23_LLMListView_RefreshProgressRingBrush(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.RefreshProgressRingBrush;
        }
        private void set_23_LLMListView_RefreshProgressRingBrush(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.RefreshProgressRingBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_24_LLMListView_RefreshProgressBarBrush(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.RefreshProgressBarBrush;
        }
        private void set_24_LLMListView_RefreshProgressBarBrush(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.RefreshProgressBarBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_25_LLMListView_LoadMoreProgressBarBrush(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.LoadMoreProgressBarBrush;
        }
        private void set_25_LLMListView_LoadMoreProgressBarBrush(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.LoadMoreProgressBarBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_26_LLMListView_FloatButtonForeground(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.FloatButtonForeground;
        }
        private void set_26_LLMListView_FloatButtonForeground(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.FloatButtonForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_27_LLMListView_FloatButtonBackground(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.FloatButtonBackground;
        }
        private void set_27_LLMListView_FloatButtonBackground(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.FloatButtonBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_28_LLMListView_FloatButtonVisibility(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.FloatButtonVisibility;
        }
        private void set_28_LLMListView_FloatButtonVisibility(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.FloatButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_29_LLMListView_FloatButtonIcon(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.FloatButtonIcon;
        }
        private void set_29_LLMListView_FloatButtonIcon(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.FloatButtonIcon = (global::Windows.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_30_LLMListView_EmptyDataTemplate(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.EmptyDataTemplate;
        }
        private void set_30_LLMListView_EmptyDataTemplate(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.EmptyDataTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_31_LLMListView_ScrollOffsetOfLoadMoreTrigger(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ScrollOffsetOfLoadMoreTrigger;
        }
        private void set_31_LLMListView_ScrollOffsetOfLoadMoreTrigger(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ScrollOffsetOfLoadMoreTrigger = (global::System.Int32)Value;
        }
        private object get_32_LLMListView_IsItemSwipeEnabled(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.IsItemSwipeEnabled;
        }
        private void set_32_LLMListView_IsItemSwipeEnabled(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.IsItemSwipeEnabled = (global::System.Boolean)Value;
        }
        private object get_33_LLMListView_ItemLeftSwipeContentTemplate(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemLeftSwipeContentTemplate;
        }
        private void set_33_LLMListView_ItemLeftSwipeContentTemplate(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemLeftSwipeContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_34_LLMListView_ItemRightSwipeContentTemplate(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemRightSwipeContentTemplate;
        }
        private void set_34_LLMListView_ItemRightSwipeContentTemplate(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemRightSwipeContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_35_LLMListView_ItemBackAnimDuration(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemBackAnimDuration;
        }
        private void set_35_LLMListView_ItemBackAnimDuration(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemBackAnimDuration = (global::System.Int32)Value;
        }
        private object get_36_LLMListView_ItemLeftSwipeMode(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemLeftSwipeMode;
        }
        private void set_36_LLMListView_ItemLeftSwipeMode(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemLeftSwipeMode = (global::Imagin.Controls.Common.SwipeMode)Value;
        }
        private object get_37_LLMListView_ItemLeftBackAnimEasingFunction(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemLeftBackAnimEasingFunction;
        }
        private void set_37_LLMListView_ItemLeftBackAnimEasingFunction(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemLeftBackAnimEasingFunction = (global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase)Value;
        }
        private object get_38_LLMListView_ItemLeftSwipeLengthRate(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemLeftSwipeLengthRate;
        }
        private void set_38_LLMListView_ItemLeftSwipeLengthRate(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemLeftSwipeLengthRate = (global::System.Double)Value;
        }
        private object get_39_LLMListView_ItemLeftSwipeMaxLength(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemLeftSwipeMaxLength;
        }
        private void set_39_LLMListView_ItemLeftSwipeMaxLength(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemLeftSwipeMaxLength = (global::System.Double)Value;
        }
        private object get_40_LLMListView_ItemLeftActionRateForSwipeLength(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemLeftActionRateForSwipeLength;
        }
        private void set_40_LLMListView_ItemLeftActionRateForSwipeLength(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemLeftActionRateForSwipeLength = (global::System.Double)Value;
        }
        private object get_41_LLMListView_ItemRightSwipeMode(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemRightSwipeMode;
        }
        private void set_41_LLMListView_ItemRightSwipeMode(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemRightSwipeMode = (global::Imagin.Controls.Common.SwipeMode)Value;
        }
        private object get_42_LLMListView_ItemRightBackAnimEasingFunction(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemRightBackAnimEasingFunction;
        }
        private void set_42_LLMListView_ItemRightBackAnimEasingFunction(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemRightBackAnimEasingFunction = (global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase)Value;
        }
        private object get_43_LLMListView_ItemRightSwipeLengthRate(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemRightSwipeLengthRate;
        }
        private void set_43_LLMListView_ItemRightSwipeLengthRate(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemRightSwipeLengthRate = (global::System.Double)Value;
        }
        private object get_44_LLMListView_ItemRightSwipeMaxLength(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemRightSwipeMaxLength;
        }
        private void set_44_LLMListView_ItemRightSwipeMaxLength(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemRightSwipeMaxLength = (global::System.Double)Value;
        }
        private object get_45_LLMListView_ItemRightActionRateForSwipeLength(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.ItemRightActionRateForSwipeLength;
        }
        private void set_45_LLMListView_ItemRightActionRateForSwipeLength(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.ItemRightActionRateForSwipeLength = (global::System.Double)Value;
        }
        private object get_46_LLMListView_IsSwipedRightMemberPath(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.IsSwipedRightMemberPath;
        }
        private void set_46_LLMListView_IsSwipedRightMemberPath(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.IsSwipedRightMemberPath = (global::System.String)Value;
        }
        private object get_47_LLMListView_IsSwipedLeftMemberPath(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.IsSwipedLeftMemberPath;
        }
        private void set_47_LLMListView_IsSwipedLeftMemberPath(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.IsSwipedLeftMemberPath = (global::System.String)Value;
        }
        private object get_48_LLMListView_EnableSwipeRightMemberPath(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.EnableSwipeRightMemberPath;
        }
        private void set_48_LLMListView_EnableSwipeRightMemberPath(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.EnableSwipeRightMemberPath = (global::System.String)Value;
        }
        private object get_49_LLMListView_EnableSwipeLeftMemberPath(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            return that.EnableSwipeLeftMemberPath;
        }
        private void set_49_LLMListView_EnableSwipeLeftMemberPath(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListView)instance;
            that.EnableSwipeLeftMemberPath = (global::System.String)Value;
        }
        private object get_50_LLMListViewItem_Config(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.Config;
        }
        private object get_51_LLMListViewItem_IsSwipedRightMemberPath(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.IsSwipedRightMemberPath;
        }
        private void set_51_LLMListViewItem_IsSwipedRightMemberPath(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.IsSwipedRightMemberPath = (global::System.String)Value;
        }
        private object get_52_LLMListViewItem_IsSwipedRight(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.IsSwipedRight;
        }
        private void set_52_LLMListViewItem_IsSwipedRight(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.IsSwipedRight = (global::System.Boolean)Value;
        }
        private object get_53_LLMListViewItem_IsSwipedLeftMemberPath(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.IsSwipedLeftMemberPath;
        }
        private void set_53_LLMListViewItem_IsSwipedLeftMemberPath(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.IsSwipedLeftMemberPath = (global::System.String)Value;
        }
        private object get_54_LLMListViewItem_IsSwipedLeft(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.IsSwipedLeft;
        }
        private void set_54_LLMListViewItem_IsSwipedLeft(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.IsSwipedLeft = (global::System.Boolean)Value;
        }
        private object get_55_LLMListViewItem_EnableSwipeRightMemberPath(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.EnableSwipeRightMemberPath;
        }
        private void set_55_LLMListViewItem_EnableSwipeRightMemberPath(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.EnableSwipeRightMemberPath = (global::System.String)Value;
        }
        private object get_56_LLMListViewItem_EnableSwipeRight(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.EnableSwipeRight;
        }
        private void set_56_LLMListViewItem_EnableSwipeRight(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.EnableSwipeRight = (global::System.Boolean)Value;
        }
        private object get_57_LLMListViewItem_EnableSwipeLeftMemberPath(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.EnableSwipeLeftMemberPath;
        }
        private void set_57_LLMListViewItem_EnableSwipeLeftMemberPath(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.EnableSwipeLeftMemberPath = (global::System.String)Value;
        }
        private object get_58_LLMListViewItem_EnableSwipeLeft(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.EnableSwipeLeft;
        }
        private void set_58_LLMListViewItem_EnableSwipeLeft(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.EnableSwipeLeft = (global::System.Boolean)Value;
        }
        private object get_59_LLMListViewItem_IsSwipeEnabled(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.IsSwipeEnabled;
        }
        private void set_59_LLMListViewItem_IsSwipeEnabled(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.IsSwipeEnabled = (global::System.Boolean)Value;
        }
        private object get_60_LLMListViewItem_ItemManipulationMode(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.ItemManipulationMode;
        }
        private void set_60_LLMListViewItem_ItemManipulationMode(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.ItemManipulationMode = (global::Windows.UI.Xaml.Input.ManipulationModes)Value;
        }
        private object get_61_LLMListViewItem_LeftSwipeContentTemplate(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.LeftSwipeContentTemplate;
        }
        private void set_61_LLMListViewItem_LeftSwipeContentTemplate(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.LeftSwipeContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_62_LLMListViewItem_RightSwipeContentTemplate(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.RightSwipeContentTemplate;
        }
        private void set_62_LLMListViewItem_RightSwipeContentTemplate(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.RightSwipeContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_63_LLMListViewItem_BackAnimDuration(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.BackAnimDuration;
        }
        private void set_63_LLMListViewItem_BackAnimDuration(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.BackAnimDuration = (global::System.Int32)Value;
        }
        private object get_64_LLMListViewItem_LeftSwipeMode(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.LeftSwipeMode;
        }
        private void set_64_LLMListViewItem_LeftSwipeMode(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.LeftSwipeMode = (global::Imagin.Controls.Common.SwipeMode)Value;
        }
        private object get_65_LLMListViewItem_LeftBackAnimEasingFunction(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.LeftBackAnimEasingFunction;
        }
        private void set_65_LLMListViewItem_LeftBackAnimEasingFunction(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.LeftBackAnimEasingFunction = (global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase)Value;
        }
        private object get_66_LLMListViewItem_LeftSwipeMaxLength(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.LeftSwipeMaxLength;
        }
        private void set_66_LLMListViewItem_LeftSwipeMaxLength(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.LeftSwipeMaxLength = (global::System.Double)Value;
        }
        private object get_67_LLMListViewItem_LeftSwipeLengthRate(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.LeftSwipeLengthRate;
        }
        private void set_67_LLMListViewItem_LeftSwipeLengthRate(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.LeftSwipeLengthRate = (global::System.Double)Value;
        }
        private object get_68_LLMListViewItem_LeftActionRateForSwipeLength(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.LeftActionRateForSwipeLength;
        }
        private void set_68_LLMListViewItem_LeftActionRateForSwipeLength(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.LeftActionRateForSwipeLength = (global::System.Double)Value;
        }
        private object get_69_LLMListViewItem_ActualLeftSwipeLengthRate(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.ActualLeftSwipeLengthRate;
        }
        private object get_70_LLMListViewItem_RightSwipeMode(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.RightSwipeMode;
        }
        private void set_70_LLMListViewItem_RightSwipeMode(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.RightSwipeMode = (global::Imagin.Controls.Common.SwipeMode)Value;
        }
        private object get_71_LLMListViewItem_RightSwipeMaxLength(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.RightSwipeMaxLength;
        }
        private void set_71_LLMListViewItem_RightSwipeMaxLength(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.RightSwipeMaxLength = (global::System.Double)Value;
        }
        private object get_72_LLMListViewItem_RightSwipeLengthRate(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.RightSwipeLengthRate;
        }
        private void set_72_LLMListViewItem_RightSwipeLengthRate(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.RightSwipeLengthRate = (global::System.Double)Value;
        }
        private object get_73_LLMListViewItem_ActualRightSwipeLengthRate(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.ActualRightSwipeLengthRate;
        }
        private object get_74_LLMListViewItem_RightActionRateForSwipeLength(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.RightActionRateForSwipeLength;
        }
        private void set_74_LLMListViewItem_RightActionRateForSwipeLength(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.RightActionRateForSwipeLength = (global::System.Double)Value;
        }
        private object get_75_LLMListViewItem_RightBackAnimEasingFunction(object instance)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            return that.RightBackAnimEasingFunction;
        }
        private void set_75_LLMListViewItem_RightBackAnimEasingFunction(object instance, object Value)
        {
            var that = (global::Imagin.Controls.Common.LLMListViewItem)instance;
            that.RightBackAnimEasingFunction = (global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase)Value;
        }
        private object get_76_XPButton_CornerRadius(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.CornerRadius;
        }
        private void set_76_XPButton_CornerRadius(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.CornerRadius = (global::Windows.UI.Xaml.CornerRadius)Value;
        }
        private object get_77_XPButton_Icon(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.Icon;
        }
        private void set_77_XPButton_Icon(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.Icon = (global::Windows.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_78_XPButton_IconPosition(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.IconPosition;
        }
        private void set_78_XPButton_IconPosition(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.IconPosition = (global::XP.IconPosition)Value;
        }
        private object get_79_XPButton_IconSize(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.IconSize;
        }
        private void set_79_XPButton_IconSize(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.IconSize = (global::System.Double)Value;
        }
        private object get_80_XPButton_IconInterval(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.IconInterval;
        }
        private void set_80_XPButton_IconInterval(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.IconInterval = (global::System.Double)Value;
        }
        private object get_81_XPButton_IconForeground(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.IconForeground;
        }
        private void set_81_XPButton_IconForeground(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.IconForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_82_XPButton_PointerOverBackground(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.PointerOverBackground;
        }
        private void set_82_XPButton_PointerOverBackground(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.PointerOverBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_83_XPButton_PointerOverTextForeground(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.PointerOverTextForeground;
        }
        private void set_83_XPButton_PointerOverTextForeground(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.PointerOverTextForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_84_XPButton_PointerOverIconForeground(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.PointerOverIconForeground;
        }
        private void set_84_XPButton_PointerOverIconForeground(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.PointerOverIconForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_85_XPButton_PointerOverBorderBrush(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.PointerOverBorderBrush;
        }
        private void set_85_XPButton_PointerOverBorderBrush(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.PointerOverBorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_86_XPButton_PressedBackground(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.PressedBackground;
        }
        private void set_86_XPButton_PressedBackground(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.PressedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_87_XPButton_PressedTextForeground(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.PressedTextForeground;
        }
        private void set_87_XPButton_PressedTextForeground(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.PressedTextForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_88_XPButton_PressedIconForeground(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.PressedIconForeground;
        }
        private void set_88_XPButton_PressedIconForeground(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.PressedIconForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_89_XPButton_PressedBorderBrush(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.PressedBorderBrush;
        }
        private void set_89_XPButton_PressedBorderBrush(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.PressedBorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_90_XPButton_DisabledBackground(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.DisabledBackground;
        }
        private void set_90_XPButton_DisabledBackground(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.DisabledBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_91_XPButton_DisabledTextForeground(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.DisabledTextForeground;
        }
        private void set_91_XPButton_DisabledTextForeground(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.DisabledTextForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_92_XPButton_DisabledIconForeground(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.DisabledIconForeground;
        }
        private void set_92_XPButton_DisabledIconForeground(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.DisabledIconForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_93_XPButton_DisabledBorderBrush(object instance)
        {
            var that = (global::XP.XPButton)instance;
            return that.DisabledBorderBrush;
        }
        private void set_93_XPButton_DisabledBorderBrush(object instance, object Value)
        {
            var that = (global::XP.XPButton)instance;
            that.DisabledBorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember xamlMember = null;
            global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_0_Interaction_Behaviors;
                xamlMember.Setter = set_0_Interaction_Behaviors;
                break;
            case "Microsoft.Xaml.Interactivity.Trigger.Actions":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Trigger");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_Trigger_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.DataTriggerBehavior.Binding":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.DataTriggerBehavior");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Binding", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_DataTriggerBehavior_Binding;
                xamlMember.Setter = set_2_DataTriggerBehavior_Binding;
                break;
            case "Microsoft.Xaml.Interactions.Core.DataTriggerBehavior.Value":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.DataTriggerBehavior");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Value", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_DataTriggerBehavior_Value;
                xamlMember.Setter = set_3_DataTriggerBehavior_Value;
                break;
            case "Microsoft.Xaml.Interactions.Core.DataTriggerBehavior.ComparisonCondition":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.DataTriggerBehavior");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ComparisonCondition", "Microsoft.Xaml.Interactions.Core.ComparisonConditionType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_DataTriggerBehavior_ComparisonCondition;
                xamlMember.Setter = set_4_DataTriggerBehavior_ComparisonCondition;
                break;
            case "Microsoft.Xaml.Interactivity.Behavior.AssociatedObject":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_5_Behavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.ChangePropertyAction.PropertyName":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.ChangePropertyAction");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "PropertyName", "Windows.UI.Xaml.PropertyPath");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_ChangePropertyAction_PropertyName;
                xamlMember.Setter = set_6_ChangePropertyAction_PropertyName;
                break;
            case "Microsoft.Xaml.Interactions.Core.ChangePropertyAction.Value":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.ChangePropertyAction");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Value", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_ChangePropertyAction_Value;
                xamlMember.Setter = set_7_ChangePropertyAction_Value;
                break;
            case "Microsoft.Xaml.Interactions.Core.ChangePropertyAction.TargetObject":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.ChangePropertyAction");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "TargetObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_ChangePropertyAction_TargetObject;
                xamlMember.Setter = set_8_ChangePropertyAction_TargetObject;
                break;
            case "Imagin.Controls.Common.DateTimePicker.DateTime":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.DateTimePicker");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "DateTime", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_DateTimePicker_DateTime;
                xamlMember.Setter = set_9_DateTimePicker_DateTime;
                break;
            case "Imagin.Controls.Common.DateTimePicker.Orientation":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.DateTimePicker");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_DateTimePicker_Orientation;
                xamlMember.Setter = set_10_DateTimePicker_Orientation;
                break;
            case "Imagin.Controls.Common.DateTimePicker.TimeVisibility":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.DateTimePicker");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "TimeVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_DateTimePicker_TimeVisibility;
                xamlMember.Setter = set_11_DateTimePicker_TimeVisibility;
                break;
            case "Imagin.Controls.Common.FlagCheckView.Flags":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.FlagCheckView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Flags", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_FlagCheckView_Flags;
                xamlMember.Setter = set_12_FlagCheckView_Flags;
                break;
            case "Imagin.Controls.Common.FlagCheckView.Items":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.FlagCheckView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Items", "System.Collections.ObjectModel.ObservableCollection`1<Imagin.Common.CheckableObject`1<Object>>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_FlagCheckView_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Imagin.Common.CheckableObject`1<Object>.Value":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Common.CheckableObject`1<Object>");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Value", "Object");
                xamlMember.Getter = get_14_CheckableObject_Value;
                xamlMember.Setter = set_14_CheckableObject_Value;
                break;
            case "Imagin.Common.CheckableObject.IsChecked":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Common.CheckableObject");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IsChecked", "System.Nullable`1<Boolean>");
                xamlMember.Getter = get_15_CheckableObject_IsChecked;
                xamlMember.Setter = set_15_CheckableObject_IsChecked;
                break;
            case "Imagin.Controls.Common.FlagCheckView.ItemsPanel":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.FlagCheckView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemsPanel", "Windows.UI.Xaml.Controls.ItemsPanelTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_FlagCheckView_ItemsPanel;
                xamlMember.Setter = set_16_FlagCheckView_ItemsPanel;
                break;
            case "Imagin.Controls.Common.FlagCheckView.ItemTemplate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.FlagCheckView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_FlagCheckView_ItemTemplate;
                xamlMember.Setter = set_17_FlagCheckView_ItemTemplate;
                break;
            case "Imagin.Controls.Common.LLMListView.Refresh":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Refresh", "System.Action");
                xamlMember.Getter = get_18_LLMListView_Refresh;
                xamlMember.Setter = set_18_LLMListView_Refresh;
                break;
            case "Imagin.Controls.Common.LLMListView.LoadMore":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "LoadMore", "System.Action");
                xamlMember.Getter = get_19_LLMListView_LoadMore;
                xamlMember.Setter = set_19_LLMListView_LoadMore;
                break;
            case "Imagin.Controls.Common.LLMListView.FloatButtonAction":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "FloatButtonAction", "System.Action");
                xamlMember.Getter = get_20_LLMListView_FloatButtonAction;
                xamlMember.Setter = set_20_LLMListView_FloatButtonAction;
                break;
            case "Imagin.Controls.Common.LLMListView.CanPullToRefresh":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "CanPullToRefresh", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_LLMListView_CanPullToRefresh;
                xamlMember.Setter = set_21_LLMListView_CanPullToRefresh;
                break;
            case "Imagin.Controls.Common.LLMListView.RefreshAreaHeight":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "RefreshAreaHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_LLMListView_RefreshAreaHeight;
                xamlMember.Setter = set_22_LLMListView_RefreshAreaHeight;
                break;
            case "Imagin.Controls.Common.LLMListView.RefreshProgressRingBrush":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "RefreshProgressRingBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_LLMListView_RefreshProgressRingBrush;
                xamlMember.Setter = set_23_LLMListView_RefreshProgressRingBrush;
                break;
            case "Imagin.Controls.Common.LLMListView.RefreshProgressBarBrush":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "RefreshProgressBarBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_LLMListView_RefreshProgressBarBrush;
                xamlMember.Setter = set_24_LLMListView_RefreshProgressBarBrush;
                break;
            case "Imagin.Controls.Common.LLMListView.LoadMoreProgressBarBrush":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "LoadMoreProgressBarBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_LLMListView_LoadMoreProgressBarBrush;
                xamlMember.Setter = set_25_LLMListView_LoadMoreProgressBarBrush;
                break;
            case "Imagin.Controls.Common.LLMListView.FloatButtonForeground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "FloatButtonForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_LLMListView_FloatButtonForeground;
                xamlMember.Setter = set_26_LLMListView_FloatButtonForeground;
                break;
            case "Imagin.Controls.Common.LLMListView.FloatButtonBackground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "FloatButtonBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_LLMListView_FloatButtonBackground;
                xamlMember.Setter = set_27_LLMListView_FloatButtonBackground;
                break;
            case "Imagin.Controls.Common.LLMListView.FloatButtonVisibility":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "FloatButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_LLMListView_FloatButtonVisibility;
                xamlMember.Setter = set_28_LLMListView_FloatButtonVisibility;
                break;
            case "Imagin.Controls.Common.LLMListView.FloatButtonIcon":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "FloatButtonIcon", "Windows.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_LLMListView_FloatButtonIcon;
                xamlMember.Setter = set_29_LLMListView_FloatButtonIcon;
                break;
            case "Imagin.Controls.Common.LLMListView.EmptyDataTemplate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "EmptyDataTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_LLMListView_EmptyDataTemplate;
                xamlMember.Setter = set_30_LLMListView_EmptyDataTemplate;
                break;
            case "Imagin.Controls.Common.LLMListView.ScrollOffsetOfLoadMoreTrigger":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ScrollOffsetOfLoadMoreTrigger", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_LLMListView_ScrollOffsetOfLoadMoreTrigger;
                xamlMember.Setter = set_31_LLMListView_ScrollOffsetOfLoadMoreTrigger;
                break;
            case "Imagin.Controls.Common.LLMListView.IsItemSwipeEnabled":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IsItemSwipeEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_LLMListView_IsItemSwipeEnabled;
                xamlMember.Setter = set_32_LLMListView_IsItemSwipeEnabled;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemLeftSwipeContentTemplate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemLeftSwipeContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_LLMListView_ItemLeftSwipeContentTemplate;
                xamlMember.Setter = set_33_LLMListView_ItemLeftSwipeContentTemplate;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemRightSwipeContentTemplate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemRightSwipeContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_LLMListView_ItemRightSwipeContentTemplate;
                xamlMember.Setter = set_34_LLMListView_ItemRightSwipeContentTemplate;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemBackAnimDuration":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemBackAnimDuration", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_LLMListView_ItemBackAnimDuration;
                xamlMember.Setter = set_35_LLMListView_ItemBackAnimDuration;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemLeftSwipeMode":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemLeftSwipeMode", "Imagin.Controls.Common.SwipeMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_LLMListView_ItemLeftSwipeMode;
                xamlMember.Setter = set_36_LLMListView_ItemLeftSwipeMode;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemLeftBackAnimEasingFunction":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemLeftBackAnimEasingFunction", "Windows.UI.Xaml.Media.Animation.EasingFunctionBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_LLMListView_ItemLeftBackAnimEasingFunction;
                xamlMember.Setter = set_37_LLMListView_ItemLeftBackAnimEasingFunction;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemLeftSwipeLengthRate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemLeftSwipeLengthRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_LLMListView_ItemLeftSwipeLengthRate;
                xamlMember.Setter = set_38_LLMListView_ItemLeftSwipeLengthRate;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemLeftSwipeMaxLength":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemLeftSwipeMaxLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_LLMListView_ItemLeftSwipeMaxLength;
                xamlMember.Setter = set_39_LLMListView_ItemLeftSwipeMaxLength;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemLeftActionRateForSwipeLength":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemLeftActionRateForSwipeLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_LLMListView_ItemLeftActionRateForSwipeLength;
                xamlMember.Setter = set_40_LLMListView_ItemLeftActionRateForSwipeLength;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemRightSwipeMode":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemRightSwipeMode", "Imagin.Controls.Common.SwipeMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_LLMListView_ItemRightSwipeMode;
                xamlMember.Setter = set_41_LLMListView_ItemRightSwipeMode;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemRightBackAnimEasingFunction":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemRightBackAnimEasingFunction", "Windows.UI.Xaml.Media.Animation.EasingFunctionBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_LLMListView_ItemRightBackAnimEasingFunction;
                xamlMember.Setter = set_42_LLMListView_ItemRightBackAnimEasingFunction;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemRightSwipeLengthRate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemRightSwipeLengthRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_LLMListView_ItemRightSwipeLengthRate;
                xamlMember.Setter = set_43_LLMListView_ItemRightSwipeLengthRate;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemRightSwipeMaxLength":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemRightSwipeMaxLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_LLMListView_ItemRightSwipeMaxLength;
                xamlMember.Setter = set_44_LLMListView_ItemRightSwipeMaxLength;
                break;
            case "Imagin.Controls.Common.LLMListView.ItemRightActionRateForSwipeLength":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemRightActionRateForSwipeLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_LLMListView_ItemRightActionRateForSwipeLength;
                xamlMember.Setter = set_45_LLMListView_ItemRightActionRateForSwipeLength;
                break;
            case "Imagin.Controls.Common.LLMListView.IsSwipedRightMemberPath":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IsSwipedRightMemberPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_LLMListView_IsSwipedRightMemberPath;
                xamlMember.Setter = set_46_LLMListView_IsSwipedRightMemberPath;
                break;
            case "Imagin.Controls.Common.LLMListView.IsSwipedLeftMemberPath":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IsSwipedLeftMemberPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_LLMListView_IsSwipedLeftMemberPath;
                xamlMember.Setter = set_47_LLMListView_IsSwipedLeftMemberPath;
                break;
            case "Imagin.Controls.Common.LLMListView.EnableSwipeRightMemberPath":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "EnableSwipeRightMemberPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_LLMListView_EnableSwipeRightMemberPath;
                xamlMember.Setter = set_48_LLMListView_EnableSwipeRightMemberPath;
                break;
            case "Imagin.Controls.Common.LLMListView.EnableSwipeLeftMemberPath":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListView");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "EnableSwipeLeftMemberPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_LLMListView_EnableSwipeLeftMemberPath;
                xamlMember.Setter = set_49_LLMListView_EnableSwipeLeftMemberPath;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.Config":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Config", "Imagin.Controls.Common.SwipeConfig");
                xamlMember.Getter = get_50_LLMListViewItem_Config;
                xamlMember.SetIsReadOnly();
                break;
            case "Imagin.Controls.Common.LLMListViewItem.IsSwipedRightMemberPath":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IsSwipedRightMemberPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_LLMListViewItem_IsSwipedRightMemberPath;
                xamlMember.Setter = set_51_LLMListViewItem_IsSwipedRightMemberPath;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.IsSwipedRight":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IsSwipedRight", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_LLMListViewItem_IsSwipedRight;
                xamlMember.Setter = set_52_LLMListViewItem_IsSwipedRight;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.IsSwipedLeftMemberPath":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IsSwipedLeftMemberPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_LLMListViewItem_IsSwipedLeftMemberPath;
                xamlMember.Setter = set_53_LLMListViewItem_IsSwipedLeftMemberPath;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.IsSwipedLeft":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IsSwipedLeft", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_LLMListViewItem_IsSwipedLeft;
                xamlMember.Setter = set_54_LLMListViewItem_IsSwipedLeft;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.EnableSwipeRightMemberPath":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "EnableSwipeRightMemberPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_LLMListViewItem_EnableSwipeRightMemberPath;
                xamlMember.Setter = set_55_LLMListViewItem_EnableSwipeRightMemberPath;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.EnableSwipeRight":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "EnableSwipeRight", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_LLMListViewItem_EnableSwipeRight;
                xamlMember.Setter = set_56_LLMListViewItem_EnableSwipeRight;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.EnableSwipeLeftMemberPath":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "EnableSwipeLeftMemberPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_LLMListViewItem_EnableSwipeLeftMemberPath;
                xamlMember.Setter = set_57_LLMListViewItem_EnableSwipeLeftMemberPath;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.EnableSwipeLeft":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "EnableSwipeLeft", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_LLMListViewItem_EnableSwipeLeft;
                xamlMember.Setter = set_58_LLMListViewItem_EnableSwipeLeft;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.IsSwipeEnabled":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IsSwipeEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_LLMListViewItem_IsSwipeEnabled;
                xamlMember.Setter = set_59_LLMListViewItem_IsSwipeEnabled;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.ItemManipulationMode":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ItemManipulationMode", "Windows.UI.Xaml.Input.ManipulationModes");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_LLMListViewItem_ItemManipulationMode;
                xamlMember.Setter = set_60_LLMListViewItem_ItemManipulationMode;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.LeftSwipeContentTemplate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "LeftSwipeContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_LLMListViewItem_LeftSwipeContentTemplate;
                xamlMember.Setter = set_61_LLMListViewItem_LeftSwipeContentTemplate;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.RightSwipeContentTemplate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "RightSwipeContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_LLMListViewItem_RightSwipeContentTemplate;
                xamlMember.Setter = set_62_LLMListViewItem_RightSwipeContentTemplate;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.BackAnimDuration":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "BackAnimDuration", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_LLMListViewItem_BackAnimDuration;
                xamlMember.Setter = set_63_LLMListViewItem_BackAnimDuration;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.LeftSwipeMode":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "LeftSwipeMode", "Imagin.Controls.Common.SwipeMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_LLMListViewItem_LeftSwipeMode;
                xamlMember.Setter = set_64_LLMListViewItem_LeftSwipeMode;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.LeftBackAnimEasingFunction":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "LeftBackAnimEasingFunction", "Windows.UI.Xaml.Media.Animation.EasingFunctionBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_LLMListViewItem_LeftBackAnimEasingFunction;
                xamlMember.Setter = set_65_LLMListViewItem_LeftBackAnimEasingFunction;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.LeftSwipeMaxLength":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "LeftSwipeMaxLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_LLMListViewItem_LeftSwipeMaxLength;
                xamlMember.Setter = set_66_LLMListViewItem_LeftSwipeMaxLength;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.LeftSwipeLengthRate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "LeftSwipeLengthRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_LLMListViewItem_LeftSwipeLengthRate;
                xamlMember.Setter = set_67_LLMListViewItem_LeftSwipeLengthRate;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.LeftActionRateForSwipeLength":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "LeftActionRateForSwipeLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_LLMListViewItem_LeftActionRateForSwipeLength;
                xamlMember.Setter = set_68_LLMListViewItem_LeftActionRateForSwipeLength;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.ActualLeftSwipeLengthRate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ActualLeftSwipeLengthRate", "Double");
                xamlMember.Getter = get_69_LLMListViewItem_ActualLeftSwipeLengthRate;
                xamlMember.SetIsReadOnly();
                break;
            case "Imagin.Controls.Common.LLMListViewItem.RightSwipeMode":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "RightSwipeMode", "Imagin.Controls.Common.SwipeMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_LLMListViewItem_RightSwipeMode;
                xamlMember.Setter = set_70_LLMListViewItem_RightSwipeMode;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.RightSwipeMaxLength":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "RightSwipeMaxLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_LLMListViewItem_RightSwipeMaxLength;
                xamlMember.Setter = set_71_LLMListViewItem_RightSwipeMaxLength;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.RightSwipeLengthRate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "RightSwipeLengthRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_LLMListViewItem_RightSwipeLengthRate;
                xamlMember.Setter = set_72_LLMListViewItem_RightSwipeLengthRate;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.ActualRightSwipeLengthRate":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "ActualRightSwipeLengthRate", "Double");
                xamlMember.Getter = get_73_LLMListViewItem_ActualRightSwipeLengthRate;
                xamlMember.SetIsReadOnly();
                break;
            case "Imagin.Controls.Common.LLMListViewItem.RightActionRateForSwipeLength":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "RightActionRateForSwipeLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_LLMListViewItem_RightActionRateForSwipeLength;
                xamlMember.Setter = set_74_LLMListViewItem_RightActionRateForSwipeLength;
                break;
            case "Imagin.Controls.Common.LLMListViewItem.RightBackAnimEasingFunction":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Imagin.Controls.Common.LLMListViewItem");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "RightBackAnimEasingFunction", "Windows.UI.Xaml.Media.Animation.EasingFunctionBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_LLMListViewItem_RightBackAnimEasingFunction;
                xamlMember.Setter = set_75_LLMListViewItem_RightBackAnimEasingFunction;
                break;
            case "XP.XPButton.CornerRadius":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "CornerRadius", "Windows.UI.Xaml.CornerRadius");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_XPButton_CornerRadius;
                xamlMember.Setter = set_76_XPButton_CornerRadius;
                break;
            case "XP.XPButton.Icon":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "Icon", "Windows.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_XPButton_Icon;
                xamlMember.Setter = set_77_XPButton_Icon;
                break;
            case "XP.XPButton.IconPosition":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IconPosition", "XP.IconPosition");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_XPButton_IconPosition;
                xamlMember.Setter = set_78_XPButton_IconPosition;
                break;
            case "XP.XPButton.IconSize":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IconSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_XPButton_IconSize;
                xamlMember.Setter = set_79_XPButton_IconSize;
                break;
            case "XP.XPButton.IconInterval":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IconInterval", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_XPButton_IconInterval;
                xamlMember.Setter = set_80_XPButton_IconInterval;
                break;
            case "XP.XPButton.IconForeground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "IconForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_XPButton_IconForeground;
                xamlMember.Setter = set_81_XPButton_IconForeground;
                break;
            case "XP.XPButton.PointerOverBackground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "PointerOverBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_XPButton_PointerOverBackground;
                xamlMember.Setter = set_82_XPButton_PointerOverBackground;
                break;
            case "XP.XPButton.PointerOverTextForeground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "PointerOverTextForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_XPButton_PointerOverTextForeground;
                xamlMember.Setter = set_83_XPButton_PointerOverTextForeground;
                break;
            case "XP.XPButton.PointerOverIconForeground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "PointerOverIconForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_XPButton_PointerOverIconForeground;
                xamlMember.Setter = set_84_XPButton_PointerOverIconForeground;
                break;
            case "XP.XPButton.PointerOverBorderBrush":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "PointerOverBorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_XPButton_PointerOverBorderBrush;
                xamlMember.Setter = set_85_XPButton_PointerOverBorderBrush;
                break;
            case "XP.XPButton.PressedBackground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "PressedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_XPButton_PressedBackground;
                xamlMember.Setter = set_86_XPButton_PressedBackground;
                break;
            case "XP.XPButton.PressedTextForeground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "PressedTextForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_XPButton_PressedTextForeground;
                xamlMember.Setter = set_87_XPButton_PressedTextForeground;
                break;
            case "XP.XPButton.PressedIconForeground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "PressedIconForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_XPButton_PressedIconForeground;
                xamlMember.Setter = set_88_XPButton_PressedIconForeground;
                break;
            case "XP.XPButton.PressedBorderBrush":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "PressedBorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_XPButton_PressedBorderBrush;
                xamlMember.Setter = set_89_XPButton_PressedBorderBrush;
                break;
            case "XP.XPButton.DisabledBackground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "DisabledBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_XPButton_DisabledBackground;
                xamlMember.Setter = set_90_XPButton_DisabledBackground;
                break;
            case "XP.XPButton.DisabledTextForeground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "DisabledTextForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_XPButton_DisabledTextForeground;
                xamlMember.Setter = set_91_XPButton_DisabledTextForeground;
                break;
            case "XP.XPButton.DisabledIconForeground":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "DisabledIconForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_XPButton_DisabledIconForeground;
                xamlMember.Setter = set_92_XPButton_DisabledIconForeground;
                break;
            case "XP.XPButton.DisabledBorderBrush":
                userType = (global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.XPButton");
                xamlMember = new global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlMember(this, "DisabledBorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_XPButton_DisabledBorderBrush;
                xamlMember.Setter = set_93_XPButton_DisabledBorderBrush;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlSystemBaseType
    {
        global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Imagin.Controls.Common.Controls_Common__UWP__XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

