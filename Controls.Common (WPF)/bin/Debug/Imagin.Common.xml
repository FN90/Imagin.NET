<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Imagin.Common</name>
    </assembly>
    <members>
        <member name="T:Imagin.Common.Configuration.IApp">
            <summary>
            Specifies an application.
            </summary>
        </member>
        <member name="P:Imagin.Common.Configuration.IApp.Languages">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Configuration.IApp.Log">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Configuration.IApp.MainView">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Configuration.IApp.Resources">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Configuration.IMainView">
            <summary>
            Specifies the main view of an application. 
            </summary>
        </member>
        <member name="T:Imagin.Common.Property">
            <summary>
            A utility for setting properties of objects that implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and <see cref="T:Imagin.Common.IPropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Property.OnChanged``2(``0,System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            
            </summary>
            <typeparam name="TObject"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="source"></param>
            <param name="expression"></param>
        </member>
        <member name="M:Imagin.Common.Property.Set``2(``0,``1@,``1,System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            
            </summary>
            <typeparam name="TObject"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="source"></param>
            <param name="field"></param>
            <param name="value"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Timers.ElapsedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.Timers.ElapsedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Timers.ElapsedEventArgs.SignalTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Timers.ElapsedEventArgs.#ctor(System.DateTime)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.BindableObject">
            <summary>
            A base for abstract objects (implements INotifyPropertyChanged).
            </summary>
        </member>
        <member name="E:Imagin.Common.BindableObject.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.BindableObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.BindableObject.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Imagin.Common.BindableObject.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="expression"></param>
        </member>
        <member name="M:Imagin.Common.BindableObject.SetValue``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="value"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.CheckableObject">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.CheckableObject.Checked">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.CheckableObject.StateChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.CheckableObject.Unchecked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CheckableObject.isChecked">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckableObject.IsChecked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.CheckableObject.OnChecked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject.OnIndeterminate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject.OnStateChanged(System.Nullable{System.Boolean})">
            <summary>
            
            </summary>
            <param name="State"></param>
        </member>
        <member name="M:Imagin.Common.CheckableObject.OnUnchecked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isChecked"></param>
        </member>
        <member name="T:Imagin.Common.CheckableObject`1">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Imagin.Common.CheckableObject`1.value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckableObject`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.CheckableObject`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableObject`1.#ctor(`0,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="isChecked"></param>
        </member>
        <member name="M:Imagin.Common.CheckableObject`1.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isChecked"></param>
        </member>
        <member name="T:Imagin.Common.DisposableObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DisposableObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DisposableObject.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DisposableObject.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Imagin.Common.DisposableObject.OnManagedDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DisposableObject.OnUnmanagedDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DisposableObject.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.NamedObject">
            <summary>
            A named, abstract object.
            </summary>
        </member>
        <member name="E:Imagin.Common.NamedObject.NameChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.NamedObject.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.NamedObject.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NamedObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NamedObject.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Imagin.Common.NamedObject.OnNameChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.NamedObject.OnPreviewNameChanged(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="OldValue"></param>
            <param name="NewValue"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.PeriodicalObjectBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PeriodicalObjectBase.DefaultInterval">
            <summary>
            The default interval to use.
            </summary>
        </member>
        <member name="E:Imagin.Common.PeriodicalObjectBase.Notified">
            <summary>
            Occurs when the timer elapses.
            </summary>
        </member>
        <member name="M:Imagin.Common.PeriodicalObjectBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PeriodicalObjectBase.OnNotified(Imagin.Common.Timers.ElapsedEventArgs)">
            <summary>
            Occurs when the timer elapses.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.TaggedObject">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TaggedObject.tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TaggedObject.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TaggedObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TaggedObject.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="tag"></param>
        </member>
        <member name="T:Imagin.Common.CategoryAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CategoryAttribute.Category">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CategoryAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Category"></param>
        </member>
        <member name="T:Imagin.Common.DisplayNameAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DisplayNameAttribute.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DisplayNameAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="DisplayName"></param>
        </member>
        <member name="T:Imagin.Common.DateFormatAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DateFormatAttribute.Format">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DateFormatAttribute.#ctor(Imagin.Common.Data.DateFormat)">
            <summary>
            
            </summary>
            <param name="Format"></param>
        </member>
        <member name="T:Imagin.Common.ReadOnlyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ReadOnlyAttribute.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ReadOnlyAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="IsReadOnly"></param>
        </member>
        <member name="T:Imagin.Common.LongFormatAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.LongFormatAttribute.Format">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.LongFormatAttribute.#ctor(Imagin.Common.Data.LongFormat)">
            <summary>
            
            </summary>
            <param name="Format"></param>
        </member>
        <member name="T:Imagin.Common.KeyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.KeyAttribute.Key">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.KeyAttribute.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="Key"></param>
        </member>
        <member name="T:Imagin.Common.DescriptionAttribute">
            <summary>
            A generic alternative for <see langword="System.ComponentModel.DescriptionAttribute"/>, which isn't available in some frameworks.
            </summary>
        </member>
        <member name="P:Imagin.Common.DescriptionAttribute.Description">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DescriptionAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Description"></param>
        </member>
        <member name="T:Imagin.Common.BrowsableAttribute">
            <summary>
            A generic alternative for <see langword="System.ComponentModel.BrowsableAttribute"/>, which isn't available in some frameworks.
            </summary>
        </member>
        <member name="P:Imagin.Common.BrowsableAttribute.Browsable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.BrowsableAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Browsable"></param>
        </member>
        <member name="T:Imagin.Common.EnumFormatAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.EnumFormatAttribute.Format">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.EnumFormatAttribute.#ctor(Imagin.Common.Data.EnumFormat)">
            <summary>
            
            </summary>
            <param name="Format"></param>
        </member>
        <member name="T:Imagin.Common.ILoadingDialogHost">
            <summary>
            Specifies an element capable of hosting loading dialogs.
            </summary>
        </member>
        <member name="M:Imagin.Common.ILoadingDialogHost.GetDialog">
            <summary>
            Gets a new instance of <see cref="T:Imagin.Common.ILoadingDialog"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.ILoadingDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ILoadingDialog.ShowAsync(System.String,System.String,System.Uri,Imagin.Common.DialogAction,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="image"></param>
            <param name="action"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.SearchableAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.SearchableAttribute.IsSearchable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.SearchableAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.SearchableAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="IsSearchable"></param>
        </member>
        <member name="T:Imagin.Common.IChangeable">
            <summary>
            Specifies an object that can observe changes to itself.
            </summary>
        </member>
        <member name="E:Imagin.Common.IChangeable.Changed">
            <summary>
            Occurs when the object is changed in any way.
            </summary>
        </member>
        <member name="T:Imagin.Common.ICheckable">
            <summary>
            Specifies an object with a checked state.
            </summary>
        </member>
        <member name="P:Imagin.Common.ICheckable.IsChecked">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ICloneable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ICloneable.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.ICoercable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ICoercable.SetConstraint(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="Minimum"></param>
            <param name="Maximum"></param>
        </member>
        <member name="T:Imagin.Common.ICoercable`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Imagin.Common.ICoercable`1.Minimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ICoercable`1.Maximum">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IDeletable">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.IDeletable.Deleted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.IDeletable.OnDeleted">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IDialog">
            <summary>
            Specifies a dialog.
            </summary>
        </member>
        <member name="P:Imagin.Common.IDialog.Input">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.IDialog.Result">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.IDialog.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.IDialog.Show(System.String,System.String,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.IDialog.Show(System.String,System.String,System.Object,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="content"></param>
            <param name="image"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.IDialog.ShowAsync(System.String,System.String,System.Uri,Imagin.Common.DialogAction,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="image"></param>
            <param name="action"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.IDialog.ShowAsync(System.String,System.String,System.Object,System.Uri,Imagin.Common.DialogAction,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="content"></param>
            <param name="image"></param>
            <param name="action"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.IDialog.ShowError(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.IDialog.ShowInfo(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.IDialog.ShowInput(System.String,System.String,System.String,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="defaultInput"></param>
            <param name="buttons"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.IDialog.ShowPassword(System.String,System.String,System.String,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="defaultPassword"></param>
            <param name="image"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.IDialog.ShowSuccess(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.IDialog.ShowWarning(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.IDialogHost">
            <summary>
            Specifies an element capable of hosting dialogs.
            </summary>
        </member>
        <member name="M:Imagin.Common.IDialogHost.GetDialog">
            <summary>
            Gets a new instance of <see cref="T:Imagin.Common.IDialog"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.IEditable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.IEditable.IsEditable">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IEntry">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.IEntry.Date">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IExpandable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.IExpandable.IsExpanded">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ILockable">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.ILockable.Locked">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.ILockable.Unlocked">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ILockable.IsLocked">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.INamable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.INamable.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IPeriodical">
            <summary>
            Specifies an object that raises notifications over an indefinite period.
            </summary>
        </member>
        <member name="E:Imagin.Common.IPeriodical.Notified">
            <summary>
            Occurs when notifications are periodically raised.
            </summary>
        </member>
        <member name="T:Imagin.Common.IPropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.IPropertyChanged.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:Imagin.Common.ISelectable">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.ISelectable.Selected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ISelectable.IsSelected">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ITaggable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ITaggable.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IValidate`1">
            <summary>
            Specifies a handler that validates a series of arguments and produces a <see cref="T:System.Boolean"/> result.
            </summary>
        </member>
        <member name="M:Imagin.Common.IValidate`1.Validate(`0[])">
            <summary>
            
            </summary>
            <param name="Arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.IVariant`1">
            <summary>
            Represents an object that is a variant of another object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Imagin.Common.IVariant`1.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.IVariant`1.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.IVariant`1.OnChanged(`0)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.IVariant`1.Set(`0)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.AbbreviationAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AbbreviationAttribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.AbbreviationAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.ConstraintAttribute">
            <summary>
            Specifies a constraint for a property with both a minimum and maximum value.
            </summary>
            <remarks>
            Constraint values are stored as object type because generic types cannot inherit from Attribute.
            </remarks>
        </member>
        <member name="P:Imagin.Common.ConstraintAttribute.Maximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ConstraintAttribute.Minimum">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ConstraintAttribute.#ctor(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="Minimum"></param>
            <param name="Maximum"></param>
        </member>
        <member name="T:Imagin.Common.FeaturedAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FeaturedAttribute.IsFeatured">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FeaturedAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="IsFeatured"></param>
        </member>
        <member name="T:Imagin.Common.IconAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.IconAttribute.Uri">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.IconAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Uri"></param>
        </member>
        <member name="T:Imagin.Common.StringFormatAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StringFormatAttribute.Format">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.StringFormatAttribute.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="Format"></param>
        </member>
        <member name="M:Imagin.Common.StringFormatAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Format"></param>
        </member>
        <member name="M:Imagin.Common.StringFormatAttribute.#ctor(Imagin.Common.Data.StringFormat)">
            <summary>
            
            </summary>
            <param name="Format"></param>
        </member>
        <member name="T:Imagin.Common.Batch">
            <summary>
            Provides facilities for managing arrays.
            </summary>
        </member>
        <member name="M:Imagin.Common.Batch.Add``1(``0[]@,``0[])">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="Source"></param>
            <param name="Elements"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Batch.New``1(``0[])">
            <summary>
            Initializes a new array with the given elements; if no elements are specified, an empty array is returned.
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="Elements"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Batch.Remove``1(``0[]@,``0[])">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="Source"></param>
            <param name="Elements"></param>
        </member>
        <member name="M:Imagin.Common.Batch.RemoveAt``1(``0[]@,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="Source"></param>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Collections.EnumCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.EnumCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.EnumCollection.#ctor(System.Enum[])">
            <summary>
            
            </summary>
            <param name="Values"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.ImmutableCollection`1">
            <summary>
            Provides a collection that is immutable or cannot be changed.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Generic.ImmutableCollection`1.Source">
            <summary>
            The base collection that is wrapped by this class to restrict access
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Generic.ImmutableCollection`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollection`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollection`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="Array"></param>
            <param name="ArrayIndex"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollection`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.ImmutableCollectionBase`1">
            <summary>
            Provides a base collection that is immutable or cannot be changed.
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Generic.ImmutableCollectionBase`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Generic.ImmutableCollectionBase`1.IsReadOnly">
            <summary>
            Gets a value indicating that the collection is read-only.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollectionBase`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item">The object to locate</param>
            <returns>true if item is found otherwise false</returns>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
             Copies the elements of the collection to an array, starting at a particular index.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollectionBase`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollectionBase`1.Add(`0)">
            <summary>
            Throws the exception System.NotSupportedException:
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollectionBase`1.Clear">
            <summary>
            Throws the exception System.NotSupportedException:
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollectionBase`1.Remove(`0)">
            <summary>
            Throws the exception System.NotSupportedException:
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ImmutableCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.IStackable`1">
            <summary>
            Defines methods to manipulate stackable collections.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.IStackable`1.Push(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.IStackable`1.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.IStackable`1.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.ITrackableCollection`1">
            <summary>
            Specifies a collection capable of tracking generic items.
            </summary>
            <typeparam name="T">The type of the objects in the collection.</typeparam>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemAdded">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemsAdded">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemInserted">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.ItemsRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.ITrackableCollection`1.PreviewItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Generic.ITrackableCollection`1.IsEmpty">
            <summary>
            Gets whether or not the collection is empty.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ITrackableCollection`1.RemoveAt(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Indices"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.ObservableStack`1">
            <summary>
            Defines methods relative to stack data strcuture; inherits <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ObservableStack`1.Push(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ObservableStack`1.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ObservableStack`1.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.ObservableStack`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.TrackableCollection`1">
            <summary>
            Provides a collection that can be tracked; inherits <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemAdded">
            <summary>
            Occurs when a single item is added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemsAdded">
            <summary>
            Occurs when any number of items are added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemsChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemsCleared">
            <summary>
            Occurs when the collection is cleared.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemInserted">
            <summary>
            Occurs when a single item is inserted.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemRemoved">
            <summary>
            Occurs when a single item is removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.ItemsRemoved">
            <summary>
            Occurs when any number of items are removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.PreviewItemsCleared">
            <summary>
            Occurs just before the collection is cleared.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableCollection`1.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Generic.TrackableCollection`1.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.RemoveAt(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Indices"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemAdded(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemsAdded(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemInserted(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <param name="Index"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemRemoved(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnItemsRemoved(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="OldItems"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnPreviewItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableCollection`1.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Generic.TrackableList`1">
            <summary>
            Provides a collection that can be tracked; inherits <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemAdded">
            <summary>
            Occurs when a single item is added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemsAdded">
            <summary>
            Occurs when any number of items are added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemsChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemsCleared">
            <summary>
            Occurs when the collection is cleared.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemInserted">
            <summary>
            Occurs when a single item is inserted.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemRemoved">
            <summary>
            Occurs when a single item is removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.ItemsRemoved">
            <summary>
            Occurs when any number of items are removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.PreviewItemsCleared">
            <summary>
            Occurs just before the collection is cleared.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Generic.TrackableList`1.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Generic.TrackableList`1.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.RemoveAt(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Indices"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemAdded(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemsAdded(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemInserted(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <param name="Index"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemRemoved(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnItemsRemoved(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="OldItems"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnPreviewItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Generic.TrackableList`1.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:Imagin.Common.Collections.ITrackableCollection">
            <summary>
            Specifies a collection capable of tracking items.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemAdded">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemsAdded">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemInserted">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.ItemsRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.ITrackableCollection.PreviewItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.ITrackableCollection.IsEmpty">
            <summary>
            Gets whether or not the collection is empty.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Add(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.Remove(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.Collections.ITrackableCollection.RemoveAt(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Indices"></param>
        </member>
        <member name="T:Imagin.Common.Lang.Main">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Abort">
            <summary>
              Looks up a localized string similar to Abort.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.All">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Continue">
            <summary>
              Looks up a localized string similar to Continue.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Done">
            <summary>
              Looks up a localized string similar to Done.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Error">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Ignore">
            <summary>
              Looks up a localized string similar to Ignore.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Message">
            <summary>
              Looks up a localized string similar to Message.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.None">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Ok">
            <summary>
              Looks up a localized string similar to Ok.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Retry">
            <summary>
              Looks up a localized string similar to Retry.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Success">
            <summary>
              Looks up a localized string similar to Success.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Warning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="T:Imagin.Common.Range">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Range.New``1(``0,``0)">
            <summary>
            
            </summary>
            <param name="Minimum"></param>
            <param name="Maximum"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Range`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Imagin.Common.Range`1.Minimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Range`1.Maximum">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Range`1.#ctor(`0,`0)">
            <summary>
            
            </summary>
            <param name="Minimum"></param>
            <param name="Maximum"></param>
        </member>
        <member name="M:Imagin.Common.Range`1.New(`0,`0)">
            <summary>
            
            </summary>
            <param name="Minimum"></param>
            <param name="Maximum"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Threading.ResultEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.ResultEventArgs.Result">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Threading.ResultEventArgs.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="Result"></param>
        </member>
        <member name="T:Imagin.Common.Threading.BackgroundQueue">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Threading.BackgroundQueue.Cancelled">
            <summary>
            Occurs when all tasks have cancelled.
            </summary>
        </member>
        <member name="E:Imagin.Common.Threading.BackgroundQueue.Completed">
            <summary>
            Occurs when all tasks have completed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Threading.BackgroundQueue.TaskCompleted">
            <summary>
            Occurs when a task has completed.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.BackgroundQueue.Count">
            <summary>
            Gets the number of tasks.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.BackgroundQueue.IsCancellationRequested">
            <summary>
            Gets whether or not cancellation was requested.
            </summary>
        </member>
        <member name="M:Imagin.Common.Threading.BackgroundQueue.Add(System.Action)">
            <summary>
            
            </summary>
            <param name="Action"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Threading.BackgroundQueue.Add(System.Action{System.Threading.CancellationToken})">
            <summary>
            
            </summary>
            <param name="Action"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Threading.BackgroundQueue.Add``1(System.Func{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Action"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Threading.BackgroundQueue.Add``1(System.Func{System.Threading.CancellationToken,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Action"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Threading.BackgroundQueue.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Threading.BackgroundQueue.OnCancelled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Threading.BackgroundQueue.OnCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Threading.BackgroundQueue.OnTaskCompleted``1(``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Threading.BackgroundQueue.CancelAll">
            <summary>
            Cancels all tasks.
            </summary>
        </member>
        <member name="T:Imagin.Common.Threading.TaskCompletionNotifier`1">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="E:Imagin.Common.Threading.TaskCompletionNotifier`1.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.Task">
            <summary>
            Gets the task being watched. This property never changes and is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.Result">
            <summary>
            Gets the result of the task. Returns the default value of TResult if the task has not completed successfully.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.IsCompleted">
            <summary>
            Gets whether the task has completed.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.IsSuccessfullyCompleted">
            <summary>
            Gets whether the task has completed successfully.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.IsCanceled">
            <summary>
            Gets whether the task has been canceled.
            </summary>
        </member>
        <member name="P:Imagin.Common.Threading.TaskCompletionNotifier`1.IsFaulted">
            <summary>
            Gets whether the task has faulted.
            </summary>
        </member>
        <member name="M:Imagin.Common.Threading.TaskCompletionNotifier`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            
            </summary>
            <param name="task"></param>
        </member>
        <member name="T:Imagin.Common.CompassPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassPoint.NW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassPoint.N">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassPoint.NE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassPoint.W">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassPoint.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassPoint.E">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassPoint.SW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassPoint.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassPoint.SE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CompassPoint.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.DayOfWeek">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DayOfWeek.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DayOfWeek.Sunday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DayOfWeek.Monday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DayOfWeek.Tuesday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DayOfWeek.Wednesday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DayOfWeek.Thursday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DayOfWeek.Friday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DayOfWeek.Saturday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DayOfWeek.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Debug.Error`1">
            <summary>
            Represents a failed result; optionally, encapsulates an exception.
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.Error`1.Exception">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.Error`1.InnerException">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.Error`1.Message">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Error`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Debug.Error`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Error`1.#ctor(System.Exception)">
            <summary>
            
            </summary>
            <param name="Exception"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Error`1.#ctor(System.Exception,`0)">
            <summary>
            
            </summary>
            <param name="Exception"></param>
            <param name="Data"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Error`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Error`1.#ctor(System.String,`0)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Data"></param>
        </member>
        <member name="T:Imagin.Common.Debug.Success`1">
            <summary>
            Represents a successful result.
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.Success`1.Message">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Success`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Success`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Success`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Success`1.#ctor(System.String,`0)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Data"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Success`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Debug.Error">
            <summary>
            Represents a failed result; optionally, encapsulates an exception.
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Error.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Error.#ctor(System.Exception)">
            <summary>
            
            </summary>
            <param name="Exception"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Error.#ctor(System.Exception,System.Object)">
            <summary>
            
            </summary>
            <param name="Exception"></param>
            <param name="Data"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Error.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Error.#ctor(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Data"></param>
        </member>
        <member name="T:Imagin.Common.Debug.Exception`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Imagin.Common.Debug.Exception`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Exception`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Exception`1.#ctor(`0,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Message"></param>
            <param name="InnerException"></param>
        </member>
        <member name="T:Imagin.Common.Debug.InvalidResultException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.InvalidResultException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.InvalidResultException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="T:Imagin.Common.Debug.Result">
            <summary>
            Represents a result.
            </summary>
        </member>
        <member name="F:Imagin.Common.Debug.Result.data">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.Result.Data">
            <summary>
            Abitrary data associated with the result.
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.Result.Message">
            <summary>
            The message associated with the result.
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Result.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Result.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Result.op_Implicit(Imagin.Common.Debug.Result)~System.Boolean">
            <summary>
            True, if <see cref="T:Imagin.Common.Debug.Result"/> is <see cref="T:Imagin.Common.Debug.Success"/>; false, otherwise.
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:Imagin.Common.Debug.Result`1">
            <summary>
            Represents a result with data.
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.Result`1.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Result`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Debug.Result"/> class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Result`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Debug.Result"/> class.
            </summary>
            <param name="Data"></param>
        </member>
        <member name="T:Imagin.Common.Debug.Success">
            <summary>
            Represents a successful result.
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Success.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Success.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Success.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Success.#ctor(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Data"></param>
        </member>
        <member name="T:Imagin.Common.Debug.ILog">
            <summary>
            Specifies a log.
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.ILog.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.ILog.LoadAsync">
            <summary>
            Load current instance with data from file it is associated with.
            </summary>
            <returns>The result of the task.</returns>
        </member>
        <member name="M:Imagin.Common.Debug.ILog.Write(System.Object,Imagin.Common.Debug.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Imagin.Common.Debug.ILog.Write(System.Object,System.Object,Imagin.Common.Debug.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Source"></param>
            <param name="Type"></param>
        </member>
        <member name="T:Imagin.Common.Debug.ILogEntry">
            <summary>
            Specifies a log entry.
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.ILogEntry.Date">
            <summary>
            Specifies when the entry was created.
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.ILogEntry.Message">
            <summary>
            Specifies a message to convey.
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.ILogEntry.Source">
            <summary>
            Specifies the source of the entry.
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.ILogEntry.Type">
            <summary>
            Specifies what kind of entry it is.
            </summary>
        </member>
        <member name="T:Imagin.Common.Debug.LogEntry">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.LogEntry.Date">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.LogEntry.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.LogEntry.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.LogEntry.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.LogEntry.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.LogEntry.#ctor(System.String,Imagin.Common.Debug.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Imagin.Common.Debug.LogEntry.#ctor(System.String,System.Object,Imagin.Common.Debug.LogEntryType)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="source"></param>
            <param name="type"></param>
        </member>
        <member name="T:Imagin.Common.Debug.LogEntryType">
            <summary>
            Specifies a type of <see cref="T:Imagin.Common.Debug.LogEntry"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.Debug.LogEntryType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Debug.LogEntryType.Error">
            <summary>
            Specifies an error message.
            </summary>
        </member>
        <member name="F:Imagin.Common.Debug.LogEntryType.Message">
            <summary>
            Specifies a general message.
            </summary>
        </member>
        <member name="F:Imagin.Common.Debug.LogEntryType.Success">
            <summary>
            Specifies a success message.
            </summary>
        </member>
        <member name="F:Imagin.Common.Debug.LogEntryType.Warning">
            <summary>
            Specifies a warning message.
            </summary>
        </member>
        <member name="F:Imagin.Common.Debug.LogEntryType.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Exceptions.InvalidTokenException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Exceptions.InvalidTokenException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Exceptions.InvalidTokenException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="T:Imagin.Common.DialogAction">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Drawing.AngularUnit">
            <summary>
            Specifies an angular unit.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.AngularUnit.Degree">
            <summary>
            Specifies a degree as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.AngularUnit.Radian">
            <summary>
            Specifies a radian as the unit of measure.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.Illuminant">
            <summary>
            Represents a theoretical source of visible light with a published profile.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.A">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.C">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.E">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.D50">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.D55">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.D65">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.Illuminant.ICC">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.IReflectiveColor">
            <summary>
            Specifies a color that is reflective, or defined with both an <see cref="T:Imagin.Common.Drawing.Illuminant"/> and <see cref="T:Imagin.Common.Drawing.ObserverAngle"/>.
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.IReflectiveColor.Illuminant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Drawing.IReflectiveColor.Observer">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.ObserverAngle">
            <summary>
            Specifies an observer for a color that uses reflective light.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.ObserverAngle.Two">
            <summary>
            Specifies the 1931 standard observer.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.ObserverAngle.Ten">
            <summary>
            Specifies the 1964 observer.
            </summary>
        </member>
        <member name="T:Imagin.Common.Drawing.GraphicalUnit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Pixel">
            <summary>
            Specifies a device pixel as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Inch">
            <summary>
            Specifies an inch as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Centimeter">
            <summary>
            Specifies a centimeter (1/2.54 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Millimeter">
            <summary>
            Specifies a millimeter (1/25.4 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Pica">
            <summary>
            Specifies a pica (1/6 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Twip">
            <summary>
            Specifies a twip (1/1140 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.Character">
            <summary>
            Specifies a character (1/12 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Imagin.Common.Drawing.GraphicalUnit.En">
            <summary>
            Specifies an en (1/144.54 inch) as the unit of measure.
            </summary>
        </member>
        <member name="T:Imagin.Common.Time">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Time.Hour">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Time.Minute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Time.Second">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Time.Millisecond">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Time.Meridiem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Time.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="Hour"></param>
            <param name="Minute"></param>
            <param name="Second"></param>
            <param name="Millisecond"></param>
        </member>
        <member name="M:Imagin.Common.Time.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Time.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Transmission">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Transmission.Automatic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Transmission.Manual">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Globalization.ILanguages">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Globalization.ILanguages.SetWeakEvent">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Globalization.ILanguages.SetWeak">
            <summary>
            
            </summary>
            <remarks>
            Should be implemented in the following way:
            
            add 
            { 
                setWeak.Subscribe(value); 
            }
            remove 
            { 
                setWeak.Unsubscribe(value); 
            }
            </remarks>
        </member>
        <member name="E:Imagin.Common.Globalization.ILanguages.Set">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Globalization.ILanguages.OnSet(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="Language"></param>
        </member>
        <member name="T:Imagin.Common.Globalization.ILocalizer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Globalization.ILocalizer.AssemblyName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Globalization.ILocalizer.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.DateFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.DateFormat.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.DateFormat.Relative">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Data.EnumFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.EnumFormat.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.EnumFormat.Flags">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Data.FileSizeFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.FileSizeFormat.Bytes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.FileSizeFormat.IECBinary">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.FileSizeFormat.BinaryUsingSI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.FileSizeFormat.DecimalUsingSI">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Data.SortDirection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.SortDirection.Ascending">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.SortDirection.Descending">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Data.LongFormat">
            <summary>
            Provides enumerator for long integers of various representations.
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.LongFormat.Default">
            <summary>
            Specifies a general Int64.
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.LongFormat.FileSize">
            <summary>
            Specifies a file size.
            </summary>
        </member>
        <member name="T:Imagin.Common.Data.StringFormat">
            <summary>
            Provides enumerator for strings 
            of various representations.
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.StringFormat.Default">
            <summary>
            Specifies a regular string.
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.StringFormat.FilePath">
            <summary>
            Specifies a file path.
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.StringFormat.FolderPath">
            <summary>
            Specifies a folder path.
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.StringFormat.Multiline">
            <summary>
            Specifies a multiline string.
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.StringFormat.Password">
            <summary>
            Specifies a password string.
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.StringFormat.Tokens">
            <summary>
            Specifies a series of tokens.
            </summary>
        </member>
        <member name="T:Imagin.Common.DialogButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DialogButton.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DialogButton.IsCancel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DialogButton.IsDefault">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DialogButton.Label">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DialogButton.Id">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DialogButton.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="id"></param>
            <param name="isDefault"></param>
            <param name="isCancel"></param>
        </member>
        <member name="M:Imagin.Common.DialogButton.#ctor(System.String,System.Int32,System.Action,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="id"></param>
            <param name="action"></param>
            <param name="isDefault"></param>
            <param name="isCancel"></param>
        </member>
        <member name="T:Imagin.Common.DialogButtons">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogButtons.YesNo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogButtons.YesCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogButtons.YesNoCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogButtons.Ok">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogButtons.Done">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogButtons.Continue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogButtons.OkCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogButtons.ContinueCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogButtons.AbortRetryIgnore">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogButtons.Cancel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.DialogType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogType.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogType.Content">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogType.Input">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DialogType.Password">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Direction.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Direction.Up">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Direction.Down">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Direction.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Direction.Right">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Direction.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ImmutableSpan`2">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:Imagin.Common.ImmutableSpan`2.First">
            <summary>
            Gets or sets the first component.
            </summary>
        </member>
        <member name="P:Imagin.Common.ImmutableSpan`2.Second">
            <summary>
            Gets or sets the second component.
            </summary>
        </member>
        <member name="M:Imagin.Common.ImmutableSpan`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.ImmutableSpan`2"/> class.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
        </member>
        <member name="T:Imagin.Common.Input.ChangedValue">
            <summary>
            Specifies a changed value.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.ChangedValue.#ctor(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="OldValue"></param>
            <param name="NewValue"></param>
        </member>
        <member name="T:Imagin.Common.Input.ChangedValue`1">
            <summary>
            Specifies a changed value.
            </summary>
            <typeparam name="TValue">The kind of value.</typeparam>
        </member>
        <member name="P:Imagin.Common.Input.ChangedValue`1.OldValue">
            <summary>
            The old value.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.ChangedValue`1.NewValue">
            <summary>
            The new value.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.ChangedValue`1.#ctor(`0,`0)">
            <summary>
            
            </summary>
            <param name="OldValue"></param>
            <param name="NewValue"></param>
        </member>
        <member name="T:Imagin.Common.Input.CheckedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.Input.CheckedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.CheckedEventArgs.State">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.CheckedEventArgs.#ctor(System.Nullable{System.Boolean})">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.WeakEvent`1">
            <summary>
            
            </summary>
            <typeparam name="TEventArgs"></typeparam>
        </member>
        <member name="M:Imagin.Common.Input.WeakEvent`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakEvent`1.Raise(System.Object,`0)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.Input.WeakEvent`1.Subscribe(System.EventHandler{`0})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Imagin.Common.Input.WeakEvent`1.Unsubscribe(System.EventHandler{`0})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Imagin.Common.Input.EventArgs`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Imagin.Common.Input.EventArgs`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.EventArgs`1.Parameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.EventArgs`1.#ctor(`0,System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Parameter"></param>
        </member>
        <member name="T:Imagin.Common.Input.SelectedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.Input.SelectedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.SelectedEventArgs.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="T:Imagin.Common.Linq.UInt32Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.UInt32Extensions.Coerce(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.UInt32Extensions.ToInt32(System.UInt32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.UInt16Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.UInt16Extensions.Coerce(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.IListGenericExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.IListGenericExtensions.First``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IListGenericExtensions.For``1(System.Collections.Generic.IList{``0},System.Int32,System.Action{System.Collections.Generic.IList{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.IListGenericExtensions.For``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Action{System.Collections.Generic.IList{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Until"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.IListGenericExtensions.For``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{System.Int32},System.Action{System.Collections.Generic.IList{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Until"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.IListGenericExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IListGenericExtensions.Remove``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <param name="Where"></param>
        </member>
        <member name="M:Imagin.Common.Linq.IListGenericExtensions.TryAdd``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Items"></param>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IListGenericExtensions.TryClear``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Items"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.UInt64Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.UInt64Extensions.Coerce(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.UInt64Extensions.ToFileSize(System.UInt64,Imagin.Common.Data.FileSizeFormat,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="FileSizeFormat"></param>
            <param name="RoundTo"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.UInt64Extensions.ToInt64(System.UInt64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.ActionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ActionExtensions.InvokeIf(System.Action,System.Func{System.Action,System.Boolean})">
            <summary>
            Invoke the given action if predicate.
            </summary>
            <param name="Value"></param>
            <param name="Predicate"></param>
        </member>
        <member name="M:Imagin.Common.Linq.ActionExtensions.Try(System.Action)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ActionExtensions.TryAsync(System.Action)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.ArrayExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ArrayExtensions.IndexOf``1(``0[],``0)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="Source"></param>
            <param name="Element"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ArrayExtensions.Where(System.Array,System.Func{System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.BooleanExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.BooleanExtensions.Invert(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.BooleanExtensions.ToInt16(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.BooleanExtensions.ToInt32(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.ByteExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ByteExtensions.Coerce(System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="ToCoerce"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ByteExtensions.ToDouble(System.Byte)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ByteExtensions.ToInt32(System.Byte)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.DateTimeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DateTimeExtensions.Coerce(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="P:Imagin.Common.Linq.DateTimeExtensions.CurrentMonth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Linq.DateTimeExtensions.CurrentDay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Linq.DateTimeExtensions.CurrentYear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DateTimeExtensions.GetRelative(System.DateTime,Imagin.Common.Globalization.ILocalizer)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Localizer"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DateTimeExtensions.GetRelative(System.Nullable{System.DateTime},Imagin.Common.Globalization.ILocalizer)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Localizer"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DateTimeExtensions.GetRelativeDifference(System.DateTime)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DateTimeExtensions.GetRelativeDifference(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DateTimeExtensions.IsToday(System.DateTime)">
            <summary>
            Checks if month, day, and year are identical to that of today (ignores time).
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DateTimeExtensions.Meridiem(System.DateTime)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DateTimeExtensions.SameDate(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gets whether or not both <see cref="T:System.Nullable`1"/> values have the same date (time is ignored).
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DateTimeExtensions.SameDate(System.DateTime,System.DateTime)">
            <summary>
            Gets whether or not both <see cref="T:System.DateTime"/> values have the same date (time is ignored).
            </summary>
        </member>
        <member name="P:Imagin.Common.Linq.DateTimeExtensions.Tomorrow">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DateTimeExtensions.TrimMilliseconds(System.DateTime)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="P:Imagin.Common.Linq.DateTimeExtensions.Yesterday">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.DecimalExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DecimalExtensions.Coerce(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.DoubleExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.Add(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Increment"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.Abs(System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.Ceiling(System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.Coerce(System.Double,System.Double,System.Double)">
            <summary>
            Coerces <see cref="T:System.Double"/> to given maximum and minimum.
            </summary>
            <param name="Value">The value to coerce.</param>
            <param name="Maximum">The maximum to coerce to.</param>
            <param name="Minimum">The minimum to coerce to.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.Coerce(System.Double,System.Double,System.Boolean)">
            <summary>
            Coerces <see cref="T:System.Double"/> to given limit, which can be minimal or maximal.
            </summary>
            <param name="Value">The value to coerce.</param>
            <param name="Limit">The minimum or maximum to coerce to.</param>
            <param name="MinimumOrMaximum">Whether or not to coerce to minimum or maximum.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.Divide(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.Floor(System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.GetRemaining(System.TimeSpan,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="Elapsed"></param>
            <param name="TotalBytes"></param>
            <param name="ProcessedBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.Multiply(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.NearestFactor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Factor"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.Round(System.Double,System.Int32)">
            <summary>
            Rounds double to variable places.
            </summary>
            <param name="Value"></param>
            <param name="Digits"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.Shift(System.Double,System.Int32)">
            <summary>
            Shifts decimal variable places. <para>If negative, shift left; otherwise, shift right.</para>
            </summary>
            <param name="Value"></param>
            <param name="Shifts"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.ShiftRound(System.Double,System.Int32,System.Int32)">
            <summary>
            Shifts decimal point and rounds to variable places. <para>If negative, shift left; otherwise, shift right.</para>
            </summary>
            <param name="Value"></param>
            <param name="Shifts"></param>
            <param name="Digits"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.Subtract(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Decrement"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.ToAngle(System.Double)">
            <summary>
            Convert given radians to angle.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.ToByte(System.Double)">
            <summary>
            Converts <see cref="T:System.Double"/> to <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.ToFloat(System.Double)">
            <summary>
            Converts <see cref="T:System.Double"/> to <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.ToInt32(System.Double)">
            <summary>
            Converts <see cref="T:System.Double"/> to <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.ToInt64(System.Double)">
            <summary>
            Converts <see cref="T:System.Double"/> to <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.ToRadians(System.Double)">
            <summary>
            Converts angle to radians.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DoubleExtensions.ToUnit(System.Double,Imagin.Common.Drawing.GraphicalUnit,Imagin.Common.Drawing.GraphicalUnit,System.Double)">
            <summary>
            Converts a graphical unit value to another graphical unit value.
            </summary>
            <param name="Value">Number of units.</param>
            <param name="From">The unit to convert from.</param>
            <param name="To">The unit to convert to.</param>
            <param name="Ppi">Pixels per inch.</param>
        </member>
        <member name="T:Imagin.Common.Linq.EncodingExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.EncodingExtensions.ToComplement(Imagin.Common.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="ToConvert"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.EnumExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.Add``1(System.Enum,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.Add(System.Enum,System.Enum)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.GetAttribute``1(System.Enum)">
            <summary>
            
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.GetAttributes(System.Enum)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.Has(System.Enum,System.Enum)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.Has``1(``0,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.HasAll``1(``0,``0[])">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="source"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.HasAny``1(``0,``0[])">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="source"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.HasNone``1(``0,``0[])">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="source"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.HasAttribute``1(System.Enum)">
            <summary>
            
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.Remove``1(System.Enum,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.Remove(System.Enum,System.Enum)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.GetList``1">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.GetObservableCollection``1">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.GetValues``1">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.EnumExtensions.GetValues(System.Type)">
            <summary>
            
            </summary>
            <param name="TEnum"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.FloatExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FloatExtensions.Coerce(System.Single,System.Single,System.Single)">
            <summary>
            Coerces <see cref="T:System.Single"/> to given maximum and minimum.
            </summary>
            <param name="Value">The value to coerce.</param>
            <param name="Maximum">The maximum to coerce to.</param>
            <param name="Minimum">The minimum to coerce to.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.FloatExtensions.ToInt(System.Single)">
            <summary>
            
            </summary>
            <param name="ToConvert"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.IEnumerableGenericExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{System.Collections.Generic.IEnumerable{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{System.Collections.Generic.IEnumerable{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Until"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Predicate{System.Int32},System.Action{System.Collections.Generic.IEnumerable{``0},System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="From"></param>
            <param name="Until"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Perform for each loop on given <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.LeastCommon``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.MostCommon``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.Second``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the second item in a sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.Third``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the last item in a sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableGenericExtensions.TryForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Attempt to perform for each loop on given <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="Action"></param>
        </member>
        <member name="T:Imagin.Common.Linq.IEnumerableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            
            </summary>
            <param name="Source"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.IEnumerableExtensions.Last(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.IListExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.IListExtensions.AddSorted``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="item"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Imagin.Common.Linq.IListExtensions.Any(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IListExtensions.FirstOrDefault(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IListExtensions.ForEach(System.Collections.IList,System.Action{System.Object})">
            <summary>
            
            </summary>
            <param name="Source"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.IListExtensions.Last(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IListExtensions.ToList(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.IListExtensions.Sort``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},Imagin.Common.Data.SortDirection)">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="Source"></param>
            <param name="Selector"></param>
            <param name="Direction"></param>
        </member>
        <member name="T:Imagin.Common.Linq.Int16Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.Int16Extensions.Abs(System.Int16)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int16Extensions.Coerce(System.Int16,System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int16Extensions.ToInt32(System.Int16)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.Int32Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.Add(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Increment"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.Abs(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.Coerce(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.Divide(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.K(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.IsEven(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.IsOdd(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.M(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.Multiply(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.Random(System.Int32)">
            <summary>
            Generates a random string with numeric length.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.SplitBytes(System.Int32)">
            <summary>
            Converts int to byte array.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.Subtract(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Decrement"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.ToByte(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.ToDouble(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.ToInt16(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.ToInt64(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.ToOrdinal(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int32Extensions.WithinRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Minimum"></param>
            <param name="Maximum"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.Int64Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.Add(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Increment"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.Abs(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.Coerce(System.Int64,System.Int64,System.Int64)">
            <summary>
            Coerces <see cref="T:System.Int64"/> to given maximum and minimum.
            </summary>
            <param name="Value">The value to coerce.</param>
            <param name="Maximum">The maximum to coerce to.</param>
            <param name="Minimum">The minimum to coerce to.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.Coerce(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Coerces <see cref="T:System.Int64"/> to given limit, which can be minimal or maximal.
            </summary>
            <param name="Value">The value to coerce.</param>
            <param name="Limit">The minimum or maximum to coerce to.</param>
            <param name="MinimumOrMaximum">Whether or not to coerce to minimum or maximum.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.Divide(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="ToDivide"></param>
            <param name="Divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.K(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.M(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.Multiply(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.Subtract(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Decrement"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.ToDouble(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.ToFileSize(System.Int64,Imagin.Common.Data.FileSizeFormat,System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="FileSizeFormat"></param>
            <param name="RoundTo"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.ToInt32(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.Int64Extensions.ToUInt64(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.ObjectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.As``1(System.Object)">
            <summary>
            Returns object as specified type.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.EqualsAll(System.Object,System.Object[])">
            <summary>
            Check if object is equal to all given objects.
            </summary>
            <param name="Value"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.EqualsAny``1(``0,``0[])">
            <summary>
            Check if object is equal to any given object.
            </summary>
            <param name="Value"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.EqualsNone(System.Object,System.Object[])">
            <summary>
            Check if object is equal to no given object.
            </summary>
            <param name="Value"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.GetValue(System.Object,System.String)">
            <summary>
            Get value for object from given property name.
            </summary>
            <param name="Value">The object to get the value for.</param>
            <param name="PropertyName">The name of the property to get a value for.</param>
            <returns>The value of the property for an object.</returns>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.Implements``1(System.Object)">
            <summary>
            Checks if given object's type implements interface (T).
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.Is``1(System.Object)">
            <summary>
            Checks if specified object is of specified type.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.IsAny(System.Object,System.Type[])">
            <summary>
            Checks if specified object is of specified type.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.IsNot``1(System.Object)">
            <summary>
            Checks if specified object is NOT of specified type.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.IsNull(System.Object)">
            <summary>
            Checks if specified object is null.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.IsNullable(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.IsNullable``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.NullOr(System.Object,System.Object)">
            <summary>
            Return object if it is null or given object.
            </summary>
            <param name="Value"></param>
            <param name="Or"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.NullOr``1(System.Object,System.Object)">
            <summary>
            Return object if it is null or given object.
            </summary>
            <param name="Value"></param>
            <param name="Or"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ObjectExtensions.To``1(System.Object)">
            <summary>
            Cast object to given type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.MemberInfoExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.MemberInfoExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.MemberInfoExtensions.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.MemberInfoExtensions.GetAttributes(System.Reflection.MemberInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.MemberInfoExtensions.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.PropertyInfoExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.PropertyInfoExtensions.IsPublic(System.Reflection.PropertyInfo)">
            <summary>
            Check whether or not property is public and can be written to.
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.StackExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StackExtensions.Any``1(System.Collections.Generic.Stack{``0})">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.StringExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.After(System.String,System.String)">
            <summary>
            Get string after a.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.Between(System.String,System.String,System.String)">
            <summary>
            Get string between a and b.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.Before(System.String,System.String)">
            <summary>
            Get string before a a.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.EndsWithAny(System.String,System.Char[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.EndsWithAny(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.EndsWithAny(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.F(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <param name="Args"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.Format(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <param name="Args"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.IsAlphaNumeric(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.IsDouble(System.String)">
            <summary>
            
            </summary>
            <param name="ToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.IsEmpty(System.String)">
            <summary>
            
            </summary>
            <param name="ToEvaluate"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.IsInt(System.String)">
            <summary>
            
            </summary>
            <param name="ToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.IsLong(System.String)">
            <summary>
            
            </summary>
            <param name="ToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            
            </summary>
            <param name="ToEvaluate"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            
            </summary>
            <param name="ToEvaluate"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.IsShort(System.String)">
            <summary>
            
            </summary>
            <param name="ToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ParseEnum``1(System.String,System.Boolean)">
            <summary>
            Parses <see cref="T:System.String"/> to <see cref="T:System.Enum"/>.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="Value"></param>
            <param name="IgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.SplitCamelCase(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToBool(System.String)">
            <summary>
            Parses <see cref="T:System.String"/> to <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToByte(System.String)">
            <summary>
            Parses <see cref="T:System.String"/> to <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToChar(System.String)">
            <summary>
            Parses <see cref="T:System.String"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToInt16(System.String)">
            <summary>
            Parses <see cref="T:System.String"/> to <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToInt32(System.String)">
            <summary>
            Parses <see cref="T:System.String"/> to <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToInt64(System.String)">
            <summary>
            Parses <see cref="T:System.String"/> to <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToInt32Array(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Separator"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToInt32Array(System.String,System.Nullable{System.Char})">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Separator"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToDateTime(System.String)">
            <summary>
            Parses <see cref="T:System.String"/> to <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToDecimal(System.String)">
            <summary>
            Parses <see cref="T:System.String"/> to <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToDouble(System.String)">
            <summary>
            Parses <see cref="T:System.String"/> to <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToFloat(System.String)">
            <summary>
            Parses <see cref="T:System.String"/> to <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToTimeSpan(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToUInt16(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToUInt32(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToUInt64(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToUri(System.String,System.UriKind)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToVersion(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="raw"></param>
            <param name="Delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.TryParseEnum``1(System.String,``0@,System.Boolean)">
            <summary>
            Attempts to parse <see cref="T:System.String"/> to <see cref="T:System.Enum"/>.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="OldValue"></param>
            <param name="NewValue"></param>
            <param name="IgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.TimeSpanExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TimeSpanExtensions.Coerce(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TimeSpanExtensions.Months(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TimeSpanExtensions.Years(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.TypeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TypeExtensions.Equals``1(System.Type)">
            <summary>
            Gets whether or not the type is equal to type, <see langword="TType"/>.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TypeExtensions.HasProperty(System.Type,System.String)">
            <summary>
            Gets whether or not the type specifies a property with the given name.
            </summary>
            <param name="value">The type to evaluate.</param>
            <param name="propertyName">The name of a property the type may specify.</param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TypeExtensions.Implements``1(System.Type)">
            <summary>
            Gets whether or not the type implements interface, <see langword="TType"/> (or whether <see langword="TType"/> is assignable from the type).
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TypeExtensions.IsNullable(System.Type)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TypeExtensions.TryCreateInstance``1(System.Type)">
            <summary>
            Attempts to create a new instance of given type using <see cref="M:System.Activator.CreateInstance``1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.VersionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.VersionExtensions.Coerce(System.Version,System.Version,System.Version)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Maximum"></param>
            <param name="Minimum"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.List">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.List.New``1(``0[])">
            <summary>
            
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="Items"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.LeftRight">
            <summary>
            Represents a direction that can only be left or right.
            </summary>
        </member>
        <member name="F:Imagin.Common.LeftRight.Unspecified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.LeftRight.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.LeftRight.Right">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Meridiem">
            <summary>
            Specifies a time before or after midday.
            </summary>
        </member>
        <member name="F:Imagin.Common.Meridiem.Ante">
            <summary>
            Specifies a time BEFORE midday.
            </summary>
        </member>
        <member name="F:Imagin.Common.Meridiem.Post">
            <summary>
            Specifies a time AFTER midday.
            </summary>
        </member>
        <member name="F:Imagin.Common.Meridiem.Unspecified">
            <summary>
            Specifies a time with unspecified meridiem.
            </summary>
        </member>
        <member name="T:Imagin.Common.Release">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Release.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Release.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Release.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Release.Major">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Release.Minor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Release.Build">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Release.Revision">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Release.Version">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Release.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Release.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Version"></param>
        </member>
        <member name="M:Imagin.Common.Release.#ctor(System.Version)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Imagin.Common.Release.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Major"></param>
            <param name="Minor"></param>
        </member>
        <member name="M:Imagin.Common.Release.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Major"></param>
            <param name="Minor"></param>
            <param name="Build"></param>
        </member>
        <member name="M:Imagin.Common.Release.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
            <param name="build"></param>
            <param name="revision"></param>
        </member>
        <member name="M:Imagin.Common.Release.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.OnChanged(System.Version)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Release.Set(System.Version)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Release.op_Implicit(System.Version)~Imagin.Common.Release">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Release.op_Implicit(System.Int32)~Imagin.Common.Release">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Release.op_Inequality(Imagin.Common.Release,Imagin.Common.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_Inequality(Imagin.Common.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_Inequality(Imagin.Common.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_Equality(Imagin.Common.Release,Imagin.Common.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_Equality(Imagin.Common.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_Equality(Imagin.Common.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_LessThan(Imagin.Common.Release,Imagin.Common.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_LessThan(Imagin.Common.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_LessThan(Imagin.Common.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_LessThanOrEqual(Imagin.Common.Release,Imagin.Common.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_LessThanOrEqual(Imagin.Common.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_LessThanOrEqual(Imagin.Common.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_GreaterThan(Imagin.Common.Release,Imagin.Common.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_GreaterThan(Imagin.Common.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_GreaterThan(Imagin.Common.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_GreaterThanOrEqual(Imagin.Common.Release,Imagin.Common.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_GreaterThanOrEqual(Imagin.Common.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_GreaterThanOrEqual(Imagin.Common.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_Addition(Imagin.Common.Release,Imagin.Common.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_Addition(Imagin.Common.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_Addition(Imagin.Common.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_Subtraction(Imagin.Common.Release,Imagin.Common.Release)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_Subtraction(Imagin.Common.Release,System.Version)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Release.op_Subtraction(Imagin.Common.Release,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="Major"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.RowColumn">
            <summary>
            A data type to represent a row and column pair.
            </summary>
        </member>
        <member name="P:Imagin.Common.RowColumn.Row">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RowColumn.Column">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RowColumn.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <param name="column"></param>
        </member>
        <member name="M:Imagin.Common.RowColumn.op_Equality(Imagin.Common.RowColumn,Imagin.Common.RowColumn)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.RowColumn.op_Inequality(Imagin.Common.RowColumn,Imagin.Common.RowColumn)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.RowColumn.Equals(Imagin.Common.RowColumn)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.RowColumn.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.RowColumn.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.RowColumn.InRange(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="ColumnMinimum"></param>
            <param name="ColumnMaximum"></param>
            <param name="RowMinimum"></param>
            <param name="RowMaximum"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.RelativeTense">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RelativeTense.Future">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RelativeTense.Past">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Side">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Side.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Side.Top">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Side.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Side.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Side.Right">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Side.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Span`2">
            <summary>
            Represents a writable 2-tuple, or pair.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:Imagin.Common.Span`2.First">
            <summary>
            Get or set the first component.
            </summary>
        </member>
        <member name="P:Imagin.Common.Span`2.Second">
            <summary>
            Get or set the second component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Span`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Span`2"/> class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Span`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Span`2"/> class.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
        </member>
        <member name="T:Imagin.Common.Span`3">
            <summary>
            Represents a writable 3-tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="P:Imagin.Common.Span`3.Third">
            <summary>
            Get or set the third component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Span`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Span`3"/> class.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
        </member>
        <member name="T:Imagin.Common.Span`4">
            <summary>
            Represents a writable 4-tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
        </member>
        <member name="P:Imagin.Common.Span`4.Fourth">
            <summary>
            Get or set the fourth component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Span`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Span`4"/> class.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
            <param name="Fourth"></param>
        </member>
        <member name="T:Imagin.Common.Span`5">
            <summary>
            Represents a writable 5-tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
        </member>
        <member name="P:Imagin.Common.Span`5.Fifth">
            <summary>
            Get or set the fifth component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Span`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Span`5"/> class.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
            <param name="Fourth"></param>
            <param name="Fifth"></param>
        </member>
        <member name="T:Imagin.Common.Span`6">
            <summary>
            Represents a writable 6-tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
        </member>
        <member name="P:Imagin.Common.Span`6.Sixth">
            <summary>
            Get or set the sixth component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Span`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Span`6"/> class.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
            <param name="Fourth"></param>
            <param name="Fifth"></param>
            <param name="Sixth"></param>
        </member>
        <member name="T:Imagin.Common.Text.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Text.Encoding.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Text.Encoding.ASCII">
            <summary>
            A protocol to encode 128 specified characters into seven-bit integers.
            </summary>
        </member>
        <member name="F:Imagin.Common.Text.Encoding.Unicode">
            <summary>
            A computing industry standard for the consistent encoding, representation, and handling of text.
            </summary>
        </member>
        <member name="F:Imagin.Common.Text.Encoding.UTF7">
            <summary>
            A variable-length character encoding that was proposed for representing Unicode text using a stream of ASCII characters.
            </summary>
        </member>
        <member name="F:Imagin.Common.Text.Encoding.UTF8">
            <summary>
            A character encoding capable of encoding all possible characters, or code points, defined by Unicode.
            </summary>
        </member>
        <member name="F:Imagin.Common.Text.Encoding.UTF32">
            <summary>
            A fixed-length protocol to encode Unicode code points that uses exactly 32 bits per Unicode code point.
            </summary>
        </member>
        <member name="T:Imagin.Common.TimeZone">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.DatelineStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.UTC11">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.AleutianStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.HawaiianStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.MarquesasStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.AlaskanStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.UTC09">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.PacificStandardTimeMexico">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.UTC08">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.PacificStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.USMountainStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.MountainStandardTimeMexico">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.MountainStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CentralAmericaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CentralStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.EasterIslandStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CentralStandardTimeMexico">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CanadaCentralStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.SAPacificStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.EasternStandardTimeMexico">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.EasternStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.HaitiStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CubaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.USEasternStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.ParaguayStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.AtlanticStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.VenezuelaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CentralBrazilianStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.SAWesternStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.PacificSAStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.TurksAndCaicosStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.NewfoundlandStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.TocantinsStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.ESouthAmericaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.SAEasternStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.ArgentinaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.GreenlandStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.MontevideoStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.SaintPierreStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.BahiaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.UTC02">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.MidAtlanticStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.AzoresStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CapeVerdeStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.UTC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.MoroccoStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.GMTStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.GreenwichStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.WEuropeStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CentralEuropeStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.RomanceStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CentralEuropeanStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.WCentralAfricaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.NamibiaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.JordanStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.GTBStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.MiddleEastStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.EgyptStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.EEuropeStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.SyriaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.WestBankStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.SouthAfricaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.FLEStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.TurkeyStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.IsraelStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.KaliningradStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.LibyaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.ArabicStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.ArabStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.BelarusStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.RussianStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.EAfricaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.IranStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.ArabianStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.AstrakhanStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.AzerbaijanStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.RussiaTimeZone3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.MauritiusStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.GeorgianStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CaucasusStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.AfghanistanStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.WestAsiaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.EkaterinburgStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.PakistanStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.IndiaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.SriLankaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.NepalStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CentralAsiaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.BangladeshStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.NCentralAsiaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.MyanmarStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.SEAsiaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.AltaiStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.WMongoliaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.NorthAsiaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.TomskStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.ChinaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.NorthAsiaEastStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.SingaporeStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.WAustraliaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.TaipeiStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.UlaanbaatarStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.NorthKoreaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.AusCentralWStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.TransbaikalStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.TokyoStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.KoreaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.YakutskStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CenAustraliaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.AUSCentralStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.EAustraliaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.AUSEasternStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.WestPacificStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.TasmaniaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.VladivostokStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.LordHoweStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.BougainvilleStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.RussiaTimeZone10">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.MagadanStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.NorfolkStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.SakhalinStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.CentralPacificStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.RussiaTimeZone11">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.NewZealandStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.UTC12">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.FijiStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.KamchatkaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.ChathamIslandsStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.TongaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.SamoaStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeZone.LineIslandsStandardTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.UDouble">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UDouble.Epsilon">
            <summary>
            Equivalent to <see cref="F:System.Double.Epsilon"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.UDouble.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:Imagin.Common.UDouble"/> (0).
            </summary>
        </member>
        <member name="F:Imagin.Common.UDouble.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:Imagin.Common.UDouble"/> (equivalent to <see cref="F:System.Double.MaxValue"/>).
            </summary>
        </member>
        <member name="F:Imagin.Common.UDouble.NaN">
            <summary>
            Equivalent to <see cref="F:System.Double.NaN"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.UDouble.PositiveInfinity">
            <summary>
            Equivalent to <see cref="F:System.Double.PositiveInfinity"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.UDouble.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.UDouble.op_Implicit(Imagin.Common.UDouble)~System.Double">
            <summary>
            
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Imagin.Common.UDouble.op_Implicit(System.Double)~Imagin.Common.UDouble">
            <summary>
            
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Imagin.Common.UDouble.op_LessThan(Imagin.Common.UDouble,Imagin.Common.UDouble)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDouble.op_GreaterThan(Imagin.Common.UDouble,Imagin.Common.UDouble)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDouble.op_Equality(Imagin.Common.UDouble,Imagin.Common.UDouble)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDouble.op_Inequality(Imagin.Common.UDouble,Imagin.Common.UDouble)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDouble.op_LessThanOrEqual(Imagin.Common.UDouble,Imagin.Common.UDouble)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDouble.op_GreaterThanOrEqual(Imagin.Common.UDouble,Imagin.Common.UDouble)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDouble.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDouble.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDouble.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.UpDown">
            <summary>
            Represents a direction that can only be up or down.
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.Unspecified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.Down">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.Up">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
